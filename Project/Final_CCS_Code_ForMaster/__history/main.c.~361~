//Ister bisiklet ol ister tir, ne olursan ol yine gel

#include <16f887.h>

/********************************************************/
/*               SYSTEM DEVICES                         */
/********************************************************/
#device ADC = 10


/********************************************************/
/*               SYSTEM USES                            */
/********************************************************/
#use delay(clock=4M) 
#use rs232(baud=9600,parity=N,uart1,bits=8)
#use fast_io(b)

/********************************************************/
/*               SYSTEM INCLUDES                        */
/********************************************************/
#include <lcd.c>    
#include <math.h>       
//#include <2408.c>    will be unlocked in soooon :)                                   
/********************************************************/
/*               SYSTEM FUSES                           */
/********************************************************/                                         
#fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT


/********************************************************/
/*               SYSTEM REGISTER                        */
/********************************************************/
//!#byte my_TIM0_OPTION_REG = 0x81 
//!#byte my_TIM0_MODULE_REG = 0x01 
//!#byte my_INTCON_REG      = 0x0B


/********************************************************/
/*               SYSTEM STRUCTS                         */
/********************************************************/
typedef struct{

unsigned long int time_Foaming;         //Process number-1
unsigned long int time_Washing;         //Process number-2
unsigned long int time_Ventilation;     //Process number-3
unsigned long int mililitre_Polishing;       //Process number-4 

}MikroleumClient_HandleTypeDef;



/********************************************************/
/*               SYSTEM VARIABLES                       */
/********************************************************/
//-VAR-->CRITICAL PART
char readed_ID;      //Coming data will be When came from slave PIC
int8 systemLock;     //If the ID is valid, system open. Otherwise it will remain locked
int8 OPS_Status;     //55 means ops will be canceled, otherwise ops will be going on
char SelectionState; //Put 'X' if button_Select is HIGH, put empty character if button_RemoveSelect is HIGH

//-VAR-->Keeps Clients
MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records
                                              //MikroClient[0] Mr. Selcuk //ClientNumber=0
                                              //MikroClient[1] Mr. Emre   //ClientNumber=1
int8 ClientNumber;   // Will be used as given on the right --> MikroClient[ClientNumber]                                        

//-VAR-->POTENTIOMETERS
int Index_OptionMenu;
int Index_TimeMoneyPreference;
int Index_PolishMililitre;
unsigned long int val_ADC_Pot_Surf;
unsigned long int val_ADC_Pot_Timer;

unsigned long int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};//Seconds
int         mililitrePolish[5] = {1,2,3,4,5}; // 1x100ml , 2x100ml, ... 5x100ml

/********************************************************/
/*               SYSTEM DEFINATION                      */
/********************************************************/
/* ======== SYSTEM INPUT & OUTPUT ======== */
#define button_NEXT           pin_A3
#define button_BACK           pin_A4
#define button_Select         pin_A5
#define button_RemoveSelect   pin_C0
#define button_OPS_START      pin_C1
#define button_OPS_CANCEL     pin_B0


/********************************************************/
/*               FUNCTIONS PROTOTYPES                   */
/********************************************************/
/* ======== SYSTEM CONFIGURATION FUNCTIONS PROTOTYPES  ======== */
void SubSystem_Init(void);
void trisSetting_Init(void);
void interruptSetting_Init(void);
void adcSetting_Init(void);

/* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */
void SubSystem_lcd_IdleStatus(void);
void NavigateOperationMenu(void);
void NavigateTimeMoneyPreferenceMenu(void);
void NavigatePolishingMenu(void);

/* ======== UART SERIAL COM. FUNCTIONS PROTOTYPES  ======== */
void SubSystem_uart_CheckTheMessage(void);


/********************************************************/
/*               SYSTEM MACROS                          */
/********************************************************/
/* ======== -BEGIN- SYSTEM POTENTIOMETER INDEXER -BEGIN- ======== */
#define ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf)        \
   do{                                        \
          Index_OptionMenu = ((val_ADC_Pot_Surf*5)/1020);  \
          if(Index_OptionMenu >= 5){                       \
            Index_OptionMenu = 4;                          \
          }                                                \
   }while(0)
   
#define ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer)              \
   do{                                                                \
          Index_TimeMoneyPreference = ((val_ADC_Pot_Timer*12)/1020);  \
          if(Index_TimeMoneyPreference >= 12){                        \
             Index_TimeMoneyPreference = 11;                          \
          }                                                           \
   }while(0)
/* ======== -END- SYSTEM POTENTIOMETER INDEXER -END- ======== */   

/* ======== -BEGIN- SYSTEM TIMER TIME CONFIG -BEGIN- ======== */
/* ======== -END- SYSTEM TIMER TIME CONFIG -END- ======== */



/********************************************************/
/*               SYSTEM INTERRUPTS                      */
/********************************************************/
/* ======== -BEGIN- EXTERNAL INTERRUPT -BEGIN- ======== */
#int_EXT
void system_isr_OperationCANCEL(){
  OPS_Status = 55;
}
/* ======== -END- EXTERNAL INTERRUPT -END- ======== */

/* ======== -BEGIN- TIMER_0 INTERRUPT -BEGIN- ======== */
/* ======== -END- TIMER_0 INTERRUPT -END- ======== */



void main(void) 
{
  
   //-->System parameters will be initialized
   SubSystem_Init();
      
   //-->Wait until unlock the system
   do{
           SubSystem_lcd_IdleStatus();   //Greeting the customer
           
           if(kbhit())
           {
              readed_ID = getc();
              SubSystem_uart_CheckTheMessage();
           }      
        
    }while(systemLock!=1);
 
    delay_ms(1000);
  
      //Potansiyometreden deðerler okuyacak, opsiyonlarý gezmek için
      //ileri butonuna basýlýnca pot hangi opsiyonda ise o opsiyona gidilecek
      //geri butonuna basýlýnca pot ile tekrardan yukardan aþaðý gezilebilecek
      //diyelim ki bir opsiyonun içine girdi, pot kullanarak zamanlama ayarlarý ile oynuyor, 
      //çift týk ile ilgili zaman ve ücreti seçebilecek, tek týk ile de bozabilecek
      do{
             //Start Of Conversation for ADC_Surf
             set_adc_channel(0);
             
             //Get Surf_Pot ADC value(0-1024)
             val_ADC_Pot_Surf = read_adc();  
             
             //Convert Surf_Pot ADC value into the option menu index
             ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf);
            
             //Use index value to show selected option and other one
             NavigateOperationMenu();
             
             //Clear selection
             SelectionState = ' ';
             
                //The client wants to see the next section based on the selected option
                if((input(button_NEXT) == 1) && (Index_OptionMenu <= 2))
                {
      
                        do{
                              //Start Of Conversation for ADC_Timer
                              set_adc_channel(1);
                              
                              //Get Timer_Pot ADC value(0-1024)
                              val_ADC_Pot_Timer = read_adc(); 
                              
                              //Convert Timer_Pot ADC value into the option menu index
                              ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer);
                              
                              //Use index value to show time & money & preference
                              NavigateTimeMoneyPreferenceMenu();
                              
                              //Break the while condation
                              if(input(button_BACK) == 1){
                                 break;
                              }
                        
                        }while(OPS_Status!=55); 
                }
             
             delay_ms(100);
  
      }while(OPS_Status!=55);
      
      
      
      printf(lcd_putc,"\f");
      lcd_gotoxy(2,1);
      printf(lcd_putc,"CLOSING");
      delay_ms(1000);
      printf(lcd_putc,"\f");  
      lcd_gotoxy(1,1);
      printf(lcd_putc, "Kopuk:%ld", MikroClient[ClientNumber].time_Foaming);
      lcd_gotoxy(1,2);
      printf(lcd_putc, "Su::%ld",MikroClient[ClientNumber].time_Washing);
      delay_ms(2000);
      printf(lcd_putc,"\f");  
      lcd_gotoxy(1,1);
      printf(lcd_putc, "Hava:%ld", MikroClient[ClientNumber].time_Ventilation);
      delay_ms(2000);
      
    while(1)
    {
    
   
   
    }
 
 
}


/* ======== -BEGIN- SYSTEM CONFIGURATION FUNCTIONS -BEGIN- ======== */
//Function-1
void SubSystem_Init(void){
 lcd_init();
 trisSetting_Init();
 interruptSetting_Init();
 adcSetting_Init();
}

//Function-2
void trisSetting_Init(){
   set_tris_b(0x01);
}

//Function-3
void interruptSetting_Init(){
     //-CONFIG--> OPERATION CANCEL BUTTON 
       ext_int_edge(L_TO_H); //Harici kesme Lojik 0'dan 1'e geçerken
       enable_interrupts(INT_EXT); //Harici kesme aktif
       enable_interrupts(GLOBAL); //Aktif kesmeler için genel kesme yetkisi ver
     //-CONFIG--> TIMER0 
}

//Function-4
void adcSetting_Init(){
     //-CONFIG--> Surfing Potentiometer
        setup_adc_ports(sAN0|sAN1);
        setup_adc(adc_clock_div_32);
        delay_us(200);
        
     //-CONFIG--> Timer Potentiometer
     //-CONFIG--> Process Intensity Potentiometer
}

/* ======== -END- SYSTEM CONFIGURATION FUNCTIONS -END- ======== */




/* ======== -BEGIN- LCD SCREEN FUNCTIONS -BEGIN- ======== */
/**
 *@brief :It sequentially displays a welcome message and 
 *        prompts the user to present their ID card.
 */
void SubSystem_lcd_IdleStatus(void){
      printf(lcd_putc,"\f");
      lcd_gotoxy(4,1);
      printf(lcd_putc,"Mikroleum'a");
      lcd_gotoxy(4,2);
      printf(lcd_putc,"Hosgeldiniz");
      delay_ms(500);
      printf(lcd_putc,"\f");
      
      lcd_gotoxy(1,1);
      printf(lcd_putc,"Lutfen ID Karti");
      lcd_gotoxy(4,2);
      printf(lcd_putc,"Gosteriniz");
      delay_ms(500);
      printf(lcd_putc,"\f");
}

//Function-2
void NavigateOperationMenu(void){
   printf(lcd_putc, "\f"); // LCD'yi temizle

    // 1. Seçenek
    if (Index_OptionMenu == 0) {
        lcd_gotoxy(1, 1);
        printf(lcd_putc, "1-Kopuk Islem <-");
        lcd_gotoxy(1, 2);
        printf(lcd_putc, "2-Su Islem");   
    } 

    // 2. Seçenek
    if (Index_OptionMenu == 1) {
        lcd_gotoxy(1, 1);
        printf(lcd_putc, "2-Su Islem <-");
        lcd_gotoxy(1, 2);
        printf(lcd_putc, "3-Hava Islem");       
    }
    
    // 3. Seçenek
        if (Index_OptionMenu == 2) {
        lcd_gotoxy(1, 1);
        printf(lcd_putc, "3-Hava Islem <-");
        lcd_gotoxy(1, 2);
        printf(lcd_putc, "4-Cila Islem");   
    } 

    // 4. Seçenek
    if (Index_OptionMenu == 3) {
        lcd_gotoxy(1, 1);
        printf(lcd_putc, "4-Cila Islem <-");
        lcd_gotoxy(1, 2);
        printf(lcd_putc, "5-Kayit Islem");    
    }
    
    // 5. Seçenek
    if (Index_OptionMenu == 4) {
        lcd_gotoxy(1, 1);
        printf(lcd_putc, "5-Kayit Islem <-"); 
    }


}

//Function-3
void NavigateTimeMoneyPreferenceMenu(void){
   
   printf(lcd_putc, "\f"); 
   lcd_gotoxy(1,1);
   printf(lcd_putc, "Ucret:%d tl",Index_TimeMoneyPreference*2+2);
   lcd_gotoxy(1,2);
   printf(lcd_putc, "Sure:%ld",time_arr[Index_TimeMoneyPreference]);
   lcd_gotoxy(10,2);
   printf(lcd_putc, "Sec:");
   lcd_gotoxy(14,2);
   printf(lcd_putc, "%c",SelectionState);
   
   
   if(input(button_Select) == 1){
      SelectionState = 'X';
      
      //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu
      if(Index_OptionMenu == 0){
         MikroClient[ClientNumber].time_Foaming = time_arr[Index_TimeMoneyPreference];
      }
      else if(Index_OptionMenu == 1){
         MikroClient[ClientNumber].time_Washing = time_arr[Index_TimeMoneyPreference];
      }
      else if(Index_OptionMenu == 2){
         MikroClient[ClientNumber].time_Ventilation = time_arr[Index_TimeMoneyPreference];
      }
   }
   
   if(input(button_RemoveSelect) == 1){
      SelectionState = ' ';
   }
   
   delay_ms(80);
}

//Function-4
void NavigatePolishingMenu(){
   printf(lcd_putc, "\f"); 
   lcd_gotoxy(1,1);
   printf(lcd_putc, "Ucret:%d tl",);
   lcd_gotoxy(1,2);
   printf(lcd_putc, "Mililitre:%ld",);
   lcd_gotoxy(10,2);
   printf(lcd_putc, "Sec:");
   lcd_gotoxy(14,2);
   printf(lcd_putc, "%c",SelectionState);
   
   
   if(input(button_Select) == 1){
      SelectionState = 'X';
      
      //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu
      if(Index_OptionMenu == 3){
         MikroClient[ClientNumber].mililitre_Polishing = mililitrePolish[burasýdolcak];
      }
      
   }
   
   if(input(button_RemoveSelect) == 1){
      SelectionState = ' ';
   }
   
   delay_ms(80);
}
/* ======== -END- LCD SCREEN FUNCTIONS -END- ======== */




/* ======== -BEGIN- UART PROTOCOL FUNCTIONS -BEGIN- ======== */
/**
 *@brief : This function checks the `readed_ID` variable to determine 
 *         the action to take based on predefined identifiers. Depending on the identifier,
 *         it displays a welcome message for specific users or sets the system to an idle state.
 */
void SubSystem_uart_CheckTheMessage(void){
   
   if(readed_ID == '+'){      //Mr. Selçuk's ID
      ClientNumber = 0;       //System works for Mr. Selcuk
      lcd_gotoxy(4,1);
      printf(lcd_putc,"Hosgeldiniz");
      lcd_gotoxy(4,2);
      printf(lcd_putc,"Selcuk Bey");
      systemLock = 1;
   }
   else if(readed_ID == '*'){ //Mr. Emre's ID
      ClientNumber = 1;       //System works for Mr. Emre
      lcd_gotoxy(4,1);
      printf(lcd_putc,"Hosgeldiniz");
      lcd_gotoxy(4,2);
      printf(lcd_putc,"Emre Bey");
      systemLock = 1;
   }
   else if(readed_ID == '.'){ //Slave pic is idle status
       systemLock = 0;
   }

}
/* ======== -END- UART PROTOCOL FUNCTIONS -END- ======== */
