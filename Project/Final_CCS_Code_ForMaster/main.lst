CCS PCM C Compiler, Version 5.049, 5967               30-Ara-24 01:37

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Final_CCS_Code_ForMaster\main.lst

               ROM used:   3945 words (48%)
                           Largest free fragment is 2048
               RAM used:   131 (36%) at main() level
                           152 (41%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0B
0001:  MOVWF  0A
0002:  GOTO   3CA
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   050
002B:  BTFSS  0B.5
002C:  GOTO   02F
002D:  BTFSC  0B.2
002E:  GOTO   053
002F:  MOVF   22,W
0030:  MOVWF  04
0031:  MOVF   23,W
0032:  MOVWF  77
0033:  MOVF   24,W
0034:  MOVWF  78
0035:  MOVF   25,W
0036:  MOVWF  79
0037:  MOVF   26,W
0038:  MOVWF  7A
0039:  MOVF   27,W
003A:  BSF    03.6
003B:  MOVWF  0D
003C:  BCF    03.6
003D:  MOVF   28,W
003E:  BSF    03.6
003F:  MOVWF  0F
0040:  BCF    03.6
0041:  MOVF   29,W
0042:  BSF    03.6
0043:  MOVWF  0C
0044:  BCF    03.6
0045:  MOVF   2A,W
0046:  BSF    03.6
0047:  MOVWF  0E
0048:  BCF    03.6
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   056
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   05D
.................... //Ister bisiklet ol ister tir, ne olursan ol yine gel 
....................  
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
008B:  DATA 46,1D
008C:  DATA 33,18
008D:  DATA 54,26
008E:  DATA 20,10
008F:  DATA 57,1D
0090:  DATA 32,18
0091:  DATA 54,26
0092:  DATA 00,00
0093:  DATA 56,1D
0094:  DATA 31,18
0095:  DATA 54,26
0096:  DATA 20,10
0097:  DATA 50,1D
0098:  DATA 33,19
0099:  DATA 54,26
009A:  DATA 00,01
009B:  DATA 4F,38
009C:  DATA 65,39
009D:  DATA E1,39
009E:  DATA F9,37
009F:  DATA 6E,00
00A0:  DATA C2,30
00A1:  DATA 73,36
00A2:  DATA 61,3A
00A3:  DATA 69,36
00A4:  DATA E4,34
00A5:  DATA 00,00
00A6:  DATA CD,34
00A7:  DATA 6B,39
00A8:  DATA 6F,36
00A9:  DATA E5,3A
00AA:  DATA ED,13
00AB:  DATA 61,00
00AC:  DATA C8,37
00AD:  DATA F3,33
00AE:  DATA 65,36
00AF:  DATA E4,34
00B0:  DATA EE,34
00B1:  DATA 7A,00
00B2:  DATA CC,3A
00B3:  DATA 74,33
00B4:  DATA 65,37
00B5:  DATA A0,24
00B6:  DATA 44,10
00B7:  DATA CB,30
00B8:  DATA 72,3A
00B9:  DATA 69,00
00BA:  DATA C7,37
00BB:  DATA 73,3A
00BC:  DATA 65,39
00BD:  DATA 69,37
00BE:  DATA 69,3D
00BF:  DATA 00,01
00C0:  DATA B1,16
00C1:  DATA CB,37
00C2:  DATA F0,3A
00C3:  DATA 6B,10
00C4:  DATA C9,39
00C5:  DATA EC,32
00C6:  DATA 6D,10
00C7:  DATA BC,16
00C8:  DATA 00,01
00C9:  DATA B2,16
00CA:  DATA D3,3A
00CB:  DATA A0,24
00CC:  DATA 73,36
00CD:  DATA E5,36
00CE:  DATA 00,01
00CF:  DATA B2,16
00D0:  DATA D3,3A
00D1:  DATA A0,24
00D2:  DATA 73,36
00D3:  DATA E5,36
00D4:  DATA 20,1E
00D5:  DATA 2D,00
00D6:  DATA B3,16
00D7:  DATA C8,30
00D8:  DATA F6,30
00D9:  DATA A0,24
00DA:  DATA 73,36
00DB:  DATA E5,36
00DC:  DATA 00,01
00DD:  DATA B3,16
00DE:  DATA C8,30
00DF:  DATA F6,30
00E0:  DATA A0,24
00E1:  DATA 73,36
00E2:  DATA E5,36
00E3:  DATA 20,1E
00E4:  DATA 2D,00
00E5:  DATA B4,16
00E6:  DATA C3,34
00E7:  DATA EC,30
00E8:  DATA A0,24
00E9:  DATA 73,36
00EA:  DATA E5,36
00EB:  DATA 00,01
00EC:  DATA B4,16
00ED:  DATA C3,34
00EE:  DATA EC,30
00EF:  DATA A0,24
00F0:  DATA 73,36
00F1:  DATA E5,36
00F2:  DATA 20,1E
00F3:  DATA 2D,00
00F4:  DATA B5,16
00F5:  DATA CB,30
00F6:  DATA F9,34
00F7:  DATA 74,10
00F8:  DATA C9,39
00F9:  DATA EC,32
00FA:  DATA 6D,00
00FB:  DATA B5,16
00FC:  DATA CB,30
00FD:  DATA F9,34
00FE:  DATA 74,10
00FF:  DATA C9,39
0100:  DATA EC,32
0101:  DATA 6D,10
0102:  DATA BC,16
0103:  DATA 00,00
0104:  DATA D5,31
0105:  DATA F2,32
0106:  DATA 74,1D
0107:  DATA 25,32
0108:  DATA 20,3A
0109:  DATA 6C,00
010A:  DATA D3,3A
010B:  DATA F2,32
010C:  DATA BA,12
010D:  DATA 6C,32
010E:  DATA 00,00
010F:  DATA D3,32
0110:  DATA 63,1D
0111:  DATA 00,01
0112:  DATA D5,31
0113:  DATA F2,32
0114:  DATA 74,1D
0115:  DATA 25,36
0116:  DATA 64,10
0117:  DATA 74,36
0118:  DATA 00,01
0119:  DATA D3,32
011A:  DATA 63,1D
011B:  DATA 00,01
011C:  DATA C9,39
011D:  DATA EC,32
011E:  DATA 6D,10
011F:  DATA 2D,10
0120:  DATA 31,10
0121:  DATA BC,16
0122:  DATA 00,01
0123:  DATA C9,39
0124:  DATA EC,32
0125:  DATA 6D,10
0126:  DATA 2D,10
0127:  DATA 32,00
0128:  DATA C9,39
0129:  DATA EC,32
012A:  DATA 6D,10
012B:  DATA 2D,10
012C:  DATA 32,10
012D:  DATA BC,16
012E:  DATA 00,01
012F:  DATA C9,39
0130:  DATA EC,32
0131:  DATA 6D,10
0132:  DATA 2D,10
0133:  DATA 33,00
0134:  DATA C9,39
0135:  DATA EC,32
0136:  DATA 6D,10
0137:  DATA 2D,10
0138:  DATA 33,10
0139:  DATA BC,16
013A:  DATA 00,01
013B:  DATA C9,39
013C:  DATA EC,32
013D:  DATA 6D,10
013E:  DATA 2D,10
013F:  DATA 34,00
0140:  DATA C9,39
0141:  DATA EC,32
0142:  DATA 6D,10
0143:  DATA 2D,10
0144:  DATA 34,10
0145:  DATA BC,16
0146:  DATA 00,01
0147:  DATA C9,39
0148:  DATA EC,32
0149:  DATA 6D,10
014A:  DATA 2D,10
014B:  DATA 35,00
014C:  DATA C9,39
014D:  DATA EC,32
014E:  DATA 6D,10
014F:  DATA 2D,10
0150:  DATA 35,10
0151:  DATA BC,16
0152:  DATA 00,00
0153:  DATA 43,26
0154:  DATA CF,29
0155:  DATA 49,27
0156:  DATA 47,00
0157:  DATA CB,37
0158:  DATA F0,3A
0159:  DATA 6B,1D
015A:  DATA 25,36
015B:  DATA 64,00
015C:  DATA D3,3A
015D:  DATA 3A,1D
015E:  DATA 25,36
015F:  DATA 64,00
0160:  DATA C8,30
0161:  DATA F6,30
0162:  DATA BA,12
0163:  DATA 6C,32
0164:  DATA 00,01
0165:  DATA C3,34
0166:  DATA EC,30
0167:  DATA BA,12
0168:  DATA 6C,32
0169:  DATA 00,00
016A:  DATA C8,37
016B:  DATA F3,33
016C:  DATA 65,36
016D:  DATA E4,34
016E:  DATA EE,34
016F:  DATA 7A,00
0170:  DATA D3,32
0171:  DATA EC,31
0172:  DATA F5,35
0173:  DATA 20,21
0174:  DATA E5,3C
0175:  DATA 00,01
0176:  DATA C8,37
0177:  DATA F3,33
0178:  DATA 65,36
0179:  DATA E4,34
017A:  DATA EE,34
017B:  DATA 7A,00
017C:  DATA C5,36
017D:  DATA F2,32
017E:  DATA 20,21
017F:  DATA E5,3C
0180:  DATA 00,00
*
02C3:  MOVF   0B,W
02C4:  BSF    03.5
02C5:  MOVWF  41
02C6:  BCF    03.5
02C7:  BCF    0B.7
02C8:  BSF    03.5
02C9:  BSF    03.6
02CA:  BSF    0C.7
02CB:  BSF    0C.0
02CC:  NOP
02CD:  NOP
02CE:  BCF    03.6
02CF:  BTFSS  41.7
02D0:  GOTO   2D4
02D1:  BCF    03.5
02D2:  BSF    0B.7
02D3:  BSF    03.5
02D4:  BCF    03.5
02D5:  BSF    03.6
02D6:  MOVF   0C,W
02D7:  ANDLW  7F
02D8:  BTFSC  03.2
02D9:  GOTO   335
02DA:  BSF    03.5
02DB:  BCF    03.6
02DC:  MOVWF  41
02DD:  BCF    03.5
02DE:  BSF    03.6
02DF:  MOVF   0D,W
02E0:  BSF    03.5
02E1:  BCF    03.6
02E2:  MOVWF  42
02E3:  BCF    03.5
02E4:  BSF    03.6
02E5:  MOVF   0F,W
02E6:  BSF    03.5
02E7:  BCF    03.6
02E8:  MOVWF  43
02E9:  MOVF   41,W
02EA:  MOVWF  4C
02EB:  BCF    03.5
02EC:  CALL   289
02ED:  BSF    03.5
02EE:  MOVF   42,W
02EF:  BCF    03.5
02F0:  BSF    03.6
02F1:  MOVWF  0D
02F2:  BSF    03.5
02F3:  BCF    03.6
02F4:  MOVF   43,W
02F5:  BCF    03.5
02F6:  BSF    03.6
02F7:  MOVWF  0F
02F8:  BCF    03.6
02F9:  MOVF   0B,W
02FA:  BSF    03.5
02FB:  MOVWF  44
02FC:  BCF    03.5
02FD:  BCF    0B.7
02FE:  BSF    03.5
02FF:  BSF    03.6
0300:  BSF    0C.7
0301:  BSF    0C.0
0302:  NOP
0303:  NOP
0304:  BCF    03.6
0305:  BTFSS  44.7
0306:  GOTO   30A
0307:  BCF    03.5
0308:  BSF    0B.7
0309:  BSF    03.5
030A:  BCF    03.5
030B:  BSF    03.6
030C:  RLF    0C,W
030D:  RLF    0E,W
030E:  ANDLW  7F
030F:  BTFSC  03.2
0310:  GOTO   335
0311:  BSF    03.5
0312:  BCF    03.6
0313:  MOVWF  41
0314:  BCF    03.5
0315:  BSF    03.6
0316:  MOVF   0D,W
0317:  BSF    03.5
0318:  BCF    03.6
0319:  MOVWF  42
031A:  BCF    03.5
031B:  BSF    03.6
031C:  MOVF   0F,W
031D:  BSF    03.5
031E:  BCF    03.6
031F:  MOVWF  43
0320:  MOVF   41,W
0321:  MOVWF  4C
0322:  BCF    03.5
0323:  CALL   289
0324:  BSF    03.5
0325:  MOVF   42,W
0326:  BCF    03.5
0327:  BSF    03.6
0328:  MOVWF  0D
0329:  BSF    03.5
032A:  BCF    03.6
032B:  MOVF   43,W
032C:  BCF    03.5
032D:  BSF    03.6
032E:  MOVWF  0F
032F:  INCF   0D,F
0330:  BTFSC  03.2
0331:  INCF   0F,F
0332:  BCF    03.6
0333:  GOTO   2C3
0334:  BSF    03.6
0335:  BCF    03.6
0336:  RETURN
*
03E2:  MOVLW  10
03E3:  BSF    03.5
03E4:  MOVWF  49
03E5:  CLRF   77
03E6:  CLRF   7A
03E7:  RRF    46,F
03E8:  RRF    45,F
03E9:  BTFSS  03.0
03EA:  GOTO   3F1
03EB:  MOVF   47,W
03EC:  ADDWF  77,F
03ED:  BTFSC  03.0
03EE:  INCF   7A,F
03EF:  MOVF   48,W
03F0:  ADDWF  7A,F
03F1:  RRF    7A,F
03F2:  RRF    77,F
03F3:  RRF    79,F
03F4:  RRF    78,F
03F5:  DECFSZ 49,F
03F6:  GOTO   3E7
03F7:  BCF    03.5
03F8:  RETURN
03F9:  CLRF   78
03FA:  CLRF   79
03FB:  CLRF   77
03FC:  CLRF   7A
03FD:  BSF    03.5
03FE:  MOVF   46,W
03FF:  BTFSS  03.2
0400:  GOTO   404
0401:  MOVF   45,W
0402:  BTFSC  03.2
0403:  GOTO   41E
0404:  MOVLW  10
0405:  MOVWF  47
0406:  BCF    03.0
0407:  RLF    43,F
0408:  RLF    44,F
0409:  RLF    77,F
040A:  RLF    7A,F
040B:  MOVF   46,W
040C:  SUBWF  7A,W
040D:  BTFSS  03.2
040E:  GOTO   411
040F:  MOVF   45,W
0410:  SUBWF  77,W
0411:  BTFSS  03.0
0412:  GOTO   41A
0413:  MOVF   45,W
0414:  SUBWF  77,F
0415:  BTFSS  03.0
0416:  DECF   7A,F
0417:  MOVF   46,W
0418:  SUBWF  7A,F
0419:  BSF    03.0
041A:  RLF    78,F
041B:  RLF    79,F
041C:  DECFSZ 47,F
041D:  GOTO   406
041E:  BCF    03.5
041F:  RETURN
*
04B2:  MOVF   0B,W
04B3:  BSF    03.5
04B4:  MOVWF  44
04B5:  BCF    03.5
04B6:  BCF    0B.7
04B7:  BSF    03.5
04B8:  BSF    03.6
04B9:  BSF    0C.7
04BA:  BSF    0C.0
04BB:  NOP
04BC:  NOP
04BD:  BCF    03.6
04BE:  BTFSS  44.7
04BF:  GOTO   4C3
04C0:  BCF    03.5
04C1:  BSF    0B.7
04C2:  BSF    03.5
04C3:  BTFSC  03.0
04C4:  GOTO   4FC
04C5:  BCF    03.5
04C6:  BSF    03.6
04C7:  MOVF   0C,W
04C8:  ANDLW  7F
04C9:  BSF    03.5
04CA:  BCF    03.6
04CB:  MOVWF  44
04CC:  BCF    03.5
04CD:  BSF    03.6
04CE:  MOVF   0D,W
04CF:  BSF    03.5
04D0:  BCF    03.6
04D1:  MOVWF  45
04D2:  BCF    03.5
04D3:  BSF    03.6
04D4:  MOVF   0F,W
04D5:  BSF    03.5
04D6:  BCF    03.6
04D7:  MOVWF  46
04D8:  MOVF   44,W
04D9:  MOVWF  4C
04DA:  BCF    03.5
04DB:  CALL   289
04DC:  BSF    03.5
04DD:  MOVF   45,W
04DE:  BCF    03.5
04DF:  BSF    03.6
04E0:  MOVWF  0D
04E1:  BSF    03.5
04E2:  BCF    03.6
04E3:  MOVF   46,W
04E4:  BCF    03.5
04E5:  BSF    03.6
04E6:  MOVWF  0F
04E7:  BCF    03.6
04E8:  MOVF   0B,W
04E9:  BSF    03.5
04EA:  MOVWF  47
04EB:  BCF    03.5
04EC:  BCF    0B.7
04ED:  BSF    03.5
04EE:  BSF    03.6
04EF:  BSF    0C.7
04F0:  BSF    0C.0
04F1:  NOP
04F2:  NOP
04F3:  BCF    03.6
04F4:  BTFSS  47.7
04F5:  GOTO   4F9
04F6:  BCF    03.5
04F7:  BSF    0B.7
04F8:  BSF    03.5
04F9:  DECFSZ 43,F
04FA:  GOTO   4FC
04FB:  GOTO   52A
04FC:  BCF    03.5
04FD:  BSF    03.6
04FE:  RLF    0C,W
04FF:  RLF    0E,W
0500:  ANDLW  7F
0501:  BSF    03.5
0502:  BCF    03.6
0503:  MOVWF  44
0504:  BCF    03.5
0505:  BSF    03.6
0506:  MOVF   0D,W
0507:  BSF    03.5
0508:  BCF    03.6
0509:  MOVWF  45
050A:  BCF    03.5
050B:  BSF    03.6
050C:  MOVF   0F,W
050D:  BSF    03.5
050E:  BCF    03.6
050F:  MOVWF  46
0510:  MOVF   44,W
0511:  MOVWF  4C
0512:  BCF    03.5
0513:  CALL   289
0514:  BSF    03.5
0515:  MOVF   45,W
0516:  BCF    03.5
0517:  BSF    03.6
0518:  MOVWF  0D
0519:  BSF    03.5
051A:  BCF    03.6
051B:  MOVF   46,W
051C:  BCF    03.5
051D:  BSF    03.6
051E:  MOVWF  0F
051F:  INCF   0D,F
0520:  BTFSC  03.2
0521:  INCF   0F,F
0522:  BCF    03.0
0523:  BSF    03.5
0524:  BCF    03.6
0525:  DECFSZ 43,F
0526:  GOTO   528
0527:  GOTO   52A
0528:  BCF    03.5
0529:  GOTO   4B2
052A:  BCF    03.5
052B:  RETURN
052C:  BSF    03.5
052D:  MOVF   49,W
052E:  CLRF   78
052F:  SUBWF  48,W
0530:  BTFSC  03.0
0531:  GOTO   535
0532:  MOVF   48,W
0533:  MOVWF  77
0534:  GOTO   541
0535:  CLRF   77
0536:  MOVLW  08
0537:  MOVWF  4A
0538:  RLF    48,F
0539:  RLF    77,F
053A:  MOVF   49,W
053B:  SUBWF  77,W
053C:  BTFSC  03.0
053D:  MOVWF  77
053E:  RLF    78,F
053F:  DECFSZ 4A,F
0540:  GOTO   538
0541:  BCF    03.5
0542:  RETURN
0543:  BSF    03.5
0544:  CLRF   4B
0545:  MOVF   04,W
0546:  MOVWF  4A
0547:  BCF    4B.0
0548:  BTFSC  03.7
0549:  BSF    4B.0
054A:  BTFSS  44.7
054B:  GOTO   554
054C:  BSF    4A.7
054D:  BTFSS  4A.4
054E:  INCF   4A,F
054F:  COMF   43,F
0550:  COMF   44,F
0551:  INCF   43,F
0552:  BTFSC  03.2
0553:  INCF   44,F
0554:  SWAPF  44,W
0555:  IORLW  F0
0556:  MOVWF  46
0557:  ADDWF  46,F
0558:  ADDLW  E2
0559:  MOVWF  47
055A:  ADDLW  32
055B:  MOVWF  49
055C:  MOVF   44,W
055D:  ANDLW  0F
055E:  ADDWF  47,F
055F:  ADDWF  47,F
0560:  ADDWF  49,F
0561:  ADDLW  E9
0562:  MOVWF  48
0563:  ADDWF  48,F
0564:  ADDWF  48,F
0565:  SWAPF  43,W
0566:  ANDLW  0F
0567:  ADDWF  48,F
0568:  ADDWF  49,F
0569:  RLF    48,F
056A:  RLF    49,F
056B:  COMF   49,F
056C:  RLF    49,F
056D:  MOVF   43,W
056E:  ANDLW  0F
056F:  ADDWF  49,F
0570:  RLF    46,F
0571:  MOVLW  07
0572:  MOVWF  45
0573:  MOVLW  0A
0574:  ADDWF  49,F
0575:  DECF   48,F
0576:  BTFSS  03.0
0577:  GOTO   574
0578:  ADDWF  48,F
0579:  DECF   47,F
057A:  BTFSS  03.0
057B:  GOTO   578
057C:  ADDWF  47,F
057D:  DECF   46,F
057E:  BTFSS  03.0
057F:  GOTO   57C
0580:  ADDWF  46,F
0581:  DECF   45,F
0582:  BTFSS  03.0
0583:  GOTO   580
0584:  MOVLW  C5
0585:  MOVWF  04
0586:  BCF    03.7
0587:  MOVLW  07
0588:  ANDWF  4A,W
0589:  BCF    4A.6
058A:  DECF   04,F
058B:  ANDWF  4A,W
058C:  BTFSS  03.2
058D:  GOTO   595
058E:  BTFSC  4A.4
058F:  INCF   04,F
0590:  BTFSC  4A.4
0591:  GOTO   595
0592:  MOVLW  20
0593:  MOVWF  77
0594:  GOTO   5B2
0595:  ADDWF  04,F
0596:  MOVLW  C9
0597:  SUBWF  04,W
0598:  BTFSC  03.2
0599:  BSF    4A.6
059A:  MOVF   00,W
059B:  MOVWF  77
059C:  BTFSS  03.2
059D:  GOTO   5A6
059E:  BTFSC  4A.6
059F:  GOTO   5A6
05A0:  BTFSC  4A.4
05A1:  GOTO   5C2
05A2:  BTFSC  4A.3
05A3:  GOTO   5A6
05A4:  MOVLW  20
05A5:  GOTO   5B1
05A6:  BTFSS  4A.7
05A7:  GOTO   5AE
05A8:  MOVLW  2D
05A9:  MOVWF  77
05AA:  DECF   04,F
05AB:  BCF    4A.6
05AC:  BCF    4A.7
05AD:  GOTO   5B2
05AE:  BSF    4A.3
05AF:  BCF    4A.4
05B0:  MOVLW  30
05B1:  ADDWF  77,F
05B2:  CLRF   44
05B3:  MOVF   04,W
05B4:  MOVWF  43
05B5:  BCF    44.0
05B6:  BTFSC  03.7
05B7:  BSF    44.0
05B8:  MOVF   77,W
05B9:  MOVWF  4C
05BA:  BCF    03.5
05BB:  CALL   289
05BC:  BSF    03.5
05BD:  MOVF   43,W
05BE:  MOVWF  04
05BF:  BCF    03.7
05C0:  BTFSC  44.0
05C1:  BSF    03.7
05C2:  INCF   04,F
05C3:  BTFSS  4A.6
05C4:  GOTO   596
05C5:  BCF    03.5
05C6:  RETURN
*
05E9:  MOVLW  20
05EA:  BTFSS  43.4
05EB:  MOVLW  30
05EC:  MOVWF  44
05ED:  MOVF   42,W
05EE:  MOVWF  77
05EF:  BTFSS  42.7
05F0:  GOTO   5F9
05F1:  COMF   77,F
05F2:  INCF   77,F
05F3:  MOVF   77,W
05F4:  MOVWF  42
05F5:  MOVLW  2D
05F6:  MOVWF  44
05F7:  BSF    43.7
05F8:  BSF    43.0
05F9:  MOVF   42,W
05FA:  MOVWF  48
05FB:  MOVLW  64
05FC:  MOVWF  49
05FD:  BCF    03.5
05FE:  CALL   52C
05FF:  MOVF   77,W
0600:  BSF    03.5
0601:  MOVWF  42
0602:  MOVLW  30
0603:  ADDWF  78,W
0604:  MOVWF  45
0605:  MOVF   42,W
0606:  MOVWF  48
0607:  MOVLW  0A
0608:  MOVWF  49
0609:  BCF    03.5
060A:  CALL   52C
060B:  MOVLW  30
060C:  ADDWF  77,W
060D:  BSF    03.5
060E:  MOVWF  47
060F:  MOVLW  30
0610:  ADDWF  78,W
0611:  MOVWF  46
0612:  MOVF   44,W
0613:  MOVWF  77
0614:  MOVLW  30
0615:  SUBWF  45,W
0616:  BTFSC  03.2
0617:  GOTO   61C
0618:  BSF    43.1
0619:  BTFSC  43.7
061A:  BSF    43.2
061B:  GOTO   630
061C:  MOVF   44,W
061D:  MOVWF  45
061E:  MOVLW  20
061F:  MOVWF  44
0620:  MOVLW  30
0621:  SUBWF  46,W
0622:  BTFSC  03.2
0623:  GOTO   628
0624:  BSF    43.0
0625:  BTFSC  43.7
0626:  BSF    43.1
0627:  GOTO   630
0628:  BTFSS  03.2
0629:  BSF    43.0
062A:  BTFSS  03.2
062B:  GOTO   630
062C:  MOVF   45,W
062D:  MOVWF  46
062E:  MOVLW  20
062F:  MOVWF  45
0630:  BTFSC  43.2
0631:  GOTO   637
0632:  BTFSC  43.1
0633:  GOTO   63C
0634:  BTFSC  43.0
0635:  GOTO   641
0636:  GOTO   646
0637:  MOVF   44,W
0638:  MOVWF  4C
0639:  BCF    03.5
063A:  CALL   289
063B:  BSF    03.5
063C:  MOVF   45,W
063D:  MOVWF  4C
063E:  BCF    03.5
063F:  CALL   289
0640:  BSF    03.5
0641:  MOVF   46,W
0642:  MOVWF  4C
0643:  BCF    03.5
0644:  CALL   289
0645:  BSF    03.5
0646:  MOVF   47,W
0647:  MOVWF  4C
0648:  BCF    03.5
0649:  CALL   289
*
0745:  MOVLW  8E
0746:  MOVWF  77
0747:  BSF    03.5
0748:  MOVF   42,W
0749:  MOVWF  78
074A:  MOVF   41,W
074B:  MOVWF  79
074C:  CLRF   7A
074D:  MOVF   78,F
074E:  BTFSS  03.2
074F:  GOTO   75A
0750:  MOVF   79,W
0751:  MOVWF  78
0752:  CLRF   79
0753:  MOVLW  08
0754:  SUBWF  77,F
0755:  MOVF   78,F
0756:  BTFSS  03.2
0757:  GOTO   75A
0758:  CLRF   77
0759:  GOTO   762
075A:  BCF    03.0
075B:  BTFSC  78.7
075C:  GOTO   761
075D:  RLF    79,F
075E:  RLF    78,F
075F:  DECF   77,F
0760:  GOTO   75A
0761:  BCF    78.7
0762:  BCF    03.5
0763:  RETURN
0764:  BSF    03.5
0765:  MOVF   41,W
0766:  BTFSC  03.2
0767:  GOTO   7D5
0768:  MOVWF  49
0769:  MOVF   45,W
076A:  BTFSC  03.2
076B:  GOTO   7D5
076C:  ADDWF  49,F
076D:  BTFSC  03.0
076E:  GOTO   776
076F:  MOVLW  7F
0770:  SUBWF  49,F
0771:  BTFSS  03.0
0772:  GOTO   7D5
0773:  BTFSC  03.2
0774:  GOTO   7D5
0775:  GOTO   77A
0776:  MOVLW  81
0777:  ADDWF  49,F
0778:  BTFSC  03.0
0779:  GOTO   7D5
077A:  MOVF   49,W
077B:  MOVWF  77
077C:  CLRF   78
077D:  CLRF   79
077E:  CLRF   7A
077F:  MOVF   42,W
0780:  MOVWF  4D
0781:  BSF    4D.7
0782:  MOVF   43,W
0783:  MOVWF  4C
0784:  MOVF   44,W
0785:  MOVWF  4B
0786:  MOVLW  18
0787:  MOVWF  49
0788:  CLRF   4A
0789:  BTFSS  4B.0
078A:  GOTO   7A3
078B:  MOVF   48,W
078C:  ADDWF  7A,F
078D:  BTFSS  03.0
078E:  GOTO   795
078F:  INCF   79,F
0790:  BTFSS  03.2
0791:  GOTO   795
0792:  INCF   78,F
0793:  BTFSC  03.2
0794:  BSF    4A.7
0795:  MOVF   47,W
0796:  ADDWF  79,F
0797:  BTFSS  03.0
0798:  GOTO   79C
0799:  INCF   78,F
079A:  BTFSC  03.2
079B:  BSF    4A.7
079C:  MOVF   46,W
079D:  MOVWF  43
079E:  BSF    43.7
079F:  MOVF   43,W
07A0:  ADDWF  78,F
07A1:  BTFSC  03.0
07A2:  BSF    4A.7
07A3:  RLF    4A,F
07A4:  RRF    78,F
07A5:  RRF    79,F
07A6:  RRF    7A,F
07A7:  RRF    4D,F
07A8:  RRF    4C,F
07A9:  RRF    4B,F
07AA:  BCF    03.0
07AB:  DECFSZ 49,F
07AC:  GOTO   788
07AD:  MOVLW  01
07AE:  ADDWF  77,F
07AF:  BTFSC  03.0
07B0:  GOTO   7D5
07B1:  BTFSC  78.7
07B2:  GOTO   7BA
07B3:  RLF    4D,F
07B4:  RLF    7A,F
07B5:  RLF    79,F
07B6:  RLF    78,F
07B7:  DECF   77,F
07B8:  BTFSC  03.2
07B9:  GOTO   7D5
07BA:  BTFSS  4D.7
07BB:  GOTO   7CB
07BC:  INCF   7A,F
07BD:  BTFSS  03.2
07BE:  GOTO   7CB
07BF:  INCF   79,F
07C0:  BTFSS  03.2
07C1:  GOTO   7CB
07C2:  INCF   78,F
07C3:  BTFSS  03.2
07C4:  GOTO   7CB
07C5:  RRF    78,F
07C6:  RRF    79,F
07C7:  RRF    7A,F
07C8:  INCF   77,F
07C9:  BTFSC  03.2
07CA:  GOTO   7D5
07CB:  MOVF   42,W
07CC:  MOVWF  4A
07CD:  MOVF   46,W
07CE:  XORWF  4A,F
07CF:  BTFSS  4A.7
07D0:  GOTO   7D3
07D1:  BSF    78.7
07D2:  GOTO   7D9
07D3:  BCF    78.7
07D4:  GOTO   7D9
07D5:  CLRF   77
07D6:  CLRF   78
07D7:  CLRF   79
07D8:  CLRF   7A
07D9:  BCF    03.5
07DA:  RETURN
07DB:  MOVLW  8E
07DC:  MOVWF  77
07DD:  BSF    03.5
07DE:  MOVF   41,W
07DF:  SUBWF  77,F
07E0:  MOVF   42,W
07E1:  MOVWF  79
07E2:  MOVF   43,W
07E3:  MOVWF  78
07E4:  BSF    79.7
07E5:  MOVF   77,F
07E6:  BTFSC  03.2
07E7:  GOTO   7F3
07E8:  BCF    03.0
07E9:  MOVF   79,F
07EA:  BTFSS  03.2
07EB:  GOTO   7EF
07EC:  MOVF   78,F
07ED:  BTFSC  03.2
07EE:  GOTO   7F3
07EF:  RRF    79,F
07F0:  RRF    78,F
07F1:  DECFSZ 77,F
07F2:  GOTO   7E8
07F3:  BTFSS  42.7
07F4:  GOTO   7FA
07F5:  COMF   78,F
07F6:  COMF   79,F
07F7:  INCF   78,F
07F8:  BTFSC  03.2
07F9:  INCF   79,F
07FA:  BCF    03.5
07FB:  RETURN
....................  
.................... #list 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                  SYSTEM DEVICES                                                */   
.................... /*******************************************************************************************************************/   
....................  
.................... #device ADC = 10 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                  SYSTEM USES                                                   */   
.................... /*******************************************************************************************************************/   
....................  
.................... #use delay(clock=4M)  
*
0181:  MOVLW  CD
0182:  MOVWF  04
0183:  BCF    03.7
0184:  MOVF   00,W
0185:  BTFSC  03.2
0186:  GOTO   195
0187:  MOVLW  01
0188:  MOVWF  78
0189:  CLRF   77
018A:  DECFSZ 77,F
018B:  GOTO   18A
018C:  DECFSZ 78,F
018D:  GOTO   189
018E:  MOVLW  4A
018F:  MOVWF  77
0190:  DECFSZ 77,F
0191:  GOTO   190
0192:  GOTO   193
0193:  DECFSZ 00,F
0194:  GOTO   187
0195:  RETURN
.................... #use rs232(baud=9600,parity=N,uart1,bits=8) 
.................... #use fast_io(b) //Includes : The operation cancel button & The pins of the 7-segment display 
.................... #use fast_io(e) //Includes : 7-segment display pins for scanning 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                SYSTEM INCLUDES                                                  */   
.................... /*******************************************************************************************************************/   
.................... #include <lcd.c>     
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
01B0:  MOVLW  0F
01B1:  BSF    03.5
01B2:  ANDWF  08,W
01B3:  IORLW  F0
01B4:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
01B5:  BCF    03.5
01B6:  BSF    08.2
....................    delay_cycles(1); 
01B7:  NOP
....................    lcd_output_enable(1); 
01B8:  BSF    08.0
....................    delay_cycles(1); 
01B9:  NOP
....................    high = lcd_read_nibble(); 
01BA:  CALL   1A4
01BB:  MOVF   78,W
01BC:  BSF    03.5
01BD:  MOVWF  54
....................        
....................    lcd_output_enable(0); 
01BE:  BCF    03.5
01BF:  BCF    08.0
....................    delay_cycles(1); 
01C0:  NOP
....................    lcd_output_enable(1); 
01C1:  BSF    08.0
....................    delay_us(1); 
01C2:  NOP
....................    low = lcd_read_nibble(); 
01C3:  CALL   1A4
01C4:  MOVF   78,W
01C5:  BSF    03.5
01C6:  MOVWF  53
....................        
....................    lcd_output_enable(0); 
01C7:  BCF    03.5
01C8:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01C9:  MOVLW  0F
01CA:  BSF    03.5
01CB:  ANDWF  08,W
01CC:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
01CD:  SWAPF  54,W
01CE:  MOVWF  77
01CF:  MOVLW  F0
01D0:  ANDWF  77,F
01D1:  MOVF   77,W
01D2:  IORWF  53,W
01D3:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
01A4:  MOVF   08,W
01A5:  MOVWF  77
01A6:  SWAPF  08,W
01A7:  ANDLW  0F
01A8:  MOVWF  78
....................   #endif 
01A9:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0196:  BSF    03.5
0197:  SWAPF  54,W
0198:  ANDLW  F0
0199:  MOVWF  77
019A:  MOVLW  0F
019B:  BCF    03.5
019C:  ANDWF  08,W
019D:  IORWF  77,W
019E:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
019F:  NOP
....................    lcd_output_enable(1); 
01A0:  BSF    08.0
....................    delay_us(2); 
01A1:  GOTO   1A2
....................    lcd_output_enable(0); 
01A2:  BCF    08.0
01A3:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
01AA:  BSF    03.5
01AB:  BCF    08.0
....................    lcd_rs_tris(); 
01AC:  BCF    08.1
....................    lcd_rw_tris(); 
01AD:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
01AE:  BCF    03.5
01AF:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
01D4:  MOVF   78,W
01D5:  MOVWF  53
01D6:  BTFSS  53.7
01D7:  GOTO   1DA
01D8:  BCF    03.5
01D9:  GOTO   1B0
....................    lcd_output_rs(address); 
01DA:  BTFSC  51.0
01DB:  GOTO   1DF
01DC:  BCF    03.5
01DD:  BCF    08.1
01DE:  BSF    03.5
01DF:  BTFSS  51.0
01E0:  GOTO   1E4
01E1:  BCF    03.5
01E2:  BSF    08.1
01E3:  BSF    03.5
....................    delay_cycles(1); 
01E4:  NOP
....................    lcd_output_rw(0); 
01E5:  BCF    03.5
01E6:  BCF    08.2
....................    delay_cycles(1); 
01E7:  NOP
....................    lcd_output_enable(0); 
01E8:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
01E9:  BSF    03.5
01EA:  SWAPF  52,W
01EB:  MOVWF  53
01EC:  MOVLW  0F
01ED:  ANDWF  53,F
01EE:  MOVF   53,W
01EF:  MOVWF  54
01F0:  BCF    03.5
01F1:  CALL   196
....................    lcd_send_nibble(n & 0xf); 
01F2:  BSF    03.5
01F3:  MOVF   52,W
01F4:  ANDLW  0F
01F5:  MOVWF  53
01F6:  MOVWF  54
01F7:  BCF    03.5
01F8:  CALL   196
01F9:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01FA:  MOVLW  28
01FB:  BSF    03.5
01FC:  MOVWF  42
01FD:  MOVLW  0C
01FE:  MOVWF  43
01FF:  MOVLW  01
0200:  MOVWF  44
0201:  MOVLW  06
0202:  MOVWF  45
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0203:  BCF    03.5
0204:  BCF    08.0
....................    lcd_output_rs(0); 
0205:  BCF    08.1
....................    lcd_output_rw(0); 
0206:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0207:  MOVLW  0F
0208:  BSF    03.5
0209:  ANDWF  08,W
020A:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
020B:  BCF    08.0
....................    lcd_rs_tris(); 
020C:  BCF    08.1
....................    lcd_rw_tris(); 
020D:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
020E:  MOVLW  0F
020F:  MOVWF  4D
0210:  BCF    03.5
0211:  CALL   181
....................    for(i=1;i<=3;++i) 
0212:  MOVLW  01
0213:  BSF    03.5
0214:  MOVWF  41
0215:  MOVF   41,W
0216:  SUBLW  03
0217:  BTFSS  03.0
0218:  GOTO   225
....................    { 
....................        lcd_send_nibble(3); 
0219:  MOVLW  03
021A:  MOVWF  54
021B:  BCF    03.5
021C:  CALL   196
....................        delay_ms(5); 
021D:  MOVLW  05
021E:  BSF    03.5
021F:  MOVWF  4D
0220:  BCF    03.5
0221:  CALL   181
0222:  BSF    03.5
0223:  INCF   41,F
0224:  GOTO   215
....................    } 
....................     
....................    lcd_send_nibble(2); 
0225:  MOVLW  02
0226:  MOVWF  54
0227:  BCF    03.5
0228:  CALL   196
....................    delay_ms(5); 
0229:  MOVLW  05
022A:  BSF    03.5
022B:  MOVWF  4D
022C:  BCF    03.5
022D:  CALL   181
....................    for(i=0;i<=3;++i) 
022E:  BSF    03.5
022F:  CLRF   41
0230:  MOVF   41,W
0231:  SUBLW  03
0232:  BTFSS  03.0
0233:  GOTO   242
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0234:  MOVLW  C2
0235:  ADDWF  41,W
0236:  MOVWF  04
0237:  BCF    03.7
0238:  MOVF   00,W
0239:  MOVWF  46
023A:  CLRF   51
023B:  MOVF   46,W
023C:  MOVWF  52
023D:  BCF    03.5
023E:  CALL   1AA
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
023F:  BSF    03.5
0240:  INCF   41,F
0241:  GOTO   230
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0275:  BSF    03.5
0276:  DECFSZ 4E,W
0277:  GOTO   279
0278:  GOTO   27C
....................       address=LCD_LINE_TWO; 
0279:  MOVLW  40
027A:  MOVWF  4F
027B:  GOTO   27D
....................    else 
....................       address=0; 
027C:  CLRF   4F
....................       
....................    address+=x-1; 
027D:  MOVLW  01
027E:  SUBWF  4D,W
027F:  ADDWF  4F,F
....................    lcd_send_byte(0,0x80|address); 
0280:  MOVF   4F,W
0281:  IORLW  80
0282:  MOVWF  50
0283:  CLRF   51
0284:  MOVF   50,W
0285:  MOVWF  52
0286:  BCF    03.5
0287:  CALL   1AA
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0288:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0289:  BSF    03.5
028A:  MOVF   4C,W
028B:  XORLW  07
028C:  BCF    03.5
028D:  BTFSC  03.2
028E:  GOTO   299
028F:  XORLW  0B
0290:  BTFSC  03.2
0291:  GOTO   2A0
0292:  XORLW  06
0293:  BTFSC  03.2
0294:  GOTO   2AC
0295:  XORLW  02
0296:  BTFSC  03.2
0297:  GOTO   2B4
0298:  GOTO   2BB
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0299:  MOVLW  01
029A:  BSF    03.5
029B:  MOVWF  4D
029C:  MOVWF  4E
029D:  BCF    03.5
029E:  CALL   275
029F:  GOTO   2C2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02A0:  BSF    03.5
02A1:  CLRF   51
02A2:  MOVLW  01
02A3:  MOVWF  52
02A4:  BCF    03.5
02A5:  CALL   1AA
....................                      delay_ms(2); 
02A6:  MOVLW  02
02A7:  BSF    03.5
02A8:  MOVWF  4D
02A9:  BCF    03.5
02AA:  CALL   181
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02AB:  GOTO   2C2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02AC:  MOVLW  01
02AD:  BSF    03.5
02AE:  MOVWF  4D
02AF:  MOVLW  02
02B0:  MOVWF  4E
02B1:  BCF    03.5
02B2:  CALL   275
02B3:  GOTO   2C2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02B4:  BSF    03.5
02B5:  CLRF   51
02B6:  MOVLW  10
02B7:  MOVWF  52
02B8:  BCF    03.5
02B9:  CALL   1AA
02BA:  GOTO   2C2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02BB:  MOVLW  01
02BC:  BSF    03.5
02BD:  MOVWF  51
02BE:  MOVF   4C,W
02BF:  MOVWF  52
02C0:  BCF    03.5
02C1:  CALL   1AA
....................      #endif 
....................    } 
02C2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <math.h>        
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................                                  
.................... /*******************************************************************************************************************/   
.................... /*                                                  SYSTEM FUSES                                                  */   
.................... /*******************************************************************************************************************/   
....................                                        
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                 SYSTEM REGISTER                                                */   
.................... /*******************************************************************************************************************/   
....................  
.................... #byte my_TIM0_OPTION_REG = 0x81  //Config register 
.................... #byte my_TIM0_MODULE_REG = 0x01  //8 bit timer value storage register 
.................... #byte my_INTCON_REG      = 0x0B  //General purpose interrupt register 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                 SYSTEM STRUCTS                                                 */   
.................... /*******************************************************************************************************************/   
....................  
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;  //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                               SYSTEM VARIABLES                                                */   
.................... /*******************************************************************************************************************/   
....................  
....................  
.................... //------------ VAR --> CRITICAL PART <-- VAR ------------// 
.................... char readed_ID;            //Coming data will be When came from slave PIC 
.................... int8 systemLock;           //If the ID is valid, system open. Otherwise it will remain locked 
.................... int8 OPS_Status;           //55 means ops will be canceled, otherwise ops will be going on 
.................... char SelectionState;       //Put 'X' if button_Select is HIGH, put empty character if button_RemoveSelect is HIGH 
.................... int8 LockingMechanism = 1; //Will protect the system against repetitive or incorrect operations 
....................  
.................... //------------ VAR --> Keeps Clients <-- VAR ------------// 
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;                            // Will be used as given on the right --> MikroClient[ClientNumber]                                         
....................  
.................... //------------ VAR --> POTENTIOMETERS <-- VAR ------------// 
.................... int Index_OptionMenu; 
.................... int Index_TimeMoneyPreference; 
.................... int Index_PolishMililitre; 
.................... int Index_PastProcesses; 
.................... unsigned long int val_ADC_Pot_Surf; 
.................... unsigned long int val_ADC_Pot_Timer; 
.................... unsigned long int val_ADC_Pot_Polish; 
.................... unsigned long int val_ADC_Pot_PastProcesses; 
....................  
.................... //------------ VAR --> TIMER & ARRAYS <-- VAR ------------// 
.................... unsigned long int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};//Seconds 
*
0C03:  MOVLW  14
0C04:  BCF    03.6
0C05:  MOVWF  4D
0C06:  CLRF   4E
0C07:  MOVLW  28
0C08:  MOVWF  4F
0C09:  CLRF   50
0C0A:  MOVLW  3C
0C0B:  MOVWF  51
0C0C:  CLRF   52
0C0D:  MOVLW  50
0C0E:  MOVWF  53
0C0F:  CLRF   54
0C10:  MOVLW  64
0C11:  MOVWF  55
0C12:  CLRF   56
0C13:  MOVLW  78
0C14:  MOVWF  57
0C15:  CLRF   58
0C16:  MOVLW  8C
0C17:  MOVWF  59
0C18:  CLRF   5A
0C19:  MOVLW  A0
0C1A:  MOVWF  5B
0C1B:  CLRF   5C
0C1C:  MOVLW  B4
0C1D:  MOVWF  5D
0C1E:  CLRF   5E
0C1F:  MOVLW  C8
0C20:  MOVWF  5F
0C21:  CLRF   60
0C22:  MOVLW  DC
0C23:  MOVWF  61
0C24:  CLRF   62
0C25:  MOVLW  F0
0C26:  MOVWF  63
0C27:  CLRF   64
.................... unsigned long int timer0_isr_counter=0; 
.................... unsigned long int desired_value=0.0; 
.................... unsigned long int mililitrePolish[5] = {1,2,3,4,5}; // 1x100ml , 2x100ml, ... 5x100ml 
0C28:  MOVLW  01
0C29:  MOVWF  69
0C2A:  CLRF   6A
0C2B:  MOVLW  02
0C2C:  MOVWF  6B
0C2D:  CLRF   6C
0C2E:  MOVLW  03
0C2F:  MOVWF  6D
0C30:  CLRF   6E
0C31:  MOVLW  04
0C32:  MOVWF  6F
0C33:  CLRF   70
0C34:  MOVLW  05
0C35:  MOVWF  71
0C36:  CLRF   72
....................  
.................... //------------ VAR --> 7-SEGMENT DISPLAY NUMBERS <-- VAR ------------// 
.................... int8 segmentTable[16] = {  
....................     0x7E, 0x0C, 0xB6, 0x9E, 0xCC, //==> 0,1,2,3,4 
....................     0xDA, 0xFA, 0x0E, 0xFE, 0xDE  //==> 5,6,7,8,9 
.................... }; 
0C37:  MOVLW  7E
0C38:  BSF    03.5
0C39:  MOVWF  20
0C3A:  MOVLW  0C
0C3B:  MOVWF  21
0C3C:  MOVLW  B6
0C3D:  MOVWF  22
0C3E:  MOVLW  9E
0C3F:  MOVWF  23
0C40:  MOVLW  CC
0C41:  MOVWF  24
0C42:  MOVLW  DA
0C43:  MOVWF  25
0C44:  MOVLW  FA
0C45:  MOVWF  26
0C46:  MOVLW  0E
0C47:  MOVWF  27
0C48:  MOVLW  FE
0C49:  MOVWF  28
0C4A:  MOVLW  DE
0C4B:  MOVWF  29
0C4C:  CLRF   2A
0C4D:  CLRF   2B
0C4E:  CLRF   2C
0C4F:  CLRF   2D
0C50:  CLRF   2E
0C51:  CLRF   2F
....................  
.................... //Split the current time value into digits. 
.................... int8 number_unitDigit=0; 
.................... int8 number_tensDigit=0; 
.................... int8 number_hundredDigit =0; 
....................  
.................... unsigned long int CurrentTime;     // Current countdown value 
....................  
.................... int8 counter_StartOpsButtonTick=0;  /* 
....................                                      * If the value is 1, start the foaming process. 
....................                                      * If the value is 2, start the washing process. 
....................                                      * If the value is 3, start the ventilation process. 
....................                                      * If the value is 4, start the polishing process. 
....................                                      */ 
.................... unsigned long SelectedTime;         //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
.................... unsigned long currentPolishAmount; 
.................... int8 allProcessComplate_flag=0;    /**  
....................                                      * allProcessComplete_flag tracks the completion status of all processes, including polishing. 
....................                                      * 0: Processes are still ongoing. 
....................                                      * 1: All processes are complete. 
....................                                      */ 
....................                                       
.................... //------------ VAR --> INTERNAL EEPROM <-- VAR ------------// 
.................... //EEPROM variables to store the values selected by the user 
.................... // Variables for storing "written" values 
.................... unsigned int8 eeprom_foaming_written_cost     = 0; 
.................... unsigned int8 eeprom_washing_written_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_written_cost = 0; 
.................... unsigned int8 eeprom_polishing_written_cost   = 0; 
....................  
.................... // Variables for storing "read" values 
.................... unsigned int8 eeprom_foaming_read_cost     = 0; 
.................... unsigned int8 eeprom_washing_read_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_read_cost = 0; 
.................... unsigned int8 eeprom_polishing_read_cost   = 0; 
....................  
.................... //Keeps track of the last written address in EEPROM for each customer 
.................... unsigned int8 Client0_last_address=0; //For Selçuk Bey's account 
.................... unsigned int8 Client1_last_address=0; //For Emre Bey's account 
....................  
.................... //hangi iþlem üzerinde duruyorsak onun numarasý iþlem-1, iþlem-2 ==> 1 ve 2 bunlarýn numarasý oluyor,  
.................... unsigned int8 IndexOfReadMemory=2;  //en az 1 olabilir                                      
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                               SYSTEM DEFINITIONS                                              */   
.................... /*******************************************************************************************************************/   
....................  
.................... /* ======== SYSTEM INPUT & OUTPUT ======== */ 
.................... //-IO--INPUT---->LCD Screen Control Section  
.................... #define button_NEXT           pin_A3   //Proceed to the next operation. 
.................... #define button_BACK           pin_A4   //Go back to the previous operation. 
.................... #define button_Select         pin_A5   //Select the desired option. 
.................... #define button_RemoveSelect   pin_C0   //Remove the option I canceled. 
....................  
.................... #define button_OPS_START      pin_C1   /* button_OPS_START :  
....................                                         * This button performs the following functions: 
....................                                         * - Starts the foaming, washing, ventilation, and polishing processes. 
....................                                         * - Triggers the countdown for foaming, washing, and ventilation. 
....................                                         * - Loads percentage progress into the system for polishing. 
....................                                         */ 
....................                                          
.................... #define button_OPS_CANCEL      pin_B0   //Cancel all operations and close the system for the user. 
.................... #define button_DrainPolishing  pin_C2   //It adds polish to the container while the button is pressed 
....................  
....................  
.................... //-IO--OUTPUT---->7-Segment Display Scanning Section 
.................... #define pin_HundredDigit_switch pin_E2 
.................... #define pin_TensDigit_switch    pin_E0  
.................... #define pin_UnitDigit_switch    pin_E1  
....................  
.................... //-MEMORY------> Internal EEPROM memory client base addresses 
.................... //They will share the EEPROM memory evenly 
.................... #define eeprom_Client0_systemStartAddress 0 
.................... #define eeprom_Client1_systemStartAddress 130 
....................  
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                               FUNCTIONS PROTOTYPES                                            */   
.................... /*******************************************************************************************************************/   
.................... /* ======== SYSTEM CONFIGURATION FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_Init(void); 
.................... void trisSetting_Init(void); 
.................... void displaySetting_Init(void); 
.................... void interruptSetting_Init(void); 
.................... void adcSetting_Init(void); 
....................  
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_lcd_IdleStatus(void); 
.................... void NavigateOperationMenu(void); 
.................... void NavigateTimeMoneyPreferenceMenu(void); 
.................... void NavigatePolishingMenu(void); 
.................... void DisplayRecordsSequentiallyOnLCD(void); 
.................... void NavigatePastProcessesMenu(void); 
....................  
.................... /* ======== UART SERIAL COM. FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_uart_CheckTheMessage(void); 
....................  
.................... /* ======== 7-SEGMENT DISPLAY FUNCTIONS PROTOTYPES  ======== */ 
.................... void sequentialDisplayScan(void); 
.................... void loadZeroValue_2_DisplaySegment(void); 
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                  SYSTEM MACROS                                                 */   
.................... /*******************************************************************************************************************/   
....................  
.................... /* ======== -BEGIN- SYSTEM POTENTIOMETER INDEXER -BEGIN- ======== */ 
.................... #define ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf)        \ 
....................    do{                                        \ 
....................           Index_OptionMenu = ((val_ADC_Pot_Surf*5)/1020);  \ 
....................           if(Index_OptionMenu >= 5){                       \ 
....................             Index_OptionMenu = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer)              \ 
....................    do{                                                                \ 
....................           Index_TimeMoneyPreference = ((val_ADC_Pot_Timer*12)/1020);  \ 
....................           if(Index_TimeMoneyPreference >= 12){                        \ 
....................              Index_TimeMoneyPreference = 11;                          \ 
....................           }                                                           \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofPolish(val_ADC_Pot_Polish)                  \ 
....................    do{                                                            \ 
....................           Index_PolishMililitre = ((val_ADC_Pot_Polish*5)/1020);  \ 
....................           if(Index_PolishMililitre >= 5){                         \ 
....................             Index_PolishMililitre = 4;                            \ 
....................           }                                                       \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofPastProcesses(val_ADC_Pot_PastProcesses)         \ 
....................    do{                                                                 \ 
....................           Index_PastProcesses = ((val_ADC_Pot_PastProcesses*5)/1020);  \ 
....................           if(Index_PastProcesses >= 5){                                \ 
....................             Index_PastProcesses = 4;                                   \ 
....................           }                                                            \ 
....................    }while(0) 
....................     
.................... /* ======== -END- SYSTEM POTENTIOMETER INDEXER -END- ======== */    
....................  
.................... /* ======== -BEGIN- SYSTEM TIMER TIME CONFIG -BEGIN- ======== */ 
.................... //--> Timer Desired Value Calculator  
.................... #define TimerScalingFactor ((1000.0) / 64.0) 
.................... #define SECOND_TO_ISR_COUNT(SelectedTime)                     \ 
....................    do{                                                        \ 
....................          desired_value = (SelectedTime * TimerScalingFactor); \ 
....................    }while(0) 
....................  
.................... /* ======== -END- SYSTEM TIMER TIME CONFIG -END- ======== */ 
....................  
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                               SYSTEM INTERRUPTS                                               */   
.................... /*******************************************************************************************************************/   
....................  
.................... /* ======== -BEGIN- EXTERNAL INTERRUPT -BEGIN- ======== */ 
.................... #int_EXT 
.................... void system_isr_OperationCANCEL(){ 
....................   OPS_Status = 55;       //That's a password to break do-while's loops 
*
0056:  MOVLW  37
0057:  MOVWF  2D
....................   my_INTCON_REG &= 0XFD; //Clear External Interrupt Flag bit  
0058:  BCF    0B.1
.................... } 
.................... /* ======== -END- EXTERNAL INTERRUPT -END- ======== */ 
....................  
.................... /* ======== -BEGIN- TIMER_0 INTERRUPT -BEGIN- ======== */ 
0059:  BCF    0B.1
005A:  BCF    0A.3
005B:  BCF    0A.4
005C:  GOTO   02F
.................... #INT_TIMER0 
.................... void systemTimer0_isr(){ 
....................  
....................    timer0_isr_counter++; 
005D:  INCF   65,F
005E:  BTFSC  03.2
005F:  INCF   66,F
....................     
.................... /* 
....................  * e.g., 20 seconds is equal to 20000 milliseconds. 
....................  * We divide by 64 because Timer 0 generates an interrupt every 64 milliseconds. 
....................  * (20000 milliseconds / 64 milliseconds) = 312.5 
....................  * This gives the desired value for the timing calculation. 
....................  */ 
....................    if(timer0_isr_counter == desired_value){ 
0060:  MOVF   67,W
0061:  SUBWF  65,W
0062:  BTFSS  03.2
0063:  GOTO   06B
0064:  MOVF   68,W
0065:  SUBWF  66,W
0066:  BTFSS  03.2
0067:  GOTO   06B
....................     
....................       //CurrentTime=0; 
....................       timer0_isr_counter=0;   
0068:  CLRF   66
0069:  CLRF   65
....................       //Disable Timer0 Interrupt 
....................       my_INTCON_REG &= 0xDF; 
006A:  BCF    0B.5
....................        
....................    } 
....................     
....................     
....................    //If 1 second has passed 
....................    if((timer0_isr_counter%16) == 0){ 
006B:  MOVF   65,W
006C:  ANDLW  0F
006D:  BSF    03.5
006E:  MOVWF  56
006F:  CLRF   57
0070:  MOVF   56,F
0071:  BTFSS  03.2
0072:  GOTO   085
0073:  MOVF   57,F
0074:  BTFSS  03.2
0075:  GOTO   085
....................     
....................       //Decrease the current time value by one. 
....................       CurrentTime-=1; 
0076:  MOVLW  01
0077:  SUBWF  7B,F
0078:  MOVLW  00
0079:  BTFSS  03.0
007A:  MOVLW  01
007B:  SUBWF  7C,F
....................            
....................          if(CurrentTime==0){      
007C:  MOVF   7B,F
007D:  BTFSS  03.2
007E:  GOTO   085
007F:  MOVF   7C,F
0080:  BTFSS  03.2
0081:  GOTO   085
....................             //Disable Timer0 Interrupt 
....................             my_INTCON_REG &= 0xDF;      
0082:  BCF    03.5
0083:  BCF    0B.5
0084:  BSF    03.5
....................          } 
....................    } 
....................     
....................    // Clear timer0 overflow interrupt flag 
....................    my_INTCON_REG &= 0xFB;  
0085:  BCF    03.5
0086:  BCF    0B.2
....................     
0087:  BCF    0B.2
0088:  BCF    0A.3
0089:  BCF    0A.4
008A:  GOTO   02F
.................... } 
.................... /* ======== -END- TIMER_0 INTERRUPT -END- ======== */ 
....................  
....................  
....................  
.................... /********************************************************************************************************************/ 
.................... /*                                MAIN CODE & SEQUENTIAL STEPS OF THE OPERATION                                     */ 
.................... /********************************************************************************************************************/ 
.................... void main(void)  
*
0BCA:  MOVF   03,W
0BCB:  ANDLW  1F
0BCC:  MOVWF  03
0BCD:  BSF    03.5
0BCE:  BSF    03.6
0BCF:  BCF    07.3
0BD0:  MOVLW  19
0BD1:  BCF    03.6
0BD2:  MOVWF  19
0BD3:  MOVLW  A6
0BD4:  MOVWF  18
0BD5:  MOVLW  90
0BD6:  BCF    03.5
0BD7:  MOVWF  18
0BD8:  MOVLW  01
0BD9:  MOVWF  2F
0BDA:  CLRF   66
0BDB:  CLRF   65
0BDC:  CLRF   68
0BDD:  CLRF   67
0BDE:  CLRF   73
0BDF:  CLRF   74
0BE0:  CLRF   75
0BE1:  CLRF   76
0BE2:  BSF    03.5
0BE3:  CLRF   32
0BE4:  CLRF   33
0BE5:  CLRF   34
0BE6:  CLRF   35
0BE7:  CLRF   36
0BE8:  CLRF   37
0BE9:  CLRF   38
0BEA:  CLRF   39
0BEB:  CLRF   3A
0BEC:  CLRF   3B
0BED:  CLRF   3C
0BEE:  MOVLW  02
0BEF:  MOVWF  3D
0BF0:  CLRF   3F
0BF1:  CLRF   3E
0BF2:  MOVLW  FF
0BF3:  MOVWF  40
0BF4:  BSF    03.6
0BF5:  MOVF   09,W
0BF6:  ANDLW  C0
0BF7:  MOVWF  09
0BF8:  BCF    03.6
0BF9:  BCF    1F.4
0BFA:  BCF    1F.5
0BFB:  MOVLW  00
0BFC:  BSF    03.6
0BFD:  MOVWF  08
0BFE:  BCF    03.5
0BFF:  CLRF   07
0C00:  CLRF   08
0C01:  CLRF   09
0C02:  BCF    03.7
.................... { 
....................    
....................    //System parameters and peripherals will be initialized 
....................    SubSystem_Init(); 
*
0C52:  BCF    0A.3
0C53:  BCF    03.5
0C54:  GOTO   1FA
0C55:  BSF    0A.3
....................        
....................    //Wait until unlock the system 
....................    do{ 
....................            SubSystem_lcd_IdleStatus();   //Greeting the customer 
0C56:  BCF    0A.3
0C57:  GOTO   337
0C58:  BSF    0A.3
....................             
....................            if(kbhit()) 
0C59:  BTFSS  0C.5
0C5A:  GOTO   462
....................            { 
....................               readed_ID = getc(); 
0C5B:  BTFSS  0C.5
0C5C:  GOTO   45B
0C5D:  MOVF   1A,W
0C5E:  MOVWF  2B
....................               SubSystem_uart_CheckTheMessage(); 
0C5F:  BCF    0A.3
0C60:  GOTO   392
0C61:  BSF    0A.3
....................            }       
....................          
....................     }while(systemLock!=1); 
0C62:  DECFSZ 2C,W
0C63:  GOTO   456
....................   
....................     delay_ms(1000); 
0C64:  MOVLW  04
0C65:  BSF    03.5
0C66:  MOVWF  41
0C67:  MOVLW  FA
0C68:  MOVWF  4D
0C69:  BCF    0A.3
0C6A:  BCF    03.5
0C6B:  CALL   181
0C6C:  BSF    0A.3
0C6D:  BSF    03.5
0C6E:  DECFSZ 41,F
0C6F:  GOTO   467
....................      
....................      
....................      
....................      
....................    
.................... /** 
....................  * @brief Program navigates through option menus using a potentiometer and buttons. 
....................  *  
....................  * Reads potentiometer values to select options or adjust parameters like time and cost. 
....................  * The "NEXT" button moves forward or confirms selection, while the "BACK" button allows returning or resetting. 
....................  * Specific sub-menus handle time/money preferences and polishing settings, with double-clicks for confirmation  
....................  * and single clicks for resetting choices. 
....................  */ 
....................  
....................  
.................... /*-----------------------------------------------------------------------------------------------------------------*/   
.................... /*                       >>> BEGIN - SEQUENTIAL STEPS OF THE OPERATION - BEGIN <<<                                 */   
.................... /*-----------------------------------------------------------------------------------------------------------------*/   
....................    
....................  
....................       do{ 
....................              //Start Of Conversation for ADC_Surf 
....................              set_adc_channel(0); 
0C70:  MOVLW  00
0C71:  MOVWF  78
0C72:  BCF    03.5
0C73:  MOVF   1F,W
0C74:  ANDLW  C3
0C75:  IORWF  78,W
0C76:  MOVWF  1F
....................              //Provide sufficient acquisition time. 
....................              delay_us(20); 
0C77:  MOVLW  06
0C78:  MOVWF  77
0C79:  DECFSZ 77,F
0C7A:  GOTO   479
0C7B:  NOP
....................               
....................              //Get Surf_Pot ADC value(0-1024) 
....................              val_ADC_Pot_Surf = read_adc();   
0C7C:  BSF    1F.1
0C7D:  BTFSC  1F.1
0C7E:  GOTO   47D
0C7F:  BSF    03.5
0C80:  MOVF   1E,W
0C81:  BCF    03.5
0C82:  MOVWF  45
0C83:  MOVF   1E,W
0C84:  MOVWF  46
....................               
....................              //Convert Surf_Pot ADC value into the option menu index 
....................              ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf); 
0C85:  MOVF   46,W
0C86:  BSF    03.5
0C87:  MOVWF  46
0C88:  BCF    03.5
0C89:  MOVF   45,W
0C8A:  BSF    03.5
0C8B:  MOVWF  45
0C8C:  CLRF   48
0C8D:  MOVLW  05
0C8E:  MOVWF  47
0C8F:  BCF    0A.3
0C90:  BCF    03.5
0C91:  CALL   3E2
0C92:  BSF    0A.3
0C93:  MOVF   79,W
0C94:  BSF    03.5
0C95:  MOVWF  42
0C96:  MOVF   78,W
0C97:  MOVWF  41
0C98:  MOVF   42,W
0C99:  MOVWF  44
0C9A:  MOVF   41,W
0C9B:  MOVWF  43
0C9C:  MOVLW  03
0C9D:  MOVWF  46
0C9E:  MOVLW  FC
0C9F:  MOVWF  45
0CA0:  BCF    0A.3
0CA1:  BCF    03.5
0CA2:  CALL   3F9
0CA3:  BSF    0A.3
0CA4:  MOVF   78,W
0CA5:  MOVWF  41
0CA6:  SUBLW  04
0CA7:  BTFSC  03.0
0CA8:  GOTO   4AB
0CA9:  MOVLW  04
0CAA:  MOVWF  41
....................              
....................              //Use index value to show selected option and other one 
....................              NavigateOperationMenu(); 
0CAB:  BCF    0A.3
0CAC:  GOTO   420
0CAD:  BSF    0A.3
....................               
....................              //Clear selection 
....................              SelectionState = ' '; 
0CAE:  MOVLW  20
0CAF:  MOVWF  2E
....................               
....................                 //The client wants to see the next section based on the selected option 
....................                 //Selections will be made for foaming, washing, and ventilation processes in this section 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu <= 2)) 
0CB0:  BSF    03.5
0CB1:  BSF    05.3
0CB2:  BCF    03.5
0CB3:  BTFSS  05.3
0CB4:  GOTO   4FF
0CB5:  MOVF   41,W
0CB6:  SUBLW  02
0CB7:  BTFSS  03.0
0CB8:  GOTO   4FF
....................                 { 
....................        
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
0CB9:  MOVLW  04
0CBA:  MOVWF  78
0CBB:  MOVF   1F,W
0CBC:  ANDLW  C3
0CBD:  IORWF  78,W
0CBE:  MOVWF  1F
....................                               //Provide sufficient acquisition time. 
....................                               delay_us(20); 
0CBF:  MOVLW  06
0CC0:  MOVWF  77
0CC1:  DECFSZ 77,F
0CC2:  GOTO   4C1
0CC3:  NOP
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_Timer = read_adc();  
0CC4:  BSF    1F.1
0CC5:  BTFSC  1F.1
0CC6:  GOTO   4C5
0CC7:  BSF    03.5
0CC8:  MOVF   1E,W
0CC9:  BCF    03.5
0CCA:  MOVWF  47
0CCB:  MOVF   1E,W
0CCC:  MOVWF  48
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer); 
0CCD:  MOVF   48,W
0CCE:  BSF    03.5
0CCF:  MOVWF  46
0CD0:  BCF    03.5
0CD1:  MOVF   47,W
0CD2:  BSF    03.5
0CD3:  MOVWF  45
0CD4:  CLRF   48
0CD5:  MOVLW  0C
0CD6:  MOVWF  47
0CD7:  BCF    0A.3
0CD8:  BCF    03.5
0CD9:  CALL   3E2
0CDA:  BSF    0A.3
0CDB:  MOVF   79,W
0CDC:  BSF    03.5
0CDD:  MOVWF  42
0CDE:  MOVF   78,W
0CDF:  MOVWF  41
0CE0:  MOVF   42,W
0CE1:  MOVWF  44
0CE2:  MOVF   41,W
0CE3:  MOVWF  43
0CE4:  MOVLW  03
0CE5:  MOVWF  46
0CE6:  MOVLW  FC
0CE7:  MOVWF  45
0CE8:  BCF    0A.3
0CE9:  BCF    03.5
0CEA:  CALL   3F9
0CEB:  BSF    0A.3
0CEC:  MOVF   78,W
0CED:  MOVWF  42
0CEE:  SUBLW  0B
0CEF:  BTFSC  03.0
0CF0:  GOTO   4F3
0CF1:  MOVLW  0B
0CF2:  MOVWF  42
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigateTimeMoneyPreferenceMenu(); 
0CF3:  BCF    0A.3
0CF4:  GOTO   5C7
0CF5:  BSF    0A.3
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
0CF6:  BSF    03.5
0CF7:  BSF    05.4
0CF8:  BCF    03.5
0CF9:  BTFSC  05.4
....................                                  break; 
0CFA:  GOTO   4FF
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
0CFB:  MOVF   2D,W
0CFC:  SUBLW  37
0CFD:  BTFSS  03.2
0CFE:  GOTO   4B9
....................                 } 
....................                  
....................                  
....................                 //In this section, only milliliter selection will be made for the polishing process 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu == 3)){ 
0CFF:  BSF    03.5
0D00:  BSF    05.3
0D01:  BCF    03.5
0D02:  BTFSS  05.3
0D03:  GOTO   547
0D04:  MOVF   41,W
0D05:  SUBLW  03
0D06:  BTFSS  03.2
0D07:  GOTO   547
....................     
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
0D08:  MOVLW  04
0D09:  MOVWF  78
0D0A:  MOVF   1F,W
0D0B:  ANDLW  C3
0D0C:  IORWF  78,W
0D0D:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_Polish = read_adc();  
0D0E:  BSF    1F.1
0D0F:  BTFSC  1F.1
0D10:  GOTO   50F
0D11:  BSF    03.5
0D12:  MOVF   1E,W
0D13:  BCF    03.5
0D14:  MOVWF  49
0D15:  MOVF   1E,W
0D16:  MOVWF  4A
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofPolish(val_ADC_Pot_Polish); 
0D17:  MOVF   4A,W
0D18:  BSF    03.5
0D19:  MOVWF  46
0D1A:  BCF    03.5
0D1B:  MOVF   49,W
0D1C:  BSF    03.5
0D1D:  MOVWF  45
0D1E:  CLRF   48
0D1F:  MOVLW  05
0D20:  MOVWF  47
0D21:  BCF    0A.3
0D22:  BCF    03.5
0D23:  CALL   3E2
0D24:  BSF    0A.3
0D25:  MOVF   79,W
0D26:  BSF    03.5
0D27:  MOVWF  42
0D28:  MOVF   78,W
0D29:  MOVWF  41
0D2A:  MOVF   42,W
0D2B:  MOVWF  44
0D2C:  MOVF   41,W
0D2D:  MOVWF  43
0D2E:  MOVLW  03
0D2F:  MOVWF  46
0D30:  MOVLW  FC
0D31:  MOVWF  45
0D32:  BCF    0A.3
0D33:  BCF    03.5
0D34:  CALL   3F9
0D35:  BSF    0A.3
0D36:  MOVF   78,W
0D37:  MOVWF  43
0D38:  SUBLW  04
0D39:  BTFSC  03.0
0D3A:  GOTO   53D
0D3B:  MOVLW  04
0D3C:  MOVWF  43
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigatePolishingMenu(); 
0D3D:  GOTO   000
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
0D3E:  BSF    03.5
0D3F:  BSF    05.4
0D40:  BCF    03.5
0D41:  BTFSC  05.4
....................                                  break; 
0D42:  GOTO   547
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
0D43:  MOVF   2D,W
0D44:  SUBLW  37
0D45:  BTFSS  03.2
0D46:  GOTO   508
....................                  
....................                 } 
....................                  
....................                 //In this section, the client can see all of his past processes 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu == 4)){ 
0D47:  BSF    03.5
0D48:  BSF    05.3
0D49:  BCF    03.5
0D4A:  BTFSS  05.3
0D4B:  GOTO   5D8
0D4C:  MOVF   41,W
0D4D:  SUBLW  04
0D4E:  BTFSS  03.2
0D4F:  GOTO   5D8
....................                  
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
0D50:  MOVLW  04
0D51:  MOVWF  78
0D52:  MOVF   1F,W
0D53:  ANDLW  C3
0D54:  IORWF  78,W
0D55:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_PastProcesses = read_adc();  
0D56:  BSF    1F.1
0D57:  BTFSC  1F.1
0D58:  GOTO   557
0D59:  BSF    03.5
0D5A:  MOVF   1E,W
0D5B:  BCF    03.5
0D5C:  MOVWF  4B
0D5D:  MOVF   1E,W
0D5E:  MOVWF  4C
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofPastProcesses(val_ADC_Pot_PastProcesses); 
0D5F:  MOVF   4C,W
0D60:  BSF    03.5
0D61:  MOVWF  46
0D62:  BCF    03.5
0D63:  MOVF   4B,W
0D64:  BSF    03.5
0D65:  MOVWF  45
0D66:  CLRF   48
0D67:  MOVLW  05
0D68:  MOVWF  47
0D69:  BCF    0A.3
0D6A:  BCF    03.5
0D6B:  CALL   3E2
0D6C:  BSF    0A.3
0D6D:  MOVF   79,W
0D6E:  BSF    03.5
0D6F:  MOVWF  42
0D70:  MOVF   78,W
0D71:  MOVWF  41
0D72:  MOVF   42,W
0D73:  MOVWF  44
0D74:  MOVF   41,W
0D75:  MOVWF  43
0D76:  MOVLW  03
0D77:  MOVWF  46
0D78:  MOVLW  FC
0D79:  MOVWF  45
0D7A:  BCF    0A.3
0D7B:  BCF    03.5
0D7C:  CALL   3F9
0D7D:  BSF    0A.3
0D7E:  MOVF   78,W
0D7F:  MOVWF  44
0D80:  SUBLW  04
0D81:  BTFSC  03.0
0D82:  GOTO   585
0D83:  MOVLW  04
0D84:  MOVWF  44
....................                                
....................                               //Use index value to show selected past processes 
....................                                NavigatePastProcessesMenu(); 
0D85:  GOTO   12E
....................                                delay_ms(250); 
0D86:  MOVLW  FA
0D87:  BSF    03.5
0D88:  MOVWF  4D
0D89:  BCF    0A.3
0D8A:  BCF    03.5
0D8B:  CALL   181
0D8C:  BSF    0A.3
....................                                      //Enter the selected past-procesess 
....................                                      if((input(button_NEXT) == 1)){       
0D8D:  BSF    03.5
0D8E:  BSF    05.3
0D8F:  BCF    03.5
0D90:  BTFSS  05.3
0D91:  GOTO   5CF
....................                                         printf(lcd_putc, "\f"); 
0D92:  MOVLW  0C
0D93:  BSF    03.5
0D94:  MOVWF  4C
0D95:  BCF    0A.3
0D96:  BCF    03.5
0D97:  CALL   289
0D98:  BSF    0A.3
....................                                          
....................                                        do{ 
....................                                           //Show me the selected past-processes cost detail                                      
....................                                             lcd_gotoxy(1, 1); 
0D99:  MOVLW  01
0D9A:  BSF    03.5
0D9B:  MOVWF  4D
0D9C:  MOVWF  4E
0D9D:  BCF    0A.3
0D9E:  BCF    03.5
0D9F:  CALL   275
0DA0:  BSF    0A.3
....................                                             printf(lcd_putc, "F:30TL  W:20TL"); 
0DA1:  MOVLW  8B
0DA2:  BSF    03.6
0DA3:  MOVWF  0D
0DA4:  MOVLW  00
0DA5:  MOVWF  0F
0DA6:  BCF    0A.3
0DA7:  BCF    03.6
0DA8:  CALL   2C3
0DA9:  BSF    0A.3
....................                                             lcd_gotoxy(1, 2); 
0DAA:  MOVLW  01
0DAB:  BSF    03.5
0DAC:  MOVWF  4D
0DAD:  MOVLW  02
0DAE:  MOVWF  4E
0DAF:  BCF    0A.3
0DB0:  BCF    03.5
0DB1:  CALL   275
0DB2:  BSF    0A.3
....................                                             printf(lcd_putc, "V:10TL  P:32TL");   
0DB3:  MOVLW  93
0DB4:  BSF    03.6
0DB5:  MOVWF  0D
0DB6:  MOVLW  00
0DB7:  MOVWF  0F
0DB8:  BCF    0A.3
0DB9:  BCF    03.6
0DBA:  CALL   2C3
0DBB:  BSF    0A.3
....................                                             delay_ms(20); 
0DBC:  MOVLW  14
0DBD:  BSF    03.5
0DBE:  MOVWF  4D
0DBF:  BCF    0A.3
0DC0:  BCF    03.5
0DC1:  CALL   181
0DC2:  BSF    0A.3
....................                                              
....................                                        }while(input(button_BACK) != 1); //Wait until press back button 
0DC3:  BSF    03.5
0DC4:  BSF    05.4
0DC5:  BCF    03.5
0DC6:  BTFSS  05.4
0DC7:  GOTO   599
....................                                       
....................                                      delay_ms(250); 
0DC8:  MOVLW  FA
0DC9:  BSF    03.5
0DCA:  MOVWF  4D
0DCB:  BCF    0A.3
0DCC:  BCF    03.5
0DCD:  CALL   181
0DCE:  BSF    0A.3
....................                                      } 
....................                                 
....................                                 
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
0DCF:  BSF    03.5
0DD0:  BSF    05.4
0DD1:  BCF    03.5
0DD2:  BTFSC  05.4
....................                                  break; 
0DD3:  GOTO   5D8
....................                               } 
....................                                
....................                          }while(OPS_Status!=55);  
0DD4:  MOVF   2D,W
0DD5:  SUBLW  37
0DD6:  BTFSS  03.2
0DD7:  GOTO   550
....................                 } 
....................                  
....................       /****************************************************************************************************/   
....................       /*         BEGIN- Foam, Washing, Ventilation, and Polishing Operations will be executed -BEGIN      */   
....................       /****************************************************************************************************/ 
....................   
....................                  
....................                 /* 
....................                  * In this section, a countdown will start for the selected times. 
....................                  * Each time the button_OPS_START is pressed, a new countdown for the process will begin. 
....................                 */ 
....................                 if(input(button_OPS_START) == 1){ 
0DD8:  BSF    03.5
0DD9:  BSF    40.1
0DDA:  MOVF   40,W
0DDB:  MOVWF  07
0DDC:  BCF    03.5
0DDD:  BTFSS  07.1
0DDE:  GOTO   75C
....................                  
....................                         printf(lcd_putc,"\f"); 
0DDF:  MOVLW  0C
0DE0:  BSF    03.5
0DE1:  MOVWF  4C
0DE2:  BCF    0A.3
0DE3:  BCF    03.5
0DE4:  CALL   289
0DE5:  BSF    0A.3
....................                         lcd_gotoxy(4,1); 
0DE6:  MOVLW  04
0DE7:  BSF    03.5
0DE8:  MOVWF  4D
0DE9:  MOVLW  01
0DEA:  MOVWF  4E
0DEB:  BCF    0A.3
0DEC:  BCF    03.5
0DED:  CALL   275
0DEE:  BSF    0A.3
....................                         printf(lcd_putc,"Operasyon"); 
0DEF:  MOVLW  9B
0DF0:  BSF    03.6
0DF1:  MOVWF  0D
0DF2:  MOVLW  00
0DF3:  MOVWF  0F
0DF4:  BCF    0A.3
0DF5:  BCF    03.6
0DF6:  CALL   2C3
0DF7:  BSF    0A.3
....................                         lcd_gotoxy(4,2); 
0DF8:  MOVLW  04
0DF9:  BSF    03.5
0DFA:  MOVWF  4D
0DFB:  MOVLW  02
0DFC:  MOVWF  4E
0DFD:  BCF    0A.3
0DFE:  BCF    03.5
0DFF:  CALL   275
0E00:  BSF    0A.3
....................                         printf(lcd_putc,"Baslatildi"); 
0E01:  MOVLW  A0
0E02:  BSF    03.6
0E03:  MOVWF  0D
0E04:  MOVLW  00
0E05:  MOVWF  0F
0E06:  BCF    0A.3
0E07:  BCF    03.6
0E08:  CALL   2C3
0E09:  BSF    0A.3
....................                          
....................                         //Wait 100 milliseconds to allow for button interference 
....................                         delay_ms(100);  
0E0A:  MOVLW  64
0E0B:  BSF    03.5
0E0C:  MOVWF  4D
0E0D:  BCF    0A.3
0E0E:  BCF    03.5
0E0F:  CALL   181
0E10:  BSF    0A.3
....................                          
....................                         //Increase the value by one, if clicked during each recheck 
....................                         counter_StartOpsButtonTick+=1; 
0E11:  MOVLW  01
0E12:  ADDWF  76,F
....................                         LockingMechanism = 1; 
0E13:  MOVWF  2F
....................                          
....................                         do{ 
....................                                
....................                               //Loads the foaming time 
....................                               if((counter_StartOpsButtonTick == 1) && (LockingMechanism == 1)){        
0E14:  DECFSZ 76,W
0E15:  GOTO   668
0E16:  DECFSZ 2F,W
0E17:  GOTO   668
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Foaming; 
0E18:  RLF    40,W
0E19:  MOVWF  77
0E1A:  RLF    77,F
0E1B:  RLF    77,F
0E1C:  MOVLW  F8
0E1D:  ANDWF  77,F
0E1E:  MOVF   77,W
0E1F:  ADDLW  30
0E20:  MOVWF  04
0E21:  BCF    03.7
0E22:  INCF   04,F
0E23:  MOVF   00,W
0E24:  MOVWF  7E
0E25:  DECF   04,F
0E26:  MOVF   00,W
0E27:  MOVWF  7D
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Foaming; 
0E28:  RLF    40,W
0E29:  MOVWF  77
0E2A:  RLF    77,F
0E2B:  RLF    77,F
0E2C:  MOVLW  F8
0E2D:  ANDWF  77,F
0E2E:  MOVF   77,W
0E2F:  ADDLW  30
0E30:  MOVWF  04
0E31:  BCF    03.7
0E32:  INCF   04,F
0E33:  MOVF   00,W
0E34:  MOVWF  7C
0E35:  DECF   04,F
0E36:  MOVF   00,W
0E37:  MOVWF  7B
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
0E38:  MOVF   7E,W
0E39:  BSF    03.5
0E3A:  MOVWF  42
0E3B:  MOVF   7D,W
0E3C:  MOVWF  41
0E3D:  BCF    0A.3
0E3E:  BCF    03.5
0E3F:  CALL   745
0E40:  BSF    0A.3
0E41:  MOVF   7A,W
0E42:  BSF    03.5
0E43:  MOVWF  44
0E44:  MOVF   79,W
0E45:  MOVWF  43
0E46:  MOVF   78,W
0E47:  MOVWF  42
0E48:  MOVF   77,W
0E49:  MOVWF  41
0E4A:  CLRF   48
0E4B:  CLRF   47
0E4C:  MOVLW  7A
0E4D:  MOVWF  46
0E4E:  MOVLW  82
0E4F:  MOVWF  45
0E50:  BCF    0A.3
0E51:  BCF    03.5
0E52:  CALL   764
0E53:  BSF    0A.3
0E54:  MOVF   7A,W
0E55:  BSF    03.5
0E56:  MOVWF  44
0E57:  MOVF   79,W
0E58:  MOVWF  43
0E59:  MOVF   78,W
0E5A:  MOVWF  42
0E5B:  MOVF   77,W
0E5C:  MOVWF  41
0E5D:  BCF    0A.3
0E5E:  BCF    03.5
0E5F:  CALL   7DB
0E60:  BSF    0A.3
0E61:  MOVF   79,W
0E62:  MOVWF  68
0E63:  MOVF   78,W
0E64:  MOVWF  67
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
0E65:  MOVLW  A0
0E66:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
0E67:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                                //Loads the washing time 
....................                               if((counter_StartOpsButtonTick == 2) && (LockingMechanism == 1)){        
0E68:  MOVF   76,W
0E69:  SUBLW  02
0E6A:  BTFSS  03.2
0E6B:  GOTO   6C0
0E6C:  DECFSZ 2F,W
0E6D:  GOTO   6C0
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Washing; 
0E6E:  RLF    40,W
0E6F:  MOVWF  77
0E70:  RLF    77,F
0E71:  RLF    77,F
0E72:  MOVLW  F8
0E73:  ANDWF  77,F
0E74:  MOVF   77,W
0E75:  ADDLW  02
0E76:  ADDLW  30
0E77:  MOVWF  04
0E78:  BCF    03.7
0E79:  INCF   04,F
0E7A:  MOVF   00,W
0E7B:  MOVWF  7E
0E7C:  DECF   04,F
0E7D:  MOVF   00,W
0E7E:  MOVWF  7D
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Washing; 
0E7F:  RLF    40,W
0E80:  MOVWF  77
0E81:  RLF    77,F
0E82:  RLF    77,F
0E83:  MOVLW  F8
0E84:  ANDWF  77,F
0E85:  MOVF   77,W
0E86:  ADDLW  02
0E87:  ADDLW  30
0E88:  MOVWF  04
0E89:  BCF    03.7
0E8A:  INCF   04,F
0E8B:  MOVF   00,W
0E8C:  MOVWF  7C
0E8D:  DECF   04,F
0E8E:  MOVF   00,W
0E8F:  MOVWF  7B
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
0E90:  MOVF   7E,W
0E91:  BSF    03.5
0E92:  MOVWF  42
0E93:  MOVF   7D,W
0E94:  MOVWF  41
0E95:  BCF    0A.3
0E96:  BCF    03.5
0E97:  CALL   745
0E98:  BSF    0A.3
0E99:  MOVF   7A,W
0E9A:  BSF    03.5
0E9B:  MOVWF  44
0E9C:  MOVF   79,W
0E9D:  MOVWF  43
0E9E:  MOVF   78,W
0E9F:  MOVWF  42
0EA0:  MOVF   77,W
0EA1:  MOVWF  41
0EA2:  CLRF   48
0EA3:  CLRF   47
0EA4:  MOVLW  7A
0EA5:  MOVWF  46
0EA6:  MOVLW  82
0EA7:  MOVWF  45
0EA8:  BCF    0A.3
0EA9:  BCF    03.5
0EAA:  CALL   764
0EAB:  BSF    0A.3
0EAC:  MOVF   7A,W
0EAD:  BSF    03.5
0EAE:  MOVWF  44
0EAF:  MOVF   79,W
0EB0:  MOVWF  43
0EB1:  MOVF   78,W
0EB2:  MOVWF  42
0EB3:  MOVF   77,W
0EB4:  MOVWF  41
0EB5:  BCF    0A.3
0EB6:  BCF    03.5
0EB7:  CALL   7DB
0EB8:  BSF    0A.3
0EB9:  MOVF   79,W
0EBA:  MOVWF  68
0EBB:  MOVF   78,W
0EBC:  MOVWF  67
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
0EBD:  MOVLW  A0
0EBE:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
0EBF:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                               //Loads the Ventilation time 
....................                               if((counter_StartOpsButtonTick == 3) && (LockingMechanism == 1)){        
0EC0:  MOVF   76,W
0EC1:  SUBLW  03
0EC2:  BTFSS  03.2
0EC3:  GOTO   718
0EC4:  DECFSZ 2F,W
0EC5:  GOTO   718
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Ventilation; 
0EC6:  RLF    40,W
0EC7:  MOVWF  77
0EC8:  RLF    77,F
0EC9:  RLF    77,F
0ECA:  MOVLW  F8
0ECB:  ANDWF  77,F
0ECC:  MOVF   77,W
0ECD:  ADDLW  04
0ECE:  ADDLW  30
0ECF:  MOVWF  04
0ED0:  BCF    03.7
0ED1:  INCF   04,F
0ED2:  MOVF   00,W
0ED3:  MOVWF  7E
0ED4:  DECF   04,F
0ED5:  MOVF   00,W
0ED6:  MOVWF  7D
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Ventilation; 
0ED7:  RLF    40,W
0ED8:  MOVWF  77
0ED9:  RLF    77,F
0EDA:  RLF    77,F
0EDB:  MOVLW  F8
0EDC:  ANDWF  77,F
0EDD:  MOVF   77,W
0EDE:  ADDLW  04
0EDF:  ADDLW  30
0EE0:  MOVWF  04
0EE1:  BCF    03.7
0EE2:  INCF   04,F
0EE3:  MOVF   00,W
0EE4:  MOVWF  7C
0EE5:  DECF   04,F
0EE6:  MOVF   00,W
0EE7:  MOVWF  7B
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
0EE8:  MOVF   7E,W
0EE9:  BSF    03.5
0EEA:  MOVWF  42
0EEB:  MOVF   7D,W
0EEC:  MOVWF  41
0EED:  BCF    0A.3
0EEE:  BCF    03.5
0EEF:  CALL   745
0EF0:  BSF    0A.3
0EF1:  MOVF   7A,W
0EF2:  BSF    03.5
0EF3:  MOVWF  44
0EF4:  MOVF   79,W
0EF5:  MOVWF  43
0EF6:  MOVF   78,W
0EF7:  MOVWF  42
0EF8:  MOVF   77,W
0EF9:  MOVWF  41
0EFA:  CLRF   48
0EFB:  CLRF   47
0EFC:  MOVLW  7A
0EFD:  MOVWF  46
0EFE:  MOVLW  82
0EFF:  MOVWF  45
0F00:  BCF    0A.3
0F01:  BCF    03.5
0F02:  CALL   764
0F03:  BSF    0A.3
0F04:  MOVF   7A,W
0F05:  BSF    03.5
0F06:  MOVWF  44
0F07:  MOVF   79,W
0F08:  MOVWF  43
0F09:  MOVF   78,W
0F0A:  MOVWF  42
0F0B:  MOVF   77,W
0F0C:  MOVWF  41
0F0D:  BCF    0A.3
0F0E:  BCF    03.5
0F0F:  CALL   7DB
0F10:  BSF    0A.3
0F11:  MOVF   79,W
0F12:  MOVWF  68
0F13:  MOVF   78,W
0F14:  MOVWF  67
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
0F15:  MOVLW  A0
0F16:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
0F17:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                               //Load the selected amount of polish 
....................                               if((counter_StartOpsButtonTick == 4) && (LockingMechanism == 1)){ 
0F18:  MOVF   76,W
0F19:  SUBLW  04
0F1A:  BTFSS  03.2
0F1B:  GOTO   740
0F1C:  DECFSZ 2F,W
0F1D:  GOTO   740
....................                                
....................                                     //The loop will exit when the polish is finished or if the process is canceled 
....................                                     do{ 
....................                                      
....................                                        if(input(button_DrainPolishing) == 1){ 
0F1E:  BSF    03.5
0F1F:  BSF    40.2
0F20:  MOVF   40,W
0F21:  MOVWF  07
0F22:  BCF    03.5
0F23:  BTFSS  07.2
0F24:  GOTO   732
....................                                           currentPolishAmount-=4; 
0F25:  MOVLW  04
0F26:  BSF    03.5
0F27:  SUBWF  30,F
0F28:  MOVLW  00
0F29:  BTFSS  03.0
0F2A:  MOVLW  01
0F2B:  SUBWF  31,F
....................                                           delay_ms(100); 
0F2C:  MOVLW  64
0F2D:  MOVWF  4D
0F2E:  BCF    0A.3
0F2F:  BCF    03.5
0F30:  CALL   181
0F31:  BSF    0A.3
....................                                           } 
....................                                            
....................                                           if(currentPolishAmount<0){ 
....................                                           currentPolishAmount=0; 
....................                                           } 
....................                                        //Display/scroll the CurrentTime value on the displays 
....................                                        sequentialDisplayScan(); 
0F32:  CALL   1ED
....................                                         
....................                                     }while(currentPolishAmount != 0); 
0F33:  BSF    03.5
0F34:  MOVF   30,F
0F35:  BTFSS  03.2
0F36:  GOTO   71F
0F37:  MOVF   31,F
0F38:  BTFSS  03.2
0F39:  GOTO   71F
....................                                         
....................                                     LockingMechanism=0; 
0F3A:  BCF    03.5
0F3B:  CLRF   2F
....................                                     allProcessComplate_flag = 1; 
0F3C:  MOVLW  01
0F3D:  BSF    03.5
0F3E:  MOVWF  32
0F3F:  BCF    03.5
....................                               } 
....................                                                      
....................                              //Display/scroll the CurrentTime value on the displays 
....................                              sequentialDisplayScan(); 
0F40:  CALL   1ED
....................                               
....................                               
....................                              /**  
....................                                * These conditions are used to break out of the loop for various reasons,  
....................                                * and will redirect the program back to the main menu. 
....................                                *  
....................                                * - If allProcessComplete_flag is 1, indicating all processes are finished, the loop will exit. 
....................                                * - If CurrentTime equals 1 and SelectedTime equals 60, the loop will also exit. 
....................                                */ 
....................                                 if(allProcessComplate_flag == 1){ 
0F41:  BSF    03.5
0F42:  DECFSZ 32,W
0F43:  GOTO   745
....................                                     break;     
0F44:  GOTO   75B
....................                                 }                                     
....................                                 if((CurrentTime==1) && (SelectedTime==60)){ 
0F45:  DECFSZ 7B,W
0F46:  GOTO   751
0F47:  MOVF   7C,F
0F48:  BTFSS  03.2
0F49:  GOTO   751
0F4A:  MOVF   7D,W
0F4B:  SUBLW  3C
0F4C:  BTFSS  03.2
0F4D:  GOTO   751
0F4E:  MOVF   7E,F
0F4F:  BTFSC  03.2
....................                                   break; 
0F50:  GOTO   75B
....................                                 } 
....................              
....................                         }while( (CurrentTime!=0) ); 
0F51:  MOVF   7B,F
0F52:  BTFSC  03.2
0F53:  GOTO   756
0F54:  BCF    03.5
0F55:  GOTO   614
0F56:  MOVF   7C,F
0F57:  BTFSC  03.2
0F58:  GOTO   75B
0F59:  BCF    03.5
0F5A:  GOTO   614
0F5B:  BCF    03.5
....................                          
....................                 } 
....................                             
....................       /****************************************************************************************************/   
....................       /*         END- Foam, Washing, Ventilation, and Polishing Operations will be executed -END      */   
....................       /****************************************************************************************************/   
....................        
....................        
....................                delay_ms(100); 
0F5C:  MOVLW  64
0F5D:  BSF    03.5
0F5E:  MOVWF  4D
0F5F:  BCF    0A.3
0F60:  BCF    03.5
0F61:  CALL   181
0F62:  BSF    0A.3
....................                 
....................             //Load the initial value(0) into the segments. 
....................             loadZeroValue_2_DisplaySegment(); 
0F63:  GOTO   2A2
....................    
....................       }while(OPS_Status!=55);   
0F64:  MOVF   2D,W
0F65:  SUBLW  37
0F66:  BTFSC  03.2
0F67:  GOTO   76A
0F68:  BSF    03.5
0F69:  GOTO   470
....................        
....................    //Display the record sequentially on the LCD 
....................    DisplayRecordsSequentiallyOnLCD();  
0F6A:  GOTO   2AC
....................        
.................... /*-----------------------------------------------------------------------------------------------------------------*/   
.................... /*                             >>> END - SEQUENTIAL STEPS OF THE OPERATION - END <<<                               */   
.................... /*-----------------------------------------------------------------------------------------------------------------*/   
....................     
....................        
....................              
....................     while(1) 
....................     { 
0F6B:  GOTO   76B
....................  
....................     } 
....................   
.................... } 
....................  
0F6C:  SLEEP
....................  
.................... /* ======== -BEGIN- SYSTEM CONFIGURATION FUNCTIONS -BEGIN- ======== */ 
.................... //Function-1 
.................... void SubSystem_Init(void){ 
....................  lcd_init(); 
....................  trisSetting_Init(); 
....................  displaySetting_Init(); 
....................  interruptSetting_Init(); 
....................  adcSetting_Init(); 
*
0272:  BSF    0A.3
0273:  BCF    0A.4
0274:  GOTO   455 (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void trisSetting_Init(){ 
....................    set_tris_b(0x01); //B0       ==> Cancel all operations and close the system 
*
0242:  MOVLW  01
0243:  MOVWF  06
....................                      //B1 to B7 ==> 7-Segment Display  
....................                       
....................    //Assign the Display Scanning switches as outputs 
....................    output_drive(pin_HundredDigit_switch);  
0244:  BCF    09.2
....................    output_drive(pin_TensDigit_switch); 
0245:  BCF    09.0
....................    output_drive(pin_UnitDigit_switch); 
0246:  BCF    09.1
....................       
.................... } 
....................  
.................... //Function-3 
.................... void interruptSetting_Init(){ 
.................... //---> OPERATION CANCEL BUTTON CONFIGURATION  <---// 
....................  
....................         //Interrupt on rising edge of INT pin  
....................         my_TIM0_OPTION_REG |= 0x40; 
*
024F:  BSF    03.5
0250:  BSF    01.6
....................         //External Interrupt Enable &  Global Interrupt Enable  
....................         my_INTCON_REG |= 0x90;  
0251:  MOVLW  90
0252:  BCF    03.5
0253:  IORWF  0B,F
....................       
.................... //---> TIMER & INTERRUPT CONFIGURATION  <---// 
....................       
....................         // T(overflow) = InstructionTime*PSC*(256-TIM0_val) 
....................         //        64mS = 1uS * 256 * (256-56) 
....................         my_TIM0_OPTION_REG &= 0xC7 ; 
0254:  MOVLW  C7
0255:  BSF    03.5
0256:  ANDWF  01,F
....................         my_TIM0_MODULE_REG = 56; 
0257:  MOVLW  38
0258:  BCF    03.5
0259:  MOVWF  01
....................  
.................... } 
....................  
.................... //Function-4 
.................... void adcSetting_Init(){ 
....................      //-CONFIG--> Surfing Potentiometer & Timer Potentiometer 
....................         setup_adc_ports(sAN0|sAN1); 
025A:  BSF    03.5
025B:  BSF    03.6
025C:  MOVF   09,W
025D:  ANDLW  C0
025E:  MOVWF  09
025F:  BCF    03.6
0260:  BCF    1F.4
0261:  BCF    1F.5
0262:  MOVLW  03
0263:  BSF    03.6
0264:  MOVWF  08
....................         setup_adc(adc_clock_div_32); 
0265:  BCF    03.5
0266:  BCF    03.6
0267:  BCF    1F.6
0268:  BSF    1F.7
0269:  BSF    03.5
026A:  BSF    1F.7
026B:  BCF    03.5
026C:  BSF    1F.0
....................         delay_us(20); 
026D:  MOVLW  06
026E:  MOVWF  77
026F:  DECFSZ 77,F
0270:  GOTO   26F
0271:  NOP
....................         
....................      //-CONFIG--> Process Intensity Potentiometer 
.................... } 
....................  
.................... //Function-5 
.................... void displaySetting_Init(){ 
....................  
....................    //Apply voltage to display the digits 
....................    output_high(pin_UnitDigit_switch);     
*
0247:  BCF    03.5
0248:  BSF    09.1
....................    output_high(pin_TensDigit_switch);      
0249:  BSF    09.0
....................    output_high(pin_HundredDigit_switch);  
024A:  BSF    09.2
....................     
....................    //Load the initial value into the segments. 
....................    output_b(segmentTable[0]);  
024B:  BSF    03.5
024C:  MOVF   20,W
024D:  BCF    03.5
024E:  MOVWF  06
.................... } 
....................  
.................... /* ======== -END- SYSTEM CONFIGURATION FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
.................... /* ======== -BEGIN- LCD SCREEN FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief :It sequentially displays a welcome message and  
....................  *        prompts the user to present their ID card. 
....................  */ 
.................... void SubSystem_lcd_IdleStatus(void){ 
....................       printf(lcd_putc,"\f"); 
*
0337:  MOVLW  0C
0338:  BSF    03.5
0339:  MOVWF  4C
033A:  BCF    03.5
033B:  CALL   289
....................       lcd_gotoxy(4,1); 
033C:  MOVLW  04
033D:  BSF    03.5
033E:  MOVWF  4D
033F:  MOVLW  01
0340:  MOVWF  4E
0341:  BCF    03.5
0342:  CALL   275
....................       printf(lcd_putc,"Mikroleum'a"); 
0343:  MOVLW  A6
0344:  BSF    03.6
0345:  MOVWF  0D
0346:  MOVLW  00
0347:  MOVWF  0F
0348:  BCF    03.6
0349:  CALL   2C3
....................       lcd_gotoxy(4,2); 
034A:  MOVLW  04
034B:  BSF    03.5
034C:  MOVWF  4D
034D:  MOVLW  02
034E:  MOVWF  4E
034F:  BCF    03.5
0350:  CALL   275
....................       printf(lcd_putc,"Hosgeldiniz"); 
0351:  MOVLW  AC
0352:  BSF    03.6
0353:  MOVWF  0D
0354:  MOVLW  00
0355:  MOVWF  0F
0356:  BCF    03.6
0357:  CALL   2C3
....................       delay_ms(500); 
0358:  MOVLW  02
0359:  BSF    03.5
035A:  MOVWF  41
035B:  MOVLW  FA
035C:  MOVWF  4D
035D:  BCF    03.5
035E:  CALL   181
035F:  BSF    03.5
0360:  DECFSZ 41,F
0361:  GOTO   35B
....................       printf(lcd_putc,"\f"); 
0362:  MOVLW  0C
0363:  MOVWF  4C
0364:  BCF    03.5
0365:  CALL   289
....................        
....................       lcd_gotoxy(1,1); 
0366:  MOVLW  01
0367:  BSF    03.5
0368:  MOVWF  4D
0369:  MOVWF  4E
036A:  BCF    03.5
036B:  CALL   275
....................       printf(lcd_putc,"Lutfen ID Karti"); 
036C:  MOVLW  B2
036D:  BSF    03.6
036E:  MOVWF  0D
036F:  MOVLW  00
0370:  MOVWF  0F
0371:  BCF    03.6
0372:  CALL   2C3
....................       lcd_gotoxy(4,2); 
0373:  MOVLW  04
0374:  BSF    03.5
0375:  MOVWF  4D
0376:  MOVLW  02
0377:  MOVWF  4E
0378:  BCF    03.5
0379:  CALL   275
....................       printf(lcd_putc,"Gosteriniz"); 
037A:  MOVLW  BA
037B:  BSF    03.6
037C:  MOVWF  0D
037D:  MOVLW  00
037E:  MOVWF  0F
037F:  BCF    03.6
0380:  CALL   2C3
....................       delay_ms(500); 
0381:  MOVLW  02
0382:  BSF    03.5
0383:  MOVWF  41
0384:  MOVLW  FA
0385:  MOVWF  4D
0386:  BCF    03.5
0387:  CALL   181
0388:  BSF    03.5
0389:  DECFSZ 41,F
038A:  GOTO   384
....................       printf(lcd_putc,"\f"); 
038B:  MOVLW  0C
038C:  MOVWF  4C
038D:  BCF    03.5
038E:  CALL   289
038F:  BSF    0A.3
0390:  BCF    0A.4
0391:  GOTO   458 (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void NavigateOperationMenu(void){ 
....................    printf(lcd_putc, "\f"); // LCD'yi temizle 
*
0420:  MOVLW  0C
0421:  BSF    03.5
0422:  MOVWF  4C
0423:  BCF    03.5
0424:  CALL   289
....................  
....................     // 1. Seçenek 
....................     if (Index_OptionMenu == 0) { 
0425:  MOVF   41,F
0426:  BTFSS  03.2
0427:  GOTO   443
....................         lcd_gotoxy(1, 1); 
0428:  MOVLW  01
0429:  BSF    03.5
042A:  MOVWF  4D
042B:  MOVWF  4E
042C:  BCF    03.5
042D:  CALL   275
....................         printf(lcd_putc, "1-Kopuk Islem <-"); 
042E:  MOVLW  C0
042F:  BSF    03.6
0430:  MOVWF  0D
0431:  MOVLW  00
0432:  MOVWF  0F
0433:  BCF    03.6
0434:  CALL   2C3
....................         lcd_gotoxy(1, 2); 
0435:  MOVLW  01
0436:  BSF    03.5
0437:  MOVWF  4D
0438:  MOVLW  02
0439:  MOVWF  4E
043A:  BCF    03.5
043B:  CALL   275
....................         printf(lcd_putc, "2-Su Islem");    
043C:  MOVLW  C9
043D:  BSF    03.6
043E:  MOVWF  0D
043F:  MOVLW  00
0440:  MOVWF  0F
0441:  BCF    03.6
0442:  CALL   2C3
....................     }  
....................  
....................     // 2. Seçenek 
....................     if (Index_OptionMenu == 1) { 
0443:  DECFSZ 41,W
0444:  GOTO   460
....................         lcd_gotoxy(1, 1); 
0445:  MOVLW  01
0446:  BSF    03.5
0447:  MOVWF  4D
0448:  MOVWF  4E
0449:  BCF    03.5
044A:  CALL   275
....................         printf(lcd_putc, "2-Su Islem <-"); 
044B:  MOVLW  CF
044C:  BSF    03.6
044D:  MOVWF  0D
044E:  MOVLW  00
044F:  MOVWF  0F
0450:  BCF    03.6
0451:  CALL   2C3
....................         lcd_gotoxy(1, 2); 
0452:  MOVLW  01
0453:  BSF    03.5
0454:  MOVWF  4D
0455:  MOVLW  02
0456:  MOVWF  4E
0457:  BCF    03.5
0458:  CALL   275
....................         printf(lcd_putc, "3-Hava Islem");        
0459:  MOVLW  D6
045A:  BSF    03.6
045B:  MOVWF  0D
045C:  MOVLW  00
045D:  MOVWF  0F
045E:  BCF    03.6
045F:  CALL   2C3
....................     } 
....................      
....................     // 3. Seçenek 
....................         if (Index_OptionMenu == 2) { 
0460:  MOVF   41,W
0461:  SUBLW  02
0462:  BTFSS  03.2
0463:  GOTO   47F
....................         lcd_gotoxy(1, 1); 
0464:  MOVLW  01
0465:  BSF    03.5
0466:  MOVWF  4D
0467:  MOVWF  4E
0468:  BCF    03.5
0469:  CALL   275
....................         printf(lcd_putc, "3-Hava Islem <-"); 
046A:  MOVLW  DD
046B:  BSF    03.6
046C:  MOVWF  0D
046D:  MOVLW  00
046E:  MOVWF  0F
046F:  BCF    03.6
0470:  CALL   2C3
....................         lcd_gotoxy(1, 2); 
0471:  MOVLW  01
0472:  BSF    03.5
0473:  MOVWF  4D
0474:  MOVLW  02
0475:  MOVWF  4E
0476:  BCF    03.5
0477:  CALL   275
....................         printf(lcd_putc, "4-Cila Islem");    
0478:  MOVLW  E5
0479:  BSF    03.6
047A:  MOVWF  0D
047B:  MOVLW  00
047C:  MOVWF  0F
047D:  BCF    03.6
047E:  CALL   2C3
....................     }  
....................  
....................     // 4. Seçenek 
....................     if (Index_OptionMenu == 3) { 
047F:  MOVF   41,W
0480:  SUBLW  03
0481:  BTFSS  03.2
0482:  GOTO   49E
....................         lcd_gotoxy(1, 1); 
0483:  MOVLW  01
0484:  BSF    03.5
0485:  MOVWF  4D
0486:  MOVWF  4E
0487:  BCF    03.5
0488:  CALL   275
....................         printf(lcd_putc, "4-Cila Islem <-"); 
0489:  MOVLW  EC
048A:  BSF    03.6
048B:  MOVWF  0D
048C:  MOVLW  00
048D:  MOVWF  0F
048E:  BCF    03.6
048F:  CALL   2C3
....................         lcd_gotoxy(1, 2); 
0490:  MOVLW  01
0491:  BSF    03.5
0492:  MOVWF  4D
0493:  MOVLW  02
0494:  MOVWF  4E
0495:  BCF    03.5
0496:  CALL   275
....................         printf(lcd_putc, "5-Kayit Islem");     
0497:  MOVLW  F4
0498:  BSF    03.6
0499:  MOVWF  0D
049A:  MOVLW  00
049B:  MOVWF  0F
049C:  BCF    03.6
049D:  CALL   2C3
....................     } 
....................      
....................     // 5. Seçenek 
....................     if (Index_OptionMenu == 4) { 
049E:  MOVF   41,W
049F:  SUBLW  04
04A0:  BTFSS  03.2
04A1:  GOTO   4AF
....................         lcd_gotoxy(1, 1); 
04A2:  MOVLW  01
04A3:  BSF    03.5
04A4:  MOVWF  4D
04A5:  MOVWF  4E
04A6:  BCF    03.5
04A7:  CALL   275
....................         printf(lcd_putc, "5-Kayit Islem <-");  
04A8:  MOVLW  FB
04A9:  BSF    03.6
04AA:  MOVWF  0D
04AB:  MOVLW  00
04AC:  MOVWF  0F
04AD:  BCF    03.6
04AE:  CALL   2C3
....................     } 
04AF:  BSF    0A.3
04B0:  BCF    0A.4
04B1:  GOTO   4AD (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Function-3 
.................... void NavigateTimeMoneyPreferenceMenu(void){ 
....................     
....................    printf(lcd_putc, "\f");  
*
05C7:  MOVLW  0C
05C8:  BSF    03.5
05C9:  MOVWF  4C
05CA:  BCF    03.5
05CB:  CALL   289
....................    lcd_gotoxy(1,1); 
05CC:  MOVLW  01
05CD:  BSF    03.5
05CE:  MOVWF  4D
05CF:  MOVWF  4E
05D0:  BCF    03.5
05D1:  CALL   275
....................    printf(lcd_putc, "Ucret:%d tl",Index_TimeMoneyPreference*2+2); 
05D2:  BCF    03.0
05D3:  RLF    42,W
05D4:  ADDLW  02
05D5:  BSF    03.5
05D6:  MOVWF  41
05D7:  MOVLW  04
05D8:  BCF    03.5
05D9:  BSF    03.6
05DA:  MOVWF  0D
05DB:  MOVLW  01
05DC:  MOVWF  0F
05DD:  BCF    03.0
05DE:  MOVLW  06
05DF:  BSF    03.5
05E0:  BCF    03.6
05E1:  MOVWF  43
05E2:  BCF    03.5
05E3:  CALL   4B2
05E4:  BSF    03.5
05E5:  MOVF   41,W
05E6:  MOVWF  42
05E7:  MOVLW  18
05E8:  MOVWF  43
*
064A:  MOVLW  20
064B:  BSF    03.5
064C:  MOVWF  4C
064D:  BCF    03.5
064E:  CALL   289
064F:  MOVLW  74
0650:  BSF    03.5
0651:  MOVWF  4C
0652:  BCF    03.5
0653:  CALL   289
0654:  MOVLW  6C
0655:  BSF    03.5
0656:  MOVWF  4C
0657:  BCF    03.5
0658:  CALL   289
....................    lcd_gotoxy(1,2); 
0659:  MOVLW  01
065A:  BSF    03.5
065B:  MOVWF  4D
065C:  MOVLW  02
065D:  MOVWF  4E
065E:  BCF    03.5
065F:  CALL   275
....................    printf(lcd_putc, "Sure:%ld",time_arr[Index_TimeMoneyPreference]); 
0660:  BCF    03.0
0661:  RLF    42,W
0662:  ADDLW  4D
0663:  MOVWF  04
0664:  BCF    03.7
0665:  INCF   04,F
0666:  MOVF   00,W
0667:  BSF    03.5
0668:  MOVWF  42
0669:  DECF   04,F
066A:  MOVF   00,W
066B:  MOVWF  41
066C:  MOVLW  0A
066D:  BCF    03.5
066E:  BSF    03.6
066F:  MOVWF  0D
0670:  MOVLW  01
0671:  MOVWF  0F
0672:  BCF    03.0
0673:  MOVLW  05
0674:  BSF    03.5
0675:  BCF    03.6
0676:  MOVWF  43
0677:  BCF    03.5
0678:  CALL   4B2
0679:  MOVLW  10
067A:  MOVWF  04
067B:  BSF    03.5
067C:  MOVF   42,W
067D:  MOVWF  44
067E:  MOVF   41,W
067F:  MOVWF  43
0680:  BCF    03.5
0681:  CALL   543
....................    lcd_gotoxy(10,2); 
0682:  MOVLW  0A
0683:  BSF    03.5
0684:  MOVWF  4D
0685:  MOVLW  02
0686:  MOVWF  4E
0687:  BCF    03.5
0688:  CALL   275
....................    printf(lcd_putc, "Sec:"); 
0689:  MOVLW  0F
068A:  BSF    03.6
068B:  MOVWF  0D
068C:  MOVLW  01
068D:  MOVWF  0F
068E:  BCF    03.6
068F:  CALL   2C3
....................    lcd_gotoxy(14,2); 
0690:  MOVLW  0E
0691:  BSF    03.5
0692:  MOVWF  4D
0693:  MOVLW  02
0694:  MOVWF  4E
0695:  BCF    03.5
0696:  CALL   275
....................    printf(lcd_putc, "%c",SelectionState); 
0697:  MOVF   2E,W
0698:  BSF    03.5
0699:  MOVWF  4C
069A:  BCF    03.5
069B:  CALL   289
....................     
....................     
....................    if(input(button_Select) == 1){ 
069C:  BSF    03.5
069D:  BSF    05.5
069E:  BCF    03.5
069F:  BTFSS  05.5
06A0:  GOTO   734
....................       SelectionState = 'X'; 
06A1:  MOVLW  58
06A2:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 0){ 
06A3:  MOVF   41,F
06A4:  BTFSS  03.2
06A5:  GOTO   6D3
....................          MikroClient[ClientNumber].time_Foaming = time_arr[Index_TimeMoneyPreference]; 
06A6:  RLF    40,W
06A7:  MOVWF  77
06A8:  RLF    77,F
06A9:  RLF    77,F
06AA:  MOVLW  F8
06AB:  ANDWF  77,F
06AC:  MOVF   77,W
06AD:  ADDLW  30
06AE:  MOVWF  78
06AF:  CLRF   7A
06B0:  BTFSC  03.0
06B1:  INCF   7A,F
06B2:  MOVF   78,W
06B3:  BSF    03.5
06B4:  MOVWF  41
06B5:  MOVF   7A,W
06B6:  MOVWF  42
06B7:  BCF    03.0
06B8:  BCF    03.5
06B9:  RLF    42,W
06BA:  ADDLW  4D
06BB:  MOVWF  04
06BC:  BCF    03.7
06BD:  INCF   04,F
06BE:  MOVF   00,W
06BF:  MOVWF  7A
06C0:  DECF   04,F
06C1:  MOVF   00,W
06C2:  BSF    03.5
06C3:  MOVWF  43
06C4:  MOVF   7A,W
06C5:  MOVWF  44
06C6:  MOVF   41,W
06C7:  MOVWF  04
06C8:  BCF    03.7
06C9:  BTFSC  42.0
06CA:  BSF    03.7
06CB:  INCF   04,F
06CC:  MOVF   44,W
06CD:  MOVWF  00
06CE:  DECF   04,F
06CF:  MOVF   43,W
06D0:  MOVWF  00
....................       } 
06D1:  GOTO   733
06D2:  BCF    03.5
....................       else if(Index_OptionMenu == 1){ 
06D3:  DECFSZ 41,W
06D4:  GOTO   703
....................          MikroClient[ClientNumber].time_Washing = time_arr[Index_TimeMoneyPreference]; 
06D5:  RLF    40,W
06D6:  MOVWF  77
06D7:  RLF    77,F
06D8:  RLF    77,F
06D9:  MOVLW  F8
06DA:  ANDWF  77,F
06DB:  MOVF   77,W
06DC:  ADDLW  02
06DD:  ADDLW  30
06DE:  MOVWF  78
06DF:  CLRF   7A
06E0:  BTFSC  03.0
06E1:  INCF   7A,F
06E2:  MOVF   78,W
06E3:  BSF    03.5
06E4:  MOVWF  41
06E5:  MOVF   7A,W
06E6:  MOVWF  42
06E7:  BCF    03.0
06E8:  BCF    03.5
06E9:  RLF    42,W
06EA:  ADDLW  4D
06EB:  MOVWF  04
06EC:  BCF    03.7
06ED:  INCF   04,F
06EE:  MOVF   00,W
06EF:  MOVWF  7A
06F0:  DECF   04,F
06F1:  MOVF   00,W
06F2:  BSF    03.5
06F3:  MOVWF  43
06F4:  MOVF   7A,W
06F5:  MOVWF  44
06F6:  MOVF   41,W
06F7:  MOVWF  04
06F8:  BCF    03.7
06F9:  BTFSC  42.0
06FA:  BSF    03.7
06FB:  INCF   04,F
06FC:  MOVF   44,W
06FD:  MOVWF  00
06FE:  DECF   04,F
06FF:  MOVF   43,W
0700:  MOVWF  00
....................       } 
0701:  GOTO   733
0702:  BCF    03.5
....................       else if(Index_OptionMenu == 2){ 
0703:  MOVF   41,W
0704:  SUBLW  02
0705:  BTFSS  03.2
0706:  GOTO   734
....................          MikroClient[ClientNumber].time_Ventilation = time_arr[Index_TimeMoneyPreference]; 
0707:  RLF    40,W
0708:  MOVWF  77
0709:  RLF    77,F
070A:  RLF    77,F
070B:  MOVLW  F8
070C:  ANDWF  77,F
070D:  MOVF   77,W
070E:  ADDLW  04
070F:  ADDLW  30
0710:  MOVWF  78
0711:  CLRF   7A
0712:  BTFSC  03.0
0713:  INCF   7A,F
0714:  MOVF   78,W
0715:  BSF    03.5
0716:  MOVWF  41
0717:  MOVF   7A,W
0718:  MOVWF  42
0719:  BCF    03.0
071A:  BCF    03.5
071B:  RLF    42,W
071C:  ADDLW  4D
071D:  MOVWF  04
071E:  BCF    03.7
071F:  INCF   04,F
0720:  MOVF   00,W
0721:  MOVWF  7A
0722:  DECF   04,F
0723:  MOVF   00,W
0724:  BSF    03.5
0725:  MOVWF  43
0726:  MOVF   7A,W
0727:  MOVWF  44
0728:  MOVF   41,W
0729:  MOVWF  04
072A:  BCF    03.7
072B:  BTFSC  42.0
072C:  BSF    03.7
072D:  INCF   04,F
072E:  MOVF   44,W
072F:  MOVWF  00
0730:  DECF   04,F
0731:  MOVF   43,W
0732:  MOVWF  00
0733:  BCF    03.5
....................       } 
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
0734:  BSF    03.5
0735:  BSF    40.0
0736:  MOVF   40,W
0737:  MOVWF  07
0738:  BCF    03.5
0739:  BTFSS  07.0
073A:  GOTO   73D
....................       SelectionState = ' '; 
073B:  MOVLW  20
073C:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
073D:  MOVLW  50
073E:  BSF    03.5
073F:  MOVWF  4D
0740:  BCF    03.5
0741:  CALL   181
0742:  BSF    0A.3
0743:  BCF    0A.4
0744:  GOTO   4F5 (RETURN)
.................... } 
....................  
.................... //Function-4 
.................... void NavigatePolishingMenu(){ 
....................    printf(lcd_putc, "\f");  
*
0800:  MOVLW  0C
0801:  BSF    03.5
0802:  MOVWF  4C
0803:  BCF    0A.3
0804:  BCF    03.5
0805:  CALL   289
0806:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
0807:  MOVLW  01
0808:  BSF    03.5
0809:  MOVWF  4D
080A:  MOVWF  4E
080B:  BCF    0A.3
080C:  BCF    03.5
080D:  CALL   275
080E:  BSF    0A.3
....................    printf(lcd_putc, "Ucret:%ld tl",(35*mililitrePolish[Index_PolishMililitre])); 
080F:  BCF    03.0
0810:  RLF    43,W
0811:  ADDLW  69
0812:  MOVWF  04
0813:  BCF    03.7
0814:  INCF   04,F
0815:  MOVF   00,W
0816:  MOVWF  7A
0817:  DECF   04,F
0818:  MOVF   00,W
0819:  BSF    03.5
081A:  MOVWF  41
081B:  MOVF   7A,W
081C:  MOVWF  42
081D:  CLRF   46
081E:  MOVLW  23
081F:  MOVWF  45
0820:  MOVF   42,W
0821:  MOVWF  48
0822:  MOVF   41,W
0823:  MOVWF  47
0824:  BCF    0A.3
0825:  BCF    03.5
0826:  CALL   3E2
0827:  BSF    0A.3
0828:  MOVF   79,W
0829:  BSF    03.5
082A:  MOVWF  42
082B:  MOVF   78,W
082C:  MOVWF  41
082D:  MOVLW  12
082E:  BCF    03.5
082F:  BSF    03.6
0830:  MOVWF  0D
0831:  MOVLW  01
0832:  MOVWF  0F
0833:  BCF    03.0
0834:  MOVLW  06
0835:  BSF    03.5
0836:  BCF    03.6
0837:  MOVWF  43
0838:  BCF    0A.3
0839:  BCF    03.5
083A:  CALL   4B2
083B:  BSF    0A.3
083C:  MOVLW  10
083D:  MOVWF  04
083E:  BSF    03.5
083F:  MOVF   42,W
0840:  MOVWF  44
0841:  MOVF   41,W
0842:  MOVWF  43
0843:  BCF    0A.3
0844:  BCF    03.5
0845:  CALL   543
0846:  BSF    0A.3
0847:  MOVLW  20
0848:  BSF    03.5
0849:  MOVWF  4C
084A:  BCF    0A.3
084B:  BCF    03.5
084C:  CALL   289
084D:  BSF    0A.3
084E:  MOVLW  74
084F:  BSF    03.5
0850:  MOVWF  4C
0851:  BCF    0A.3
0852:  BCF    03.5
0853:  CALL   289
0854:  BSF    0A.3
0855:  MOVLW  6C
0856:  BSF    03.5
0857:  MOVWF  4C
0858:  BCF    0A.3
0859:  BCF    03.5
085A:  CALL   289
085B:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
085C:  MOVLW  01
085D:  BSF    03.5
085E:  MOVWF  4D
085F:  MOVLW  02
0860:  MOVWF  4E
0861:  BCF    0A.3
0862:  BCF    03.5
0863:  CALL   275
0864:  BSF    0A.3
....................    printf(lcd_putc, "Ml:%ld",(unsigned long int)(100*mililitrePolish[Index_PolishMililitre])); 
0865:  BCF    03.0
0866:  RLF    43,W
0867:  ADDLW  69
0868:  MOVWF  04
0869:  BCF    03.7
086A:  INCF   04,F
086B:  MOVF   00,W
086C:  MOVWF  7A
086D:  DECF   04,F
086E:  MOVF   00,W
086F:  BSF    03.5
0870:  MOVWF  41
0871:  MOVF   7A,W
0872:  MOVWF  42
0873:  CLRF   46
0874:  MOVLW  64
0875:  MOVWF  45
0876:  MOVF   42,W
0877:  MOVWF  48
0878:  MOVF   41,W
0879:  MOVWF  47
087A:  BCF    0A.3
087B:  BCF    03.5
087C:  CALL   3E2
087D:  BSF    0A.3
087E:  MOVF   79,W
087F:  BSF    03.5
0880:  MOVWF  42
0881:  MOVF   78,W
0882:  MOVWF  41
0883:  MOVLW  4D
0884:  MOVWF  4C
0885:  BCF    0A.3
0886:  BCF    03.5
0887:  CALL   289
0888:  BSF    0A.3
0889:  MOVLW  6C
088A:  BSF    03.5
088B:  MOVWF  4C
088C:  BCF    0A.3
088D:  BCF    03.5
088E:  CALL   289
088F:  BSF    0A.3
0890:  MOVLW  3A
0891:  BSF    03.5
0892:  MOVWF  4C
0893:  BCF    0A.3
0894:  BCF    03.5
0895:  CALL   289
0896:  BSF    0A.3
0897:  MOVLW  10
0898:  MOVWF  04
0899:  BSF    03.5
089A:  MOVF   42,W
089B:  MOVWF  44
089C:  MOVF   41,W
089D:  MOVWF  43
089E:  BCF    0A.3
089F:  BCF    03.5
08A0:  CALL   543
08A1:  BSF    0A.3
....................    lcd_gotoxy(10,2); 
08A2:  MOVLW  0A
08A3:  BSF    03.5
08A4:  MOVWF  4D
08A5:  MOVLW  02
08A6:  MOVWF  4E
08A7:  BCF    0A.3
08A8:  BCF    03.5
08A9:  CALL   275
08AA:  BSF    0A.3
....................    printf(lcd_putc, "Sec:"); 
08AB:  MOVLW  19
08AC:  BSF    03.6
08AD:  MOVWF  0D
08AE:  MOVLW  01
08AF:  MOVWF  0F
08B0:  BCF    0A.3
08B1:  BCF    03.6
08B2:  CALL   2C3
08B3:  BSF    0A.3
....................    lcd_gotoxy(14,2); 
08B4:  MOVLW  0E
08B5:  BSF    03.5
08B6:  MOVWF  4D
08B7:  MOVLW  02
08B8:  MOVWF  4E
08B9:  BCF    0A.3
08BA:  BCF    03.5
08BB:  CALL   275
08BC:  BSF    0A.3
....................    printf(lcd_putc, "%c",SelectionState); 
08BD:  MOVF   2E,W
08BE:  BSF    03.5
08BF:  MOVWF  4C
08C0:  BCF    0A.3
08C1:  BCF    03.5
08C2:  CALL   289
08C3:  BSF    0A.3
....................     
....................     
....................    if(input(button_Select) == 1){ 
08C4:  BSF    03.5
08C5:  BSF    05.5
08C6:  BCF    03.5
08C7:  BTFSS  05.5
08C8:  GOTO   11B
....................       SelectionState = 'X'; 
08C9:  MOVLW  58
08CA:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 3){ 
08CB:  MOVF   41,W
08CC:  SUBLW  03
08CD:  BTFSS  03.2
08CE:  GOTO   11B
....................          MikroClient[ClientNumber].mililitre_Polishing = (100*mililitrePolish[Index_PolishMililitre]);  
08CF:  RLF    40,W
08D0:  MOVWF  77
08D1:  RLF    77,F
08D2:  RLF    77,F
08D3:  MOVLW  F8
08D4:  ANDWF  77,F
08D5:  MOVF   77,W
08D6:  ADDLW  06
08D7:  ADDLW  30
08D8:  BSF    03.5
08D9:  MOVWF  41
08DA:  CLRF   42
08DB:  BTFSC  03.0
08DC:  INCF   42,F
08DD:  BCF    03.0
08DE:  BCF    03.5
08DF:  RLF    43,W
08E0:  ADDLW  69
08E1:  MOVWF  04
08E2:  BCF    03.7
08E3:  INCF   04,F
08E4:  MOVF   00,W
08E5:  MOVWF  7A
08E6:  DECF   04,F
08E7:  MOVF   00,W
08E8:  BSF    03.5
08E9:  MOVWF  43
08EA:  MOVF   7A,W
08EB:  MOVWF  44
08EC:  CLRF   46
08ED:  MOVLW  64
08EE:  MOVWF  45
08EF:  MOVF   44,W
08F0:  MOVWF  48
08F1:  MOVF   43,W
08F2:  MOVWF  47
08F3:  BCF    0A.3
08F4:  BCF    03.5
08F5:  CALL   3E2
08F6:  BSF    0A.3
08F7:  MOVF   78,W
08F8:  BSF    03.5
08F9:  MOVWF  43
08FA:  MOVF   79,W
08FB:  MOVWF  44
08FC:  MOVF   41,W
08FD:  MOVWF  04
08FE:  BCF    03.7
08FF:  BTFSC  42.0
0900:  BSF    03.7
0901:  INCF   04,F
0902:  MOVF   44,W
0903:  MOVWF  00
0904:  DECF   04,F
0905:  MOVF   43,W
0906:  MOVWF  00
....................          currentPolishAmount = MikroClient[ClientNumber].mililitre_Polishing; 
0907:  BCF    03.5
0908:  RLF    40,W
0909:  MOVWF  77
090A:  RLF    77,F
090B:  RLF    77,F
090C:  MOVLW  F8
090D:  ANDWF  77,F
090E:  MOVF   77,W
090F:  ADDLW  06
0910:  ADDLW  30
0911:  MOVWF  04
0912:  BCF    03.7
0913:  INCF   04,F
0914:  MOVF   00,W
0915:  BSF    03.5
0916:  MOVWF  31
0917:  DECF   04,F
0918:  MOVF   00,W
0919:  MOVWF  30
091A:  BCF    03.5
....................       } 
....................        
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
091B:  BSF    03.5
091C:  BSF    40.0
091D:  MOVF   40,W
091E:  MOVWF  07
091F:  BCF    03.5
0920:  BTFSS  07.0
0921:  GOTO   124
....................       SelectionState = ' '; 
0922:  MOVLW  20
0923:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
0924:  MOVLW  50
0925:  BSF    03.5
0926:  MOVWF  4D
0927:  BCF    0A.3
0928:  BCF    03.5
0929:  CALL   181
092A:  BSF    0A.3
092B:  BSF    0A.3
092C:  BCF    0A.4
092D:  GOTO   53E (RETURN)
.................... } 
....................  
....................  
.................... void NavigatePastProcessesMenu(){ 
....................    printf(lcd_putc, "\f"); 
092E:  MOVLW  0C
092F:  BSF    03.5
0930:  MOVWF  4C
0931:  BCF    0A.3
0932:  BCF    03.5
0933:  CALL   289
0934:  BSF    0A.3
....................     
....................    // 1-Islem 
....................    if (Index_PastProcesses == 0) { 
0935:  MOVF   44,F
0936:  BTFSS  03.2
0937:  GOTO   15B
....................         lcd_gotoxy(1, 1); 
0938:  MOVLW  01
0939:  BSF    03.5
093A:  MOVWF  4D
093B:  MOVWF  4E
093C:  BCF    0A.3
093D:  BCF    03.5
093E:  CALL   275
093F:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 1 <-"); 
0940:  MOVLW  1C
0941:  BSF    03.6
0942:  MOVWF  0D
0943:  MOVLW  01
0944:  MOVWF  0F
0945:  BCF    0A.3
0946:  BCF    03.6
0947:  CALL   2C3
0948:  BSF    0A.3
....................         lcd_gotoxy(1, 2); 
0949:  MOVLW  01
094A:  BSF    03.5
094B:  MOVWF  4D
094C:  MOVLW  02
094D:  MOVWF  4E
094E:  BCF    0A.3
094F:  BCF    03.5
0950:  CALL   275
0951:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 2");    
0952:  MOVLW  23
0953:  BSF    03.6
0954:  MOVWF  0D
0955:  MOVLW  01
0956:  MOVWF  0F
0957:  BCF    0A.3
0958:  BCF    03.6
0959:  CALL   2C3
095A:  BSF    0A.3
....................     }  
....................  
....................     // 2-Islem 
....................    if (Index_PastProcesses == 1) { 
095B:  DECFSZ 44,W
095C:  GOTO   180
....................         lcd_gotoxy(1, 1); 
095D:  MOVLW  01
095E:  BSF    03.5
095F:  MOVWF  4D
0960:  MOVWF  4E
0961:  BCF    0A.3
0962:  BCF    03.5
0963:  CALL   275
0964:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 2 <-"); 
0965:  MOVLW  28
0966:  BSF    03.6
0967:  MOVWF  0D
0968:  MOVLW  01
0969:  MOVWF  0F
096A:  BCF    0A.3
096B:  BCF    03.6
096C:  CALL   2C3
096D:  BSF    0A.3
....................         lcd_gotoxy(1, 2); 
096E:  MOVLW  01
096F:  BSF    03.5
0970:  MOVWF  4D
0971:  MOVLW  02
0972:  MOVWF  4E
0973:  BCF    0A.3
0974:  BCF    03.5
0975:  CALL   275
0976:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 3");    
0977:  MOVLW  2F
0978:  BSF    03.6
0979:  MOVWF  0D
097A:  MOVLW  01
097B:  MOVWF  0F
097C:  BCF    0A.3
097D:  BCF    03.6
097E:  CALL   2C3
097F:  BSF    0A.3
....................     }  
....................        // 3-Islem 
....................    if (Index_PastProcesses == 2) { 
0980:  MOVF   44,W
0981:  SUBLW  02
0982:  BTFSS  03.2
0983:  GOTO   1A7
....................         lcd_gotoxy(1, 1); 
0984:  MOVLW  01
0985:  BSF    03.5
0986:  MOVWF  4D
0987:  MOVWF  4E
0988:  BCF    0A.3
0989:  BCF    03.5
098A:  CALL   275
098B:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 3 <-"); 
098C:  MOVLW  34
098D:  BSF    03.6
098E:  MOVWF  0D
098F:  MOVLW  01
0990:  MOVWF  0F
0991:  BCF    0A.3
0992:  BCF    03.6
0993:  CALL   2C3
0994:  BSF    0A.3
....................         lcd_gotoxy(1, 2); 
0995:  MOVLW  01
0996:  BSF    03.5
0997:  MOVWF  4D
0998:  MOVLW  02
0999:  MOVWF  4E
099A:  BCF    0A.3
099B:  BCF    03.5
099C:  CALL   275
099D:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 4");    
099E:  MOVLW  3B
099F:  BSF    03.6
09A0:  MOVWF  0D
09A1:  MOVLW  01
09A2:  MOVWF  0F
09A3:  BCF    0A.3
09A4:  BCF    03.6
09A5:  CALL   2C3
09A6:  BSF    0A.3
....................     }  
....................  
....................     // 4-Islem 
....................    if (Index_PastProcesses == 3) { 
09A7:  MOVF   44,W
09A8:  SUBLW  03
09A9:  BTFSS  03.2
09AA:  GOTO   1CE
....................         lcd_gotoxy(1, 1); 
09AB:  MOVLW  01
09AC:  BSF    03.5
09AD:  MOVWF  4D
09AE:  MOVWF  4E
09AF:  BCF    0A.3
09B0:  BCF    03.5
09B1:  CALL   275
09B2:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 4 <-"); 
09B3:  MOVLW  40
09B4:  BSF    03.6
09B5:  MOVWF  0D
09B6:  MOVLW  01
09B7:  MOVWF  0F
09B8:  BCF    0A.3
09B9:  BCF    03.6
09BA:  CALL   2C3
09BB:  BSF    0A.3
....................         lcd_gotoxy(1, 2); 
09BC:  MOVLW  01
09BD:  BSF    03.5
09BE:  MOVWF  4D
09BF:  MOVLW  02
09C0:  MOVWF  4E
09C1:  BCF    0A.3
09C2:  BCF    03.5
09C3:  CALL   275
09C4:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 5");   
09C5:  MOVLW  47
09C6:  BSF    03.6
09C7:  MOVWF  0D
09C8:  MOVLW  01
09C9:  MOVWF  0F
09CA:  BCF    0A.3
09CB:  BCF    03.6
09CC:  CALL   2C3
09CD:  BSF    0A.3
....................     }  
....................      
....................    // 5-Islem 
....................    if (Index_PastProcesses == 4) { 
09CE:  MOVF   44,W
09CF:  SUBLW  04
09D0:  BTFSS  03.2
09D1:  GOTO   1E3
....................         lcd_gotoxy(1, 1); 
09D2:  MOVLW  01
09D3:  BSF    03.5
09D4:  MOVWF  4D
09D5:  MOVWF  4E
09D6:  BCF    0A.3
09D7:  BCF    03.5
09D8:  CALL   275
09D9:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 5 <-"); 
09DA:  MOVLW  4C
09DB:  BSF    03.6
09DC:  MOVWF  0D
09DD:  MOVLW  01
09DE:  MOVWF  0F
09DF:  BCF    0A.3
09E0:  BCF    03.6
09E1:  CALL   2C3
09E2:  BSF    0A.3
....................     }  
....................    
....................    delay_ms(80); 
09E3:  MOVLW  50
09E4:  BSF    03.5
09E5:  MOVWF  4D
09E6:  BCF    0A.3
09E7:  BCF    03.5
09E8:  CALL   181
09E9:  BSF    0A.3
09EA:  BSF    0A.3
09EB:  BCF    0A.4
09EC:  GOTO   586 (RETURN)
....................  
.................... } 
....................  
.................... //Function-5 
.................... void DisplayRecordsSequentiallyOnLCD(){ 
....................    printf(lcd_putc,"\f"); 
*
0AAC:  MOVLW  0C
0AAD:  BSF    03.5
0AAE:  MOVWF  4C
0AAF:  BCF    0A.3
0AB0:  BCF    03.5
0AB1:  CALL   289
0AB2:  BSF    0A.3
....................    lcd_gotoxy(2,1); 
0AB3:  MOVLW  02
0AB4:  BSF    03.5
0AB5:  MOVWF  4D
0AB6:  MOVLW  01
0AB7:  MOVWF  4E
0AB8:  BCF    0A.3
0AB9:  BCF    03.5
0ABA:  CALL   275
0ABB:  BSF    0A.3
....................    printf(lcd_putc,"CLOSING"); 
0ABC:  MOVLW  53
0ABD:  BSF    03.6
0ABE:  MOVWF  0D
0ABF:  MOVLW  01
0AC0:  MOVWF  0F
0AC1:  BCF    0A.3
0AC2:  BCF    03.6
0AC3:  CALL   2C3
0AC4:  BSF    0A.3
....................    delay_ms(1000); 
0AC5:  MOVLW  04
0AC6:  BSF    03.5
0AC7:  MOVWF  41
0AC8:  MOVLW  FA
0AC9:  MOVWF  4D
0ACA:  BCF    0A.3
0ACB:  BCF    03.5
0ACC:  CALL   181
0ACD:  BSF    0A.3
0ACE:  BSF    03.5
0ACF:  DECFSZ 41,F
0AD0:  GOTO   2C8
....................    printf(lcd_putc,"\f");   
0AD1:  MOVLW  0C
0AD2:  MOVWF  4C
0AD3:  BCF    0A.3
0AD4:  BCF    03.5
0AD5:  CALL   289
0AD6:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
0AD7:  MOVLW  01
0AD8:  BSF    03.5
0AD9:  MOVWF  4D
0ADA:  MOVWF  4E
0ADB:  BCF    0A.3
0ADC:  BCF    03.5
0ADD:  CALL   275
0ADE:  BSF    0A.3
....................    printf(lcd_putc, "Kopuk:%ld", MikroClient[ClientNumber].time_Foaming); 
0ADF:  RLF    40,W
0AE0:  MOVWF  77
0AE1:  RLF    77,F
0AE2:  RLF    77,F
0AE3:  MOVLW  F8
0AE4:  ANDWF  77,F
0AE5:  MOVF   77,W
0AE6:  ADDLW  30
0AE7:  MOVWF  04
0AE8:  BCF    03.7
0AE9:  INCF   04,F
0AEA:  MOVF   00,W
0AEB:  BSF    03.5
0AEC:  MOVWF  42
0AED:  DECF   04,F
0AEE:  MOVF   00,W
0AEF:  MOVWF  41
0AF0:  MOVLW  57
0AF1:  BCF    03.5
0AF2:  BSF    03.6
0AF3:  MOVWF  0D
0AF4:  MOVLW  01
0AF5:  MOVWF  0F
0AF6:  BCF    03.0
0AF7:  MOVLW  06
0AF8:  BSF    03.5
0AF9:  BCF    03.6
0AFA:  MOVWF  43
0AFB:  BCF    0A.3
0AFC:  BCF    03.5
0AFD:  CALL   4B2
0AFE:  BSF    0A.3
0AFF:  MOVLW  10
0B00:  MOVWF  04
0B01:  BSF    03.5
0B02:  MOVF   42,W
0B03:  MOVWF  44
0B04:  MOVF   41,W
0B05:  MOVWF  43
0B06:  BCF    0A.3
0B07:  BCF    03.5
0B08:  CALL   543
0B09:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
0B0A:  MOVLW  01
0B0B:  BSF    03.5
0B0C:  MOVWF  4D
0B0D:  MOVLW  02
0B0E:  MOVWF  4E
0B0F:  BCF    0A.3
0B10:  BCF    03.5
0B11:  CALL   275
0B12:  BSF    0A.3
....................    printf(lcd_putc, "Su::%ld",MikroClient[ClientNumber].time_Washing); 
0B13:  RLF    40,W
0B14:  MOVWF  77
0B15:  RLF    77,F
0B16:  RLF    77,F
0B17:  MOVLW  F8
0B18:  ANDWF  77,F
0B19:  MOVF   77,W
0B1A:  ADDLW  02
0B1B:  ADDLW  30
0B1C:  MOVWF  04
0B1D:  BCF    03.7
0B1E:  INCF   04,F
0B1F:  MOVF   00,W
0B20:  BSF    03.5
0B21:  MOVWF  42
0B22:  DECF   04,F
0B23:  MOVF   00,W
0B24:  MOVWF  41
0B25:  MOVLW  5C
0B26:  BCF    03.5
0B27:  BSF    03.6
0B28:  MOVWF  0D
0B29:  MOVLW  01
0B2A:  MOVWF  0F
0B2B:  BCF    03.0
0B2C:  MOVLW  04
0B2D:  BSF    03.5
0B2E:  BCF    03.6
0B2F:  MOVWF  43
0B30:  BCF    0A.3
0B31:  BCF    03.5
0B32:  CALL   4B2
0B33:  BSF    0A.3
0B34:  MOVLW  10
0B35:  MOVWF  04
0B36:  BSF    03.5
0B37:  MOVF   42,W
0B38:  MOVWF  44
0B39:  MOVF   41,W
0B3A:  MOVWF  43
0B3B:  BCF    0A.3
0B3C:  BCF    03.5
0B3D:  CALL   543
0B3E:  BSF    0A.3
....................    delay_ms(2000); 
0B3F:  MOVLW  08
0B40:  BSF    03.5
0B41:  MOVWF  41
0B42:  MOVLW  FA
0B43:  MOVWF  4D
0B44:  BCF    0A.3
0B45:  BCF    03.5
0B46:  CALL   181
0B47:  BSF    0A.3
0B48:  BSF    03.5
0B49:  DECFSZ 41,F
0B4A:  GOTO   342
....................    printf(lcd_putc,"\f");   
0B4B:  MOVLW  0C
0B4C:  MOVWF  4C
0B4D:  BCF    0A.3
0B4E:  BCF    03.5
0B4F:  CALL   289
0B50:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
0B51:  MOVLW  01
0B52:  BSF    03.5
0B53:  MOVWF  4D
0B54:  MOVWF  4E
0B55:  BCF    0A.3
0B56:  BCF    03.5
0B57:  CALL   275
0B58:  BSF    0A.3
....................    printf(lcd_putc, "Hava:%ld", MikroClient[ClientNumber].time_Ventilation); 
0B59:  RLF    40,W
0B5A:  MOVWF  77
0B5B:  RLF    77,F
0B5C:  RLF    77,F
0B5D:  MOVLW  F8
0B5E:  ANDWF  77,F
0B5F:  MOVF   77,W
0B60:  ADDLW  04
0B61:  ADDLW  30
0B62:  MOVWF  04
0B63:  BCF    03.7
0B64:  INCF   04,F
0B65:  MOVF   00,W
0B66:  BSF    03.5
0B67:  MOVWF  42
0B68:  DECF   04,F
0B69:  MOVF   00,W
0B6A:  MOVWF  41
0B6B:  MOVLW  60
0B6C:  BCF    03.5
0B6D:  BSF    03.6
0B6E:  MOVWF  0D
0B6F:  MOVLW  01
0B70:  MOVWF  0F
0B71:  BCF    03.0
0B72:  MOVLW  05
0B73:  BSF    03.5
0B74:  BCF    03.6
0B75:  MOVWF  43
0B76:  BCF    0A.3
0B77:  BCF    03.5
0B78:  CALL   4B2
0B79:  BSF    0A.3
0B7A:  MOVLW  10
0B7B:  MOVWF  04
0B7C:  BSF    03.5
0B7D:  MOVF   42,W
0B7E:  MOVWF  44
0B7F:  MOVF   41,W
0B80:  MOVWF  43
0B81:  BCF    0A.3
0B82:  BCF    03.5
0B83:  CALL   543
0B84:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
0B85:  MOVLW  01
0B86:  BSF    03.5
0B87:  MOVWF  4D
0B88:  MOVLW  02
0B89:  MOVWF  4E
0B8A:  BCF    0A.3
0B8B:  BCF    03.5
0B8C:  CALL   275
0B8D:  BSF    0A.3
....................     printf(lcd_putc, "Cila:%ld", MikroClient[ClientNumber].mililitre_Polishing); 
0B8E:  RLF    40,W
0B8F:  MOVWF  77
0B90:  RLF    77,F
0B91:  RLF    77,F
0B92:  MOVLW  F8
0B93:  ANDWF  77,F
0B94:  MOVF   77,W
0B95:  ADDLW  06
0B96:  ADDLW  30
0B97:  MOVWF  04
0B98:  BCF    03.7
0B99:  INCF   04,F
0B9A:  MOVF   00,W
0B9B:  BSF    03.5
0B9C:  MOVWF  42
0B9D:  DECF   04,F
0B9E:  MOVF   00,W
0B9F:  MOVWF  41
0BA0:  MOVLW  65
0BA1:  BCF    03.5
0BA2:  BSF    03.6
0BA3:  MOVWF  0D
0BA4:  MOVLW  01
0BA5:  MOVWF  0F
0BA6:  BCF    03.0
0BA7:  MOVLW  05
0BA8:  BSF    03.5
0BA9:  BCF    03.6
0BAA:  MOVWF  43
0BAB:  BCF    0A.3
0BAC:  BCF    03.5
0BAD:  CALL   4B2
0BAE:  BSF    0A.3
0BAF:  MOVLW  10
0BB0:  MOVWF  04
0BB1:  BSF    03.5
0BB2:  MOVF   42,W
0BB3:  MOVWF  44
0BB4:  MOVF   41,W
0BB5:  MOVWF  43
0BB6:  BCF    0A.3
0BB7:  BCF    03.5
0BB8:  CALL   543
0BB9:  BSF    0A.3
....................    delay_ms(2000); 
0BBA:  MOVLW  08
0BBB:  BSF    03.5
0BBC:  MOVWF  41
0BBD:  MOVLW  FA
0BBE:  MOVWF  4D
0BBF:  BCF    0A.3
0BC0:  BCF    03.5
0BC1:  CALL   181
0BC2:  BSF    0A.3
0BC3:  BSF    03.5
0BC4:  DECFSZ 41,F
0BC5:  GOTO   3BD
0BC6:  BCF    03.5
0BC7:  BSF    0A.3
0BC8:  BCF    0A.4
0BC9:  GOTO   76B (RETURN)
.................... } 
....................  
.................... /* ======== -END- LCD SCREEN FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- UART PROTOCOL FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief : This function checks the `readed_ID` variable to determine  
....................  *         the action to take based on predefined identifiers. Depending on the identifier, 
....................  *         it displays a welcome message for specific users or sets the system to an idle state. 
....................  */ 
.................... void SubSystem_uart_CheckTheMessage(void){ 
....................     
....................    if(readed_ID == '+'){      //Mr. Selçuk's ID 
*
0392:  MOVF   2B,W
0393:  SUBLW  2B
0394:  BTFSS  03.2
0395:  GOTO   3B6
....................       ClientNumber = 0;       //System works for Mr. Selcuk 
0396:  CLRF   40
....................       lcd_gotoxy(4,1); 
0397:  MOVLW  04
0398:  BSF    03.5
0399:  MOVWF  4D
039A:  MOVLW  01
039B:  MOVWF  4E
039C:  BCF    03.5
039D:  CALL   275
....................       printf(lcd_putc,"Hosgeldiniz"); 
039E:  MOVLW  6A
039F:  BSF    03.6
03A0:  MOVWF  0D
03A1:  MOVLW  01
03A2:  MOVWF  0F
03A3:  BCF    03.6
03A4:  CALL   2C3
....................       lcd_gotoxy(4,2); 
03A5:  MOVLW  04
03A6:  BSF    03.5
03A7:  MOVWF  4D
03A8:  MOVLW  02
03A9:  MOVWF  4E
03AA:  BCF    03.5
03AB:  CALL   275
....................       printf(lcd_putc,"Selcuk Bey"); 
03AC:  MOVLW  70
03AD:  BSF    03.6
03AE:  MOVWF  0D
03AF:  MOVLW  01
03B0:  MOVWF  0F
03B1:  BCF    03.6
03B2:  CALL   2C3
....................       systemLock = 1; 
03B3:  MOVLW  01
03B4:  MOVWF  2C
....................    } 
03B5:  GOTO   3DF
....................    else if(readed_ID == '*'){ //Mr. Emre's ID 
03B6:  MOVF   2B,W
03B7:  SUBLW  2A
03B8:  BTFSS  03.2
03B9:  GOTO   3DB
....................       ClientNumber = 1;       //System works for Mr. Emre 
03BA:  MOVLW  01
03BB:  MOVWF  40
....................       lcd_gotoxy(4,1); 
03BC:  MOVLW  04
03BD:  BSF    03.5
03BE:  MOVWF  4D
03BF:  MOVLW  01
03C0:  MOVWF  4E
03C1:  BCF    03.5
03C2:  CALL   275
....................       printf(lcd_putc,"Hosgeldiniz"); 
03C3:  MOVLW  76
03C4:  BSF    03.6
03C5:  MOVWF  0D
03C6:  MOVLW  01
03C7:  MOVWF  0F
03C8:  BCF    03.6
03C9:  CALL   2C3
....................       lcd_gotoxy(4,2); 
03CA:  MOVLW  04
03CB:  BSF    03.5
03CC:  MOVWF  4D
03CD:  MOVLW  02
03CE:  MOVWF  4E
03CF:  BCF    03.5
03D0:  CALL   275
....................       printf(lcd_putc,"Emre Bey"); 
03D1:  MOVLW  7C
03D2:  BSF    03.6
03D3:  MOVWF  0D
03D4:  MOVLW  01
03D5:  MOVWF  0F
03D6:  BCF    03.6
03D7:  CALL   2C3
....................       systemLock = 1; 
03D8:  MOVLW  01
03D9:  MOVWF  2C
....................    } 
03DA:  GOTO   3DF
....................    else if(readed_ID == '.'){ //Slave pic is idle status 
03DB:  MOVF   2B,W
03DC:  SUBLW  2E
03DD:  BTFSC  03.2
....................        systemLock = 0; 
03DE:  CLRF   2C
....................    } 
03DF:  BSF    0A.3
03E0:  BCF    0A.4
03E1:  GOTO   461 (RETURN)
....................  
.................... } 
.................... /* ======== -END- UART PROTOCOL FUNCTIONS -END- ======== */ 
....................  
....................  
.................... /* ======== -BEGIN- 7-SEGMENT DISPLAY -BEGIN- ======== */ 
.................... void sequentialDisplayScan(){ 
....................  
....................          //It indicates that the polishing process has now started 
....................          if((counter_StartOpsButtonTick == 4)){ 
*
09ED:  MOVF   76,W
09EE:  SUBLW  04
09EF:  BTFSS  03.2
09F0:  GOTO   21E
....................                    
....................             number_unitDigit    = (currentPolishAmount%10); 
09F1:  BSF    03.5
09F2:  MOVF   31,W
09F3:  MOVWF  44
09F4:  MOVF   30,W
09F5:  MOVWF  43
09F6:  CLRF   46
09F7:  MOVLW  0A
09F8:  MOVWF  45
09F9:  BCF    0A.3
09FA:  BCF    03.5
09FB:  CALL   3F9
09FC:  BSF    0A.3
09FD:  MOVF   77,W
09FE:  MOVWF  73
....................             number_tensDigit    = ((currentPolishAmount/10)%10); 
09FF:  BSF    03.5
0A00:  MOVF   31,W
0A01:  MOVWF  44
0A02:  MOVF   30,W
0A03:  MOVWF  43
0A04:  CLRF   46
0A05:  MOVLW  0A
0A06:  MOVWF  45
0A07:  BCF    0A.3
0A08:  BCF    03.5
0A09:  CALL   3F9
0A0A:  BSF    0A.3
0A0B:  MOVF   79,W
0A0C:  BSF    03.5
0A0D:  MOVWF  42
0A0E:  MOVF   78,W
0A0F:  MOVWF  41
0A10:  MOVF   42,W
0A11:  MOVWF  44
0A12:  MOVF   41,W
0A13:  MOVWF  43
0A14:  CLRF   46
0A15:  MOVLW  0A
0A16:  MOVWF  45
0A17:  BCF    0A.3
0A18:  BCF    03.5
0A19:  CALL   3F9
0A1A:  BSF    0A.3
0A1B:  MOVF   77,W
0A1C:  MOVWF  74
....................              
....................          } 
0A1D:  GOTO   268
....................          //CurrentTime will be taken from the timer. 
....................          else{ 
....................              
....................             number_unitDigit    = (CurrentTime%10);   
0A1E:  MOVF   7C,W
0A1F:  BSF    03.5
0A20:  MOVWF  44
0A21:  MOVF   7B,W
0A22:  MOVWF  43
0A23:  CLRF   46
0A24:  MOVLW  0A
0A25:  MOVWF  45
0A26:  BCF    0A.3
0A27:  BCF    03.5
0A28:  CALL   3F9
0A29:  BSF    0A.3
0A2A:  MOVF   77,W
0A2B:  MOVWF  73
....................             number_tensDigit    = ((CurrentTime/10)%10);  
0A2C:  MOVF   7C,W
0A2D:  BSF    03.5
0A2E:  MOVWF  44
0A2F:  MOVF   7B,W
0A30:  MOVWF  43
0A31:  CLRF   46
0A32:  MOVLW  0A
0A33:  MOVWF  45
0A34:  BCF    0A.3
0A35:  BCF    03.5
0A36:  CALL   3F9
0A37:  BSF    0A.3
0A38:  MOVF   79,W
0A39:  BSF    03.5
0A3A:  MOVWF  42
0A3B:  MOVF   78,W
0A3C:  MOVWF  41
0A3D:  MOVF   42,W
0A3E:  MOVWF  44
0A3F:  MOVF   41,W
0A40:  MOVWF  43
0A41:  CLRF   46
0A42:  MOVLW  0A
0A43:  MOVWF  45
0A44:  BCF    0A.3
0A45:  BCF    03.5
0A46:  CALL   3F9
0A47:  BSF    0A.3
0A48:  MOVF   77,W
0A49:  MOVWF  74
....................             number_hundredDigit = ((CurrentTime/100)%10); 
0A4A:  MOVF   7C,W
0A4B:  BSF    03.5
0A4C:  MOVWF  44
0A4D:  MOVF   7B,W
0A4E:  MOVWF  43
0A4F:  CLRF   46
0A50:  MOVLW  64
0A51:  MOVWF  45
0A52:  BCF    0A.3
0A53:  BCF    03.5
0A54:  CALL   3F9
0A55:  BSF    0A.3
0A56:  MOVF   79,W
0A57:  BSF    03.5
0A58:  MOVWF  42
0A59:  MOVF   78,W
0A5A:  MOVWF  41
0A5B:  MOVF   42,W
0A5C:  MOVWF  44
0A5D:  MOVF   41,W
0A5E:  MOVWF  43
0A5F:  CLRF   46
0A60:  MOVLW  0A
0A61:  MOVWF  45
0A62:  BCF    0A.3
0A63:  BCF    03.5
0A64:  CALL   3F9
0A65:  BSF    0A.3
0A66:  MOVF   77,W
0A67:  MOVWF  75
....................          } 
....................           
....................     
....................           
....................          
....................          /* 
....................           * Perform digit changes using the transistor. 
....................           * Display the corresponding value for the relevant digit. 
....................           * Wait for a millisecond to allow the human eye to perceive the change. 
....................           */ 
....................           output_high(pin_UnitDigit_switch);      
0A68:  BSF    09.1
....................           output_low(pin_TensDigit_switch);       
0A69:  BCF    09.0
....................           output_low(pin_HundredDigit_switch);    
0A6A:  BCF    09.2
....................           output_b(segmentTable[number_unitDigit]);  
0A6B:  MOVLW  A0
0A6C:  ADDWF  73,W
0A6D:  MOVWF  04
0A6E:  BCF    03.7
0A6F:  MOVF   00,W
0A70:  BSF    03.5
0A71:  MOVWF  41
0A72:  BCF    03.5
0A73:  MOVWF  06
....................           delay_ms(10);                             
0A74:  MOVLW  0A
0A75:  BSF    03.5
0A76:  MOVWF  4D
0A77:  BCF    0A.3
0A78:  BCF    03.5
0A79:  CALL   181
0A7A:  BSF    0A.3
....................            
....................           output_low(pin_UnitDigit_switch);       
0A7B:  BCF    09.1
....................           output_high(pin_TensDigit_switch);      
0A7C:  BSF    09.0
....................           output_low(pin_HundredDigit_switch);           
0A7D:  BCF    09.2
....................           output_b(segmentTable[number_tensDigit]);  
0A7E:  MOVLW  A0
0A7F:  ADDWF  74,W
0A80:  MOVWF  04
0A81:  BCF    03.7
0A82:  MOVF   00,W
0A83:  BSF    03.5
0A84:  MOVWF  41
0A85:  BCF    03.5
0A86:  MOVWF  06
....................           delay_ms(10);   
0A87:  MOVLW  0A
0A88:  BSF    03.5
0A89:  MOVWF  4D
0A8A:  BCF    0A.3
0A8B:  BCF    03.5
0A8C:  CALL   181
0A8D:  BSF    0A.3
....................            
....................           output_low(pin_UnitDigit_switch);        
0A8E:  BCF    09.1
....................           output_low(pin_TensDigit_switch);        
0A8F:  BCF    09.0
....................           output_high(pin_HundredDigit_switch);    
0A90:  BSF    09.2
....................           output_b(segmentTable[number_hundredDigit]);  
0A91:  MOVLW  A0
0A92:  ADDWF  75,W
0A93:  MOVWF  04
0A94:  BCF    03.7
0A95:  MOVF   00,W
0A96:  BSF    03.5
0A97:  MOVWF  41
0A98:  BCF    03.5
0A99:  MOVWF  06
....................           delay_ms(10);  
0A9A:  MOVLW  0A
0A9B:  BSF    03.5
0A9C:  MOVWF  4D
0A9D:  BCF    0A.3
0A9E:  BCF    03.5
0A9F:  CALL   181
0AA0:  BSF    0A.3
0AA1:  RETURN
....................     
.................... } 
....................  
.................... void loadZeroValue_2_DisplaySegment(){ 
....................  
....................    //Apply voltage to display the digits 
....................    output_high(pin_UnitDigit_switch);     
0AA2:  BSF    09.1
....................    output_high(pin_TensDigit_switch);      
0AA3:  BSF    09.0
....................    output_high(pin_HundredDigit_switch);  
0AA4:  BSF    09.2
....................     
....................    //Load the initial value into the segments. 
....................    output_b(segmentTable[0]);  
0AA5:  BSF    03.5
0AA6:  MOVF   20,W
0AA7:  BCF    03.5
0AA8:  MOVWF  06
0AA9:  BSF    0A.3
0AAA:  BCF    0A.4
0AAB:  GOTO   764 (RETURN)
.................... } 
....................  
....................  
.................... /* ======== -END- 7-SEGMENT DISPLAY -END- ======== */ 
....................  
.................... /********************************************************************************************************************/ 
.................... /*                                MAIN CODE & SEQUENTIAL STEPS OF THE OPERATION                                     */ 
.................... /********************************************************************************************************************/ 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
