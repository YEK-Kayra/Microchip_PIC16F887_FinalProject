CCS PCM C Compiler, Version 5.049, 5967               23-Ara-24 23:47

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Final_CCS_Code_ForMaster\main.lst

               ROM used:   1826 words (22%)
                           Largest free fragment is 2048
               RAM used:   72 (20%) at main() level
                           91 (25%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5BC
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... //Ister bisiklet ol ister tir, ne olursan ol yine gel 
....................  
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
0055:  DATA 43,26
0056:  DATA CF,29
0057:  DATA 49,27
0058:  DATA 47,00
0059:  DATA CB,37
005A:  DATA F0,3A
005B:  DATA 6B,1D
005C:  DATA 25,36
005D:  DATA 64,00
005E:  DATA D3,3A
005F:  DATA 3A,1D
0060:  DATA 25,36
0061:  DATA 64,00
0062:  DATA C8,30
0063:  DATA F6,30
0064:  DATA BA,12
0065:  DATA 6C,32
0066:  DATA 00,00
0067:  DATA CD,34
0068:  DATA 6B,39
0069:  DATA 6F,36
006A:  DATA E5,3A
006B:  DATA ED,13
006C:  DATA 61,00
006D:  DATA C8,37
006E:  DATA F3,33
006F:  DATA 65,36
0070:  DATA E4,34
0071:  DATA EE,34
0072:  DATA 7A,00
0073:  DATA CC,3A
0074:  DATA 74,33
0075:  DATA 65,37
0076:  DATA A0,24
0077:  DATA 44,10
0078:  DATA CB,30
0079:  DATA 72,3A
007A:  DATA 69,00
007B:  DATA C7,37
007C:  DATA 73,3A
007D:  DATA 65,39
007E:  DATA 69,37
007F:  DATA 69,3D
0080:  DATA 00,01
0081:  DATA B1,16
0082:  DATA CB,37
0083:  DATA F0,3A
0084:  DATA 6B,10
0085:  DATA C9,39
0086:  DATA EC,32
0087:  DATA 6D,10
0088:  DATA BC,16
0089:  DATA 00,01
008A:  DATA B2,16
008B:  DATA D3,3A
008C:  DATA A0,24
008D:  DATA 73,36
008E:  DATA E5,36
008F:  DATA 00,01
0090:  DATA B2,16
0091:  DATA D3,3A
0092:  DATA A0,24
0093:  DATA 73,36
0094:  DATA E5,36
0095:  DATA 20,1E
0096:  DATA 2D,00
0097:  DATA B3,16
0098:  DATA C8,30
0099:  DATA F6,30
009A:  DATA A0,24
009B:  DATA 73,36
009C:  DATA E5,36
009D:  DATA 00,01
009E:  DATA B3,16
009F:  DATA C8,30
00A0:  DATA F6,30
00A1:  DATA A0,24
00A2:  DATA 73,36
00A3:  DATA E5,36
00A4:  DATA 20,1E
00A5:  DATA 2D,00
00A6:  DATA B4,16
00A7:  DATA C3,34
00A8:  DATA EC,30
00A9:  DATA A0,24
00AA:  DATA 73,36
00AB:  DATA E5,36
00AC:  DATA 00,01
00AD:  DATA B4,16
00AE:  DATA C3,34
00AF:  DATA EC,30
00B0:  DATA A0,24
00B1:  DATA 73,36
00B2:  DATA E5,36
00B3:  DATA 20,1E
00B4:  DATA 2D,00
00B5:  DATA B5,16
00B6:  DATA CB,30
00B7:  DATA F9,34
00B8:  DATA 74,10
00B9:  DATA C9,39
00BA:  DATA EC,32
00BB:  DATA 6D,00
00BC:  DATA B5,16
00BD:  DATA CB,30
00BE:  DATA F9,34
00BF:  DATA 74,10
00C0:  DATA C9,39
00C1:  DATA EC,32
00C2:  DATA 6D,10
00C3:  DATA BC,16
00C4:  DATA 00,00
00C5:  DATA D5,31
00C6:  DATA F2,32
00C7:  DATA 74,1D
00C8:  DATA 25,32
00C9:  DATA 20,3A
00CA:  DATA 6C,00
00CB:  DATA D3,3A
00CC:  DATA F2,32
00CD:  DATA BA,12
00CE:  DATA 6C,32
00CF:  DATA 00,01
00D0:  DATA D3,32
00D1:  DATA 63,1D
00D2:  DATA 00,01
00D3:  DATA C8,37
00D4:  DATA F3,33
00D5:  DATA 65,36
00D6:  DATA E4,34
00D7:  DATA EE,34
00D8:  DATA 7A,00
00D9:  DATA D3,32
00DA:  DATA EC,31
00DB:  DATA F5,35
00DC:  DATA 20,21
00DD:  DATA E5,3C
00DE:  DATA 00,01
00DF:  DATA C8,37
00E0:  DATA F3,33
00E1:  DATA 65,36
00E2:  DATA E4,34
00E3:  DATA EE,34
00E4:  DATA 7A,00
00E5:  DATA C5,36
00E6:  DATA F2,32
00E7:  DATA 20,21
00E8:  DATA E5,3C
00E9:  DATA 00,00
*
01F5:  MOVF   0B,W
01F6:  MOVWF  61
01F7:  BCF    0B.7
01F8:  BSF    03.5
01F9:  BSF    03.6
01FA:  BSF    0C.7
01FB:  BSF    0C.0
01FC:  NOP
01FD:  NOP
01FE:  BCF    03.5
01FF:  BCF    03.6
0200:  BTFSC  61.7
0201:  BSF    0B.7
0202:  BSF    03.6
0203:  MOVF   0C,W
0204:  ANDLW  7F
0205:  BTFSC  03.2
0206:  GOTO   249
0207:  BCF    03.6
0208:  MOVWF  61
0209:  BSF    03.6
020A:  MOVF   0D,W
020B:  BCF    03.6
020C:  MOVWF  62
020D:  BSF    03.6
020E:  MOVF   0F,W
020F:  BCF    03.6
0210:  MOVWF  63
0211:  MOVF   61,W
0212:  MOVWF  6C
0213:  CALL   1C9
0214:  MOVF   62,W
0215:  BSF    03.6
0216:  MOVWF  0D
0217:  BCF    03.6
0218:  MOVF   63,W
0219:  BSF    03.6
021A:  MOVWF  0F
021B:  BCF    03.6
021C:  MOVF   0B,W
021D:  MOVWF  64
021E:  BCF    0B.7
021F:  BSF    03.5
0220:  BSF    03.6
0221:  BSF    0C.7
0222:  BSF    0C.0
0223:  NOP
0224:  NOP
0225:  BCF    03.5
0226:  BCF    03.6
0227:  BTFSC  64.7
0228:  BSF    0B.7
0229:  BSF    03.6
022A:  RLF    0C,W
022B:  RLF    0E,W
022C:  ANDLW  7F
022D:  BTFSC  03.2
022E:  GOTO   249
022F:  BCF    03.6
0230:  MOVWF  61
0231:  BSF    03.6
0232:  MOVF   0D,W
0233:  BCF    03.6
0234:  MOVWF  62
0235:  BSF    03.6
0236:  MOVF   0F,W
0237:  BCF    03.6
0238:  MOVWF  63
0239:  MOVF   61,W
023A:  MOVWF  6C
023B:  CALL   1C9
023C:  MOVF   62,W
023D:  BSF    03.6
023E:  MOVWF  0D
023F:  BCF    03.6
0240:  MOVF   63,W
0241:  BSF    03.6
0242:  MOVWF  0F
0243:  INCF   0D,F
0244:  BTFSC  03.2
0245:  INCF   0F,F
0246:  BCF    03.6
0247:  GOTO   1F5
0248:  BSF    03.6
0249:  BCF    03.6
024A:  RETURN
*
02DC:  MOVLW  10
02DD:  MOVWF  65
02DE:  CLRF   77
02DF:  CLRF   7A
02E0:  RRF    62,F
02E1:  RRF    61,F
02E2:  BTFSS  03.0
02E3:  GOTO   2EA
02E4:  MOVF   63,W
02E5:  ADDWF  77,F
02E6:  BTFSC  03.0
02E7:  INCF   7A,F
02E8:  MOVF   64,W
02E9:  ADDWF  7A,F
02EA:  RRF    7A,F
02EB:  RRF    77,F
02EC:  RRF    79,F
02ED:  RRF    78,F
02EE:  DECFSZ 65,F
02EF:  GOTO   2E0
02F0:  RETURN
02F1:  CLRF   78
02F2:  CLRF   79
02F3:  CLRF   77
02F4:  CLRF   7A
02F5:  MOVF   66,W
02F6:  BTFSS  03.2
02F7:  GOTO   2FB
02F8:  MOVF   65,W
02F9:  BTFSC  03.2
02FA:  GOTO   315
02FB:  MOVLW  10
02FC:  MOVWF  67
02FD:  BCF    03.0
02FE:  RLF    63,F
02FF:  RLF    64,F
0300:  RLF    77,F
0301:  RLF    7A,F
0302:  MOVF   66,W
0303:  SUBWF  7A,W
0304:  BTFSS  03.2
0305:  GOTO   308
0306:  MOVF   65,W
0307:  SUBWF  77,W
0308:  BTFSS  03.0
0309:  GOTO   311
030A:  MOVF   65,W
030B:  SUBWF  77,F
030C:  BTFSS  03.0
030D:  DECF   7A,F
030E:  MOVF   66,W
030F:  SUBWF  7A,F
0310:  BSF    03.0
0311:  RLF    78,F
0312:  RLF    79,F
0313:  DECFSZ 67,F
0314:  GOTO   2FD
0315:  RETURN
*
0394:  MOVF   0B,W
0395:  MOVWF  64
0396:  BCF    0B.7
0397:  BSF    03.5
0398:  BSF    03.6
0399:  BSF    0C.7
039A:  BSF    0C.0
039B:  NOP
039C:  NOP
039D:  BCF    03.5
039E:  BCF    03.6
039F:  BTFSC  64.7
03A0:  BSF    0B.7
03A1:  BTFSC  03.0
03A2:  GOTO   3CB
03A3:  BSF    03.6
03A4:  MOVF   0C,W
03A5:  ANDLW  7F
03A6:  BCF    03.6
03A7:  MOVWF  64
03A8:  BSF    03.6
03A9:  MOVF   0D,W
03AA:  BCF    03.6
03AB:  MOVWF  65
03AC:  BSF    03.6
03AD:  MOVF   0F,W
03AE:  BCF    03.6
03AF:  MOVWF  66
03B0:  MOVF   64,W
03B1:  MOVWF  6C
03B2:  CALL   1C9
03B3:  MOVF   65,W
03B4:  BSF    03.6
03B5:  MOVWF  0D
03B6:  BCF    03.6
03B7:  MOVF   66,W
03B8:  BSF    03.6
03B9:  MOVWF  0F
03BA:  BCF    03.6
03BB:  MOVF   0B,W
03BC:  MOVWF  67
03BD:  BCF    0B.7
03BE:  BSF    03.5
03BF:  BSF    03.6
03C0:  BSF    0C.7
03C1:  BSF    0C.0
03C2:  NOP
03C3:  NOP
03C4:  BCF    03.5
03C5:  BCF    03.6
03C6:  BTFSC  67.7
03C7:  BSF    0B.7
03C8:  DECFSZ 63,F
03C9:  GOTO   3CB
03CA:  GOTO   3EA
03CB:  BSF    03.6
03CC:  RLF    0C,W
03CD:  RLF    0E,W
03CE:  ANDLW  7F
03CF:  BCF    03.6
03D0:  MOVWF  64
03D1:  BSF    03.6
03D2:  MOVF   0D,W
03D3:  BCF    03.6
03D4:  MOVWF  65
03D5:  BSF    03.6
03D6:  MOVF   0F,W
03D7:  BCF    03.6
03D8:  MOVWF  66
03D9:  MOVF   64,W
03DA:  MOVWF  6C
03DB:  CALL   1C9
03DC:  MOVF   65,W
03DD:  BSF    03.6
03DE:  MOVWF  0D
03DF:  BCF    03.6
03E0:  MOVF   66,W
03E1:  BSF    03.6
03E2:  MOVWF  0F
03E3:  INCF   0D,F
03E4:  BTFSC  03.2
03E5:  INCF   0F,F
03E6:  BCF    03.0
03E7:  BCF    03.6
03E8:  DECFSZ 63,F
03E9:  GOTO   394
03EA:  RETURN
03EB:  MOVF   69,W
03EC:  CLRF   78
03ED:  SUBWF  68,W
03EE:  BTFSC  03.0
03EF:  GOTO   3F3
03F0:  MOVF   68,W
03F1:  MOVWF  77
03F2:  GOTO   3FF
03F3:  CLRF   77
03F4:  MOVLW  08
03F5:  MOVWF  6A
03F6:  RLF    68,F
03F7:  RLF    77,F
03F8:  MOVF   69,W
03F9:  SUBWF  77,W
03FA:  BTFSC  03.0
03FB:  MOVWF  77
03FC:  RLF    78,F
03FD:  DECFSZ 6A,F
03FE:  GOTO   3F6
03FF:  RETURN
0400:  CLRF   6B
0401:  MOVF   04,W
0402:  MOVWF  6A
0403:  BCF    6B.0
0404:  BTFSC  03.7
0405:  BSF    6B.0
0406:  BTFSS  64.7
0407:  GOTO   410
0408:  BSF    6A.7
0409:  BTFSS  6A.4
040A:  INCF   6A,F
040B:  COMF   63,F
040C:  COMF   64,F
040D:  INCF   63,F
040E:  BTFSC  03.2
040F:  INCF   64,F
0410:  SWAPF  64,W
0411:  IORLW  F0
0412:  MOVWF  66
0413:  ADDWF  66,F
0414:  ADDLW  E2
0415:  MOVWF  67
0416:  ADDLW  32
0417:  MOVWF  69
0418:  MOVF   64,W
0419:  ANDLW  0F
041A:  ADDWF  67,F
041B:  ADDWF  67,F
041C:  ADDWF  69,F
041D:  ADDLW  E9
041E:  MOVWF  68
041F:  ADDWF  68,F
0420:  ADDWF  68,F
0421:  SWAPF  63,W
0422:  ANDLW  0F
0423:  ADDWF  68,F
0424:  ADDWF  69,F
0425:  RLF    68,F
0426:  RLF    69,F
0427:  COMF   69,F
0428:  RLF    69,F
0429:  MOVF   63,W
042A:  ANDLW  0F
042B:  ADDWF  69,F
042C:  RLF    66,F
042D:  MOVLW  07
042E:  MOVWF  65
042F:  MOVLW  0A
0430:  ADDWF  69,F
0431:  DECF   68,F
0432:  BTFSS  03.0
0433:  GOTO   430
0434:  ADDWF  68,F
0435:  DECF   67,F
0436:  BTFSS  03.0
0437:  GOTO   434
0438:  ADDWF  67,F
0439:  DECF   66,F
043A:  BTFSS  03.0
043B:  GOTO   438
043C:  ADDWF  66,F
043D:  DECF   65,F
043E:  BTFSS  03.0
043F:  GOTO   43C
0440:  MOVLW  65
0441:  MOVWF  04
0442:  BCF    03.7
0443:  MOVLW  07
0444:  ANDWF  6A,W
0445:  BCF    6A.6
0446:  DECF   04,F
0447:  ANDWF  6A,W
0448:  BTFSS  03.2
0449:  GOTO   451
044A:  BTFSC  6A.4
044B:  INCF   04,F
044C:  BTFSC  6A.4
044D:  GOTO   451
044E:  MOVLW  20
044F:  MOVWF  77
0450:  GOTO   46E
0451:  ADDWF  04,F
0452:  MOVLW  69
0453:  SUBWF  04,W
0454:  BTFSC  03.2
0455:  BSF    6A.6
0456:  MOVF   00,W
0457:  MOVWF  77
0458:  BTFSS  03.2
0459:  GOTO   462
045A:  BTFSC  6A.6
045B:  GOTO   462
045C:  BTFSC  6A.4
045D:  GOTO   47C
045E:  BTFSC  6A.3
045F:  GOTO   462
0460:  MOVLW  20
0461:  GOTO   46D
0462:  BTFSS  6A.7
0463:  GOTO   46A
0464:  MOVLW  2D
0465:  MOVWF  77
0466:  DECF   04,F
0467:  BCF    6A.6
0468:  BCF    6A.7
0469:  GOTO   46E
046A:  BSF    6A.3
046B:  BCF    6A.4
046C:  MOVLW  30
046D:  ADDWF  77,F
046E:  CLRF   64
046F:  MOVF   04,W
0470:  MOVWF  63
0471:  BCF    64.0
0472:  BTFSC  03.7
0473:  BSF    64.0
0474:  MOVF   77,W
0475:  MOVWF  6C
0476:  CALL   1C9
0477:  MOVF   63,W
0478:  MOVWF  04
0479:  BCF    03.7
047A:  BTFSC  64.0
047B:  BSF    03.7
047C:  INCF   04,F
047D:  BTFSS  6A.6
047E:  GOTO   452
047F:  RETURN
*
0499:  MOVLW  20
049A:  BTFSS  63.4
049B:  MOVLW  30
049C:  MOVWF  64
049D:  MOVF   62,W
049E:  MOVWF  77
049F:  BTFSS  62.7
04A0:  GOTO   4A9
04A1:  COMF   77,F
04A2:  INCF   77,F
04A3:  MOVF   77,W
04A4:  MOVWF  62
04A5:  MOVLW  2D
04A6:  MOVWF  64
04A7:  BSF    63.7
04A8:  BSF    63.0
04A9:  MOVF   62,W
04AA:  MOVWF  68
04AB:  MOVLW  64
04AC:  MOVWF  69
04AD:  CALL   3EB
04AE:  MOVF   77,W
04AF:  MOVWF  62
04B0:  MOVLW  30
04B1:  ADDWF  78,W
04B2:  MOVWF  65
04B3:  MOVF   62,W
04B4:  MOVWF  68
04B5:  MOVLW  0A
04B6:  MOVWF  69
04B7:  CALL   3EB
04B8:  MOVLW  30
04B9:  ADDWF  77,W
04BA:  MOVWF  67
04BB:  MOVLW  30
04BC:  ADDWF  78,W
04BD:  MOVWF  66
04BE:  MOVF   64,W
04BF:  MOVWF  77
04C0:  MOVLW  30
04C1:  SUBWF  65,W
04C2:  BTFSC  03.2
04C3:  GOTO   4C8
04C4:  BSF    63.1
04C5:  BTFSC  63.7
04C6:  BSF    63.2
04C7:  GOTO   4DC
04C8:  MOVF   64,W
04C9:  MOVWF  65
04CA:  MOVLW  20
04CB:  MOVWF  64
04CC:  MOVLW  30
04CD:  SUBWF  66,W
04CE:  BTFSC  03.2
04CF:  GOTO   4D4
04D0:  BSF    63.0
04D1:  BTFSC  63.7
04D2:  BSF    63.1
04D3:  GOTO   4DC
04D4:  BTFSS  03.2
04D5:  BSF    63.0
04D6:  BTFSS  03.2
04D7:  GOTO   4DC
04D8:  MOVF   65,W
04D9:  MOVWF  66
04DA:  MOVLW  20
04DB:  MOVWF  65
04DC:  BTFSC  63.2
04DD:  GOTO   4E3
04DE:  BTFSC  63.1
04DF:  GOTO   4E6
04E0:  BTFSC  63.0
04E1:  GOTO   4E9
04E2:  GOTO   4EC
04E3:  MOVF   64,W
04E4:  MOVWF  6C
04E5:  CALL   1C9
04E6:  MOVF   65,W
04E7:  MOVWF  6C
04E8:  CALL   1C9
04E9:  MOVF   66,W
04EA:  MOVWF  6C
04EB:  CALL   1C9
04EC:  MOVF   67,W
04ED:  MOVWF  6C
04EE:  CALL   1C9
....................  
.................... #list 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEVICES                         */ 
.................... /********************************************************/ 
.................... #device ADC = 10 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM USES                            */ 
.................... /********************************************************/ 
.................... #use delay(clock=4M)  
*
00EA:  MOVLW  6D
00EB:  MOVWF  04
00EC:  BCF    03.7
00ED:  MOVF   00,W
00EE:  BTFSC  03.2
00EF:  GOTO   0FE
00F0:  MOVLW  01
00F1:  MOVWF  78
00F2:  CLRF   77
00F3:  DECFSZ 77,F
00F4:  GOTO   0F3
00F5:  DECFSZ 78,F
00F6:  GOTO   0F2
00F7:  MOVLW  4A
00F8:  MOVWF  77
00F9:  DECFSZ 77,F
00FA:  GOTO   0F9
00FB:  GOTO   0FC
00FC:  DECFSZ 00,F
00FD:  GOTO   0F0
00FE:  RETURN
.................... #use rs232(baud=9600,parity=N,uart1,bits=8) 
.................... #use fast_io(b) 
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INCLUDES                        */ 
.................... /********************************************************/ 
.................... #include <lcd.c>     
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0117:  MOVLW  0F
0118:  BSF    03.5
0119:  ANDWF  08,W
011A:  IORLW  F0
011B:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
011C:  BCF    03.5
011D:  BSF    08.2
....................    delay_cycles(1); 
011E:  NOP
....................    lcd_output_enable(1); 
011F:  BSF    08.0
....................    delay_cycles(1); 
0120:  NOP
....................    high = lcd_read_nibble(); 
0121:  CALL   10B
0122:  MOVF   78,W
0123:  MOVWF  74
....................        
....................    lcd_output_enable(0); 
0124:  BCF    08.0
....................    delay_cycles(1); 
0125:  NOP
....................    lcd_output_enable(1); 
0126:  BSF    08.0
....................    delay_us(1); 
0127:  NOP
....................    low = lcd_read_nibble(); 
0128:  CALL   10B
0129:  MOVF   78,W
012A:  MOVWF  73
....................        
....................    lcd_output_enable(0); 
012B:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
012C:  MOVLW  0F
012D:  BSF    03.5
012E:  ANDWF  08,W
012F:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0130:  SWAPF  74,W
0131:  MOVWF  77
0132:  MOVLW  F0
0133:  ANDWF  77,F
0134:  MOVF   77,W
0135:  IORWF  73,W
0136:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
010B:  MOVF   08,W
010C:  MOVWF  77
010D:  SWAPF  08,W
010E:  ANDLW  0F
010F:  MOVWF  78
....................   #endif 
0110:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
00FF:  SWAPF  74,W
0100:  ANDLW  F0
0101:  MOVWF  77
0102:  MOVLW  0F
0103:  ANDWF  08,W
0104:  IORWF  77,W
0105:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0106:  NOP
....................    lcd_output_enable(1); 
0107:  BSF    08.0
....................    delay_us(2); 
0108:  GOTO   109
....................    lcd_output_enable(0); 
0109:  BCF    08.0
010A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0111:  BSF    03.5
0112:  BCF    08.0
....................    lcd_rs_tris(); 
0113:  BCF    08.1
....................    lcd_rw_tris(); 
0114:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0115:  BCF    03.5
0116:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0137:  MOVF   78,W
0138:  MOVWF  73
0139:  BTFSS  73.7
013A:  GOTO   13D
013B:  BCF    03.5
013C:  GOTO   117
....................    lcd_output_rs(address); 
013D:  BTFSC  71.0
013E:  GOTO   142
013F:  BCF    03.5
0140:  BCF    08.1
0141:  BSF    03.5
0142:  BTFSS  71.0
0143:  GOTO   147
0144:  BCF    03.5
0145:  BSF    08.1
0146:  BSF    03.5
....................    delay_cycles(1); 
0147:  NOP
....................    lcd_output_rw(0); 
0148:  BCF    03.5
0149:  BCF    08.2
....................    delay_cycles(1); 
014A:  NOP
....................    lcd_output_enable(0); 
014B:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
014C:  SWAPF  72,W
014D:  MOVWF  73
014E:  MOVLW  0F
014F:  ANDWF  73,F
0150:  MOVF   73,W
0151:  MOVWF  74
0152:  CALL   0FF
....................    lcd_send_nibble(n & 0xf); 
0153:  MOVF   72,W
0154:  ANDLW  0F
0155:  MOVWF  73
0156:  MOVWF  74
0157:  CALL   0FF
0158:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0159:  MOVLW  28
015A:  MOVWF  62
015B:  MOVLW  0C
015C:  MOVWF  63
015D:  MOVLW  01
015E:  MOVWF  64
015F:  MOVLW  06
0160:  MOVWF  65
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0161:  BCF    08.0
....................    lcd_output_rs(0); 
0162:  BCF    08.1
....................    lcd_output_rw(0); 
0163:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0164:  MOVLW  0F
0165:  BSF    03.5
0166:  ANDWF  08,W
0167:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0168:  BCF    08.0
....................    lcd_rs_tris(); 
0169:  BCF    08.1
....................    lcd_rw_tris(); 
016A:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
016B:  MOVLW  0F
016C:  BCF    03.5
016D:  MOVWF  6D
016E:  CALL   0EA
....................    for(i=1;i<=3;++i) 
016F:  MOVLW  01
0170:  MOVWF  61
0171:  MOVF   61,W
0172:  SUBLW  03
0173:  BTFSS  03.0
0174:  GOTO   17D
....................    { 
....................        lcd_send_nibble(3); 
0175:  MOVLW  03
0176:  MOVWF  74
0177:  CALL   0FF
....................        delay_ms(5); 
0178:  MOVLW  05
0179:  MOVWF  6D
017A:  CALL   0EA
017B:  INCF   61,F
017C:  GOTO   171
....................    } 
....................     
....................    lcd_send_nibble(2); 
017D:  MOVLW  02
017E:  MOVWF  74
017F:  CALL   0FF
....................    delay_ms(5); 
0180:  MOVLW  05
0181:  MOVWF  6D
0182:  CALL   0EA
....................    for(i=0;i<=3;++i) 
0183:  CLRF   61
0184:  MOVF   61,W
0185:  SUBLW  03
0186:  BTFSS  03.0
0187:  GOTO   194
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0188:  MOVLW  62
0189:  ADDWF  61,W
018A:  MOVWF  04
018B:  BCF    03.7
018C:  MOVF   00,W
018D:  MOVWF  66
018E:  CLRF   71
018F:  MOVF   66,W
0190:  MOVWF  72
0191:  CALL   111
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0192:  INCF   61,F
0193:  GOTO   184
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01B7:  DECFSZ 6E,W
01B8:  GOTO   1BA
01B9:  GOTO   1BD
....................       address=LCD_LINE_TWO; 
01BA:  MOVLW  40
01BB:  MOVWF  6F
01BC:  GOTO   1BE
....................    else 
....................       address=0; 
01BD:  CLRF   6F
....................       
....................    address+=x-1; 
01BE:  MOVLW  01
01BF:  SUBWF  6D,W
01C0:  ADDWF  6F,F
....................    lcd_send_byte(0,0x80|address); 
01C1:  MOVF   6F,W
01C2:  IORLW  80
01C3:  MOVWF  70
01C4:  CLRF   71
01C5:  MOVF   70,W
01C6:  MOVWF  72
01C7:  CALL   111
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01C8:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01C9:  MOVF   6C,W
01CA:  XORLW  07
01CB:  BTFSC  03.2
01CC:  GOTO   1D7
01CD:  XORLW  0B
01CE:  BTFSC  03.2
01CF:  GOTO   1DC
01D0:  XORLW  06
01D1:  BTFSC  03.2
01D2:  GOTO   1E4
01D3:  XORLW  02
01D4:  BTFSC  03.2
01D5:  GOTO   1EA
01D6:  GOTO   1EF
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01D7:  MOVLW  01
01D8:  MOVWF  6D
01D9:  MOVWF  6E
01DA:  CALL   1B7
01DB:  GOTO   1F4
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01DC:  CLRF   71
01DD:  MOVLW  01
01DE:  MOVWF  72
01DF:  CALL   111
....................                      delay_ms(2); 
01E0:  MOVLW  02
01E1:  MOVWF  6D
01E2:  CALL   0EA
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01E3:  GOTO   1F4
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01E4:  MOVLW  01
01E5:  MOVWF  6D
01E6:  MOVLW  02
01E7:  MOVWF  6E
01E8:  CALL   1B7
01E9:  GOTO   1F4
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01EA:  CLRF   71
01EB:  MOVLW  10
01EC:  MOVWF  72
01ED:  CALL   111
01EE:  GOTO   1F4
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01EF:  MOVLW  01
01F0:  MOVWF  71
01F1:  MOVF   6C,W
01F2:  MOVWF  72
01F3:  CALL   111
....................      #endif 
....................    } 
01F4:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <math.h>        
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <2408.c>                                        
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a MicroChip 24LC08B                                 //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);  Read the byte d from the address a     //// 
.................... ////                                                                   //// 
.................... ////   b = ext_eeprom_ready();  Returns TRUE if the eeprom is ready    //// 
.................... ////                            to receive opcodes                     //// 
.................... ////                                                                   //// 
.................... ////   The main program may define EEPROM_SDA                          //// 
.................... ////   and EEPROM_SCL to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... ////                            Pin Layout                             //// 
.................... ////   -----------------------------------------------------------     //// 
.................... ////   |                                                         |     //// 
.................... ////   | 1: NC   Not Connected | 8: VCC   +5V                    |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 2: NC   Not Connected | 7: WP    GND                    |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 3: NC   Not Connected | 6: SCL   EEPROM_SCL and Pull-Up |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 4: VSS  GND           | 5: SDA   EEPROM_SDA and Pull-Up |     //// 
.................... ////   -----------------------------------------------------------     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
....................  
.................... #use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS long int 
.................... #define EEPROM_SIZE    1024 
....................  
.................... void init_ext_eeprom() { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
.................... } 
....................  
.................... BOOLEAN ext_eeprom_ready() { 
....................    int1 ack; 
....................    i2c_start();            // If the write command is acknowledged, 
....................    ack = i2c_write(0xa0);  // then the device is ready. 
....................    i2c_stop(); 
....................    return !ack; 
.................... } 
....................  
.................... void write_ext_eeprom(long int address, BYTE data) { 
....................    while(!ext_eeprom_ready()); 
....................    i2c_start(); 
....................    i2c_write((0xa0|(BYTE)(address>>7))&0xfe); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(long int address) { 
....................    BYTE data; 
....................  
....................    while(!ext_eeprom_ready()); 
....................    i2c_start(); 
....................    i2c_write((0xa0|(BYTE)(address>>7))&0xfe); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write((0xa0|(BYTE)(address>>7))|1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM FUSES                           */ 
.................... /********************************************************/                                          
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM REGISTER                        */ 
.................... /********************************************************/ 
.................... //!#byte my_TIM0_OPTION_REG = 0x81  
.................... //!#byte my_TIM0_MODULE_REG = 0x01  
.................... //!#byte my_INTCON_REG      = 0x0B 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM STRUCTS                         */ 
.................... /********************************************************/ 
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int time_Polishing;       //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM VARIABLES                       */ 
.................... /********************************************************/ 
.................... //-VAR-->CRITICAL PART 
.................... char readed_ID;      //Coming data will be When came from slave PIC 
.................... int8 systemLock;     //If the ID is valid, system open. Otherwise it will remain locked 
.................... int8 OPS_Status;     //55 means ops will be canceled, otherwise ops will be going on 
.................... char SelectionState; //Put 'X' if button_Select is HIGH, put empty character if button_RemoveSelect is HIGH 
....................  
.................... //-VAR-->Keeps Clients 
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;   // Will be used as given on the right --> MikroClient[ClientNumber]                                         
....................  
.................... //-VAR-->POTENTIOMETERS 
.................... int Index_OptionMenu; 
.................... int Index_TimeMoneyPreference; 
.................... unsigned long int val_ADC_Pot_Surf; 
.................... unsigned long int val_ADC_Pot_Timer; 
....................  
.................... unsigned long int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};//Seconds 
*
05DE:  MOVLW  14
05DF:  BCF    03.6
05E0:  MOVWF  47
05E1:  CLRF   48
05E2:  MOVLW  28
05E3:  MOVWF  49
05E4:  CLRF   4A
05E5:  MOVLW  3C
05E6:  MOVWF  4B
05E7:  CLRF   4C
05E8:  MOVLW  50
05E9:  MOVWF  4D
05EA:  CLRF   4E
05EB:  MOVLW  64
05EC:  MOVWF  4F
05ED:  CLRF   50
05EE:  MOVLW  78
05EF:  MOVWF  51
05F0:  CLRF   52
05F1:  MOVLW  8C
05F2:  MOVWF  53
05F3:  CLRF   54
05F4:  MOVLW  A0
05F5:  MOVWF  55
05F6:  CLRF   56
05F7:  MOVLW  B4
05F8:  MOVWF  57
05F9:  CLRF   58
05FA:  MOVLW  C8
05FB:  MOVWF  59
05FC:  CLRF   5A
05FD:  MOVLW  DC
05FE:  MOVWF  5B
05FF:  CLRF   5C
0600:  MOVLW  F0
0601:  MOVWF  5D
0602:  CLRF   5E
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEFINATION                      */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM INPUT & OUTPUT ======== */ 
.................... #define button_NEXT           pin_A3 
.................... #define button_BACK           pin_A4 
.................... #define button_Select         pin_A5 
.................... #define button_RemoveSelect   pin_C0 
.................... #define button_OPS_START      pin_C1 
.................... #define button_OPS_CANCEL     pin_B0 
....................  
....................  
.................... /********************************************************/ 
.................... /*               FUNCTIONS PROTOTYPES                   */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM CONFIGURATION FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_Init(void); 
.................... void trisSetting_Init(void); 
.................... void interruptSetting_Init(void); 
.................... void adcSetting_Init(void); 
....................  
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_lcd_IdleStatus(void); 
.................... void NavigateOperationMenu(void); 
.................... void NavigateTimeMoneyPreferenceMenu(void); 
....................  
.................... /* ======== UART SERIAL COM. FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_uart_CheckTheMessage(void); 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM MACROS                          */ 
.................... /********************************************************/ 
.................... /* ======== -BEGIN- SYSTEM POTENTIOMETER INDEXER -BEGIN- ======== */ 
.................... #define ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf)        \ 
....................    do{                                        \ 
....................           Index_OptionMenu = ((val_ADC_Pot_Surf*5)/1020);  \ 
....................           if(Index_OptionMenu >= 5){                       \ 
....................             Index_OptionMenu = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer)              \ 
....................    do{                                                                \ 
....................           Index_TimeMoneyPreference = ((val_ADC_Pot_Timer*12)/1020);  \ 
....................           if(Index_TimeMoneyPreference >= 12){                        \ 
....................              Index_TimeMoneyPreference = 11;                          \ 
....................           }                                                           \ 
....................    }while(0) 
.................... /* ======== -END- SYSTEM POTENTIOMETER INDEXER -END- ======== */    
....................  
.................... /* ======== -BEGIN- SYSTEM TIMER TIME CONFIG -BEGIN- ======== */ 
.................... /* ======== -END- SYSTEM TIMER TIME CONFIG -END- ======== */ 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INTERRUPTS                      */ 
.................... /********************************************************/ 
.................... /* ======== -BEGIN- EXTERNAL INTERRUPT -BEGIN- ======== */ 
.................... #int_EXT 
.................... void system_isr_OperationCANCEL(){ 
....................   OPS_Status = 55; 
*
004F:  MOVLW  37
0050:  MOVWF  2E
0051:  BCF    0B.1
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   02B
.................... } 
.................... /* ======== -END- EXTERNAL INTERRUPT -END- ======== */ 
....................  
.................... /* ======== -BEGIN- TIMER_0 INTERRUPT -BEGIN- ======== */ 
.................... /* ======== -END- TIMER_0 INTERRUPT -END- ======== */ 
....................  
....................  
....................  
.................... void main(void)  
*
05BC:  MOVF   03,W
05BD:  ANDLW  1F
05BE:  MOVWF  03
05BF:  BSF    03.5
05C0:  BSF    03.6
05C1:  BCF    07.3
05C2:  MOVLW  19
05C3:  BCF    03.6
05C4:  MOVWF  19
05C5:  MOVLW  A6
05C6:  MOVWF  18
05C7:  MOVLW  90
05C8:  BCF    03.5
05C9:  MOVWF  18
05CA:  MOVLW  FF
05CB:  MOVWF  2B
05CC:  CLRF   60
05CD:  CLRF   5F
05CE:  BSF    03.5
05CF:  BSF    03.6
05D0:  MOVF   09,W
05D1:  ANDLW  C0
05D2:  MOVWF  09
05D3:  BCF    03.6
05D4:  BCF    1F.4
05D5:  BCF    1F.5
05D6:  MOVLW  00
05D7:  BSF    03.6
05D8:  MOVWF  08
05D9:  BCF    03.5
05DA:  CLRF   07
05DB:  CLRF   08
05DC:  CLRF   09
05DD:  BCF    03.7
.................... { 
....................    
....................    //-->System parameters will be initialized 
....................    SubSystem_Init(); 
*
0603:  GOTO   159
....................        
....................    //-->Wait until unlock the system 
....................    do{ 
....................            SubSystem_lcd_IdleStatus();   //Greeting the customer 
0604:  GOTO   24B
....................             
....................            if(kbhit()) 
0605:  BTFSS  0C.5
0606:  GOTO   60C
....................            { 
....................               readed_ID = getc(); 
0607:  BTFSS  0C.5
0608:  GOTO   607
0609:  MOVF   1A,W
060A:  MOVWF  2C
....................               SubSystem_uart_CheckTheMessage(); 
060B:  GOTO   294
....................            }       
....................          
....................     }while(systemLock!=1); 
060C:  DECFSZ 2D,W
060D:  GOTO   604
....................   
....................     delay_ms(1000); 
060E:  MOVLW  04
060F:  MOVWF  61
0610:  MOVLW  FA
0611:  MOVWF  6D
0612:  CALL   0EA
0613:  DECFSZ 61,F
0614:  GOTO   610
....................    
....................       //Potansiyometreden deðerler okuyacak, opsiyonlarý gezmek için 
....................       //ileri butonuna basýlýnca pot hangi opsiyonda ise o opsiyona gidilecek 
....................       //geri butonuna basýlýnca pot ile tekrardan yukardan aþaðý gezilebilecek 
....................       //diyelim ki bir opsiyonun içine girdi, pot kullanarak zamanlama ayarlarý ile oynuyor,  
....................       //çift týk ile ilgili zaman ve ücreti seçebilecek, tek týk ile de bozabilecek 
....................       do{ 
....................              //Start Of Conversation for ADC_Surf 
....................              set_adc_channel(0); 
0615:  MOVLW  00
0616:  MOVWF  78
0617:  MOVF   1F,W
0618:  ANDLW  C3
0619:  IORWF  78,W
061A:  MOVWF  1F
....................               
....................              //Get Surf_Pot ADC value(0-1024) 
....................              val_ADC_Pot_Surf = read_adc();   
061B:  BSF    1F.1
061C:  BTFSC  1F.1
061D:  GOTO   61C
061E:  BSF    03.5
061F:  MOVF   1E,W
0620:  BCF    03.5
0621:  MOVWF  43
0622:  MOVF   1E,W
0623:  MOVWF  44
....................               
....................              //Convert Surf_Pot ADC value into the option menu index 
....................              ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf); 
0624:  MOVF   44,W
0625:  MOVWF  62
0626:  MOVF   43,W
0627:  MOVWF  61
0628:  CLRF   64
0629:  MOVLW  05
062A:  MOVWF  63
062B:  CALL   2DC
062C:  MOVF   79,W
062D:  MOVWF  62
062E:  MOVF   78,W
062F:  MOVWF  61
0630:  MOVF   79,W
0631:  MOVWF  64
0632:  MOVF   78,W
0633:  MOVWF  63
0634:  MOVLW  03
0635:  MOVWF  66
0636:  MOVLW  FC
0637:  MOVWF  65
0638:  CALL   2F1
0639:  MOVF   78,W
063A:  MOVWF  41
063B:  SUBLW  04
063C:  BTFSC  03.0
063D:  GOTO   640
063E:  MOVLW  04
063F:  MOVWF  41
....................              
....................              //Use index value to show selected option and other one 
....................              NavigateOperationMenu(); 
0640:  GOTO   316
....................               
....................              //Clear selection 
....................              SelectionState = ' '; 
0641:  MOVLW  20
0642:  MOVWF  2F
....................               
....................                 //The client wants to see the next section based on the selected option 
....................                 if(input(button_NEXT) == 1) 
0643:  BSF    03.5
0644:  BSF    05.3
0645:  BCF    03.5
0646:  BTFSS  05.3
0647:  GOTO   67D
....................                 { 
....................        
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
0648:  MOVLW  04
0649:  MOVWF  78
064A:  MOVF   1F,W
064B:  ANDLW  C3
064C:  IORWF  78,W
064D:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_Timer = read_adc();  
064E:  BSF    1F.1
064F:  BTFSC  1F.1
0650:  GOTO   64F
0651:  BSF    03.5
0652:  MOVF   1E,W
0653:  BCF    03.5
0654:  MOVWF  45
0655:  MOVF   1E,W
0656:  MOVWF  46
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer); 
0657:  MOVF   46,W
0658:  MOVWF  62
0659:  MOVF   45,W
065A:  MOVWF  61
065B:  CLRF   64
065C:  MOVLW  0C
065D:  MOVWF  63
065E:  CALL   2DC
065F:  MOVF   79,W
0660:  MOVWF  62
0661:  MOVF   78,W
0662:  MOVWF  61
0663:  MOVF   79,W
0664:  MOVWF  64
0665:  MOVF   78,W
0666:  MOVWF  63
0667:  MOVLW  03
0668:  MOVWF  66
0669:  MOVLW  FC
066A:  MOVWF  65
066B:  CALL   2F1
066C:  MOVF   78,W
066D:  MOVWF  42
066E:  SUBLW  0B
066F:  BTFSC  03.0
0670:  GOTO   673
0671:  MOVLW  0B
0672:  MOVWF  42
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigateTimeMoneyPreferenceMenu(); 
0673:  GOTO   480
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
0674:  BSF    03.5
0675:  BSF    05.4
0676:  BCF    03.5
0677:  BTFSC  05.4
....................                                  break; 
0678:  GOTO   67D
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
0679:  MOVF   2E,W
067A:  SUBLW  37
067B:  BTFSS  03.2
067C:  GOTO   648
....................                 } 
....................               
....................              delay_ms(100); 
067D:  MOVLW  64
067E:  MOVWF  6D
067F:  CALL   0EA
....................    
....................       }while(OPS_Status!=55); 
0680:  MOVF   2E,W
0681:  SUBLW  37
0682:  BTFSS  03.2
0683:  GOTO   615
....................        
....................       printf(lcd_putc,"\f"); 
0684:  MOVLW  0C
0685:  MOVWF  6C
0686:  CALL   1C9
....................       lcd_gotoxy(2,1); 
0687:  MOVLW  02
0688:  MOVWF  6D
0689:  MOVLW  01
068A:  MOVWF  6E
068B:  CALL   1B7
....................       printf(lcd_putc,"CLOSING"); 
068C:  MOVLW  55
068D:  BSF    03.6
068E:  MOVWF  0D
068F:  MOVLW  00
0690:  MOVWF  0F
0691:  BCF    03.6
0692:  CALL   1F5
....................       delay_ms(1000); 
0693:  MOVLW  04
0694:  MOVWF  61
0695:  MOVLW  FA
0696:  MOVWF  6D
0697:  CALL   0EA
0698:  DECFSZ 61,F
0699:  GOTO   695
....................        
....................       printf(lcd_putc,"\f");   
069A:  MOVLW  0C
069B:  MOVWF  6C
069C:  CALL   1C9
....................       lcd_gotoxy(1,1); 
069D:  MOVLW  01
069E:  MOVWF  6D
069F:  MOVWF  6E
06A0:  CALL   1B7
....................       printf(lcd_putc, "Kopuk:%ld", MikroClient[ClientNumber].time_Foaming); 
06A1:  RLF    40,W
06A2:  MOVWF  77
06A3:  RLF    77,F
06A4:  RLF    77,F
06A5:  MOVLW  F8
06A6:  ANDWF  77,F
06A7:  MOVF   77,W
06A8:  ADDLW  30
06A9:  MOVWF  04
06AA:  BCF    03.7
06AB:  INCF   04,F
06AC:  MOVF   00,W
06AD:  MOVWF  62
06AE:  DECF   04,F
06AF:  MOVF   00,W
06B0:  MOVWF  61
06B1:  MOVLW  59
06B2:  BSF    03.6
06B3:  MOVWF  0D
06B4:  MOVLW  00
06B5:  MOVWF  0F
06B6:  BCF    03.0
06B7:  MOVLW  06
06B8:  BCF    03.6
06B9:  MOVWF  63
06BA:  CALL   394
06BB:  MOVLW  10
06BC:  MOVWF  04
06BD:  MOVF   62,W
06BE:  MOVWF  64
06BF:  MOVF   61,W
06C0:  MOVWF  63
06C1:  CALL   400
....................       lcd_gotoxy(1,2); 
06C2:  MOVLW  01
06C3:  MOVWF  6D
06C4:  MOVLW  02
06C5:  MOVWF  6E
06C6:  CALL   1B7
....................       printf(lcd_putc, "Su::%ld",MikroClient[ClientNumber].time_Washing); 
06C7:  RLF    40,W
06C8:  MOVWF  77
06C9:  RLF    77,F
06CA:  RLF    77,F
06CB:  MOVLW  F8
06CC:  ANDWF  77,F
06CD:  MOVF   77,W
06CE:  ADDLW  02
06CF:  ADDLW  30
06D0:  MOVWF  04
06D1:  BCF    03.7
06D2:  INCF   04,F
06D3:  MOVF   00,W
06D4:  MOVWF  62
06D5:  DECF   04,F
06D6:  MOVF   00,W
06D7:  MOVWF  61
06D8:  MOVLW  5E
06D9:  BSF    03.6
06DA:  MOVWF  0D
06DB:  MOVLW  00
06DC:  MOVWF  0F
06DD:  BCF    03.0
06DE:  MOVLW  04
06DF:  BCF    03.6
06E0:  MOVWF  63
06E1:  CALL   394
06E2:  MOVLW  10
06E3:  MOVWF  04
06E4:  MOVF   62,W
06E5:  MOVWF  64
06E6:  MOVF   61,W
06E7:  MOVWF  63
06E8:  CALL   400
....................       delay_ms(2000); 
06E9:  MOVLW  08
06EA:  MOVWF  61
06EB:  MOVLW  FA
06EC:  MOVWF  6D
06ED:  CALL   0EA
06EE:  DECFSZ 61,F
06EF:  GOTO   6EB
....................        
....................       printf(lcd_putc,"\f");   
06F0:  MOVLW  0C
06F1:  MOVWF  6C
06F2:  CALL   1C9
....................       lcd_gotoxy(1,1); 
06F3:  MOVLW  01
06F4:  MOVWF  6D
06F5:  MOVWF  6E
06F6:  CALL   1B7
....................       printf(lcd_putc, "Hava:%ld", MikroClient[ClientNumber].time_Ventilation); 
06F7:  RLF    40,W
06F8:  MOVWF  77
06F9:  RLF    77,F
06FA:  RLF    77,F
06FB:  MOVLW  F8
06FC:  ANDWF  77,F
06FD:  MOVF   77,W
06FE:  ADDLW  04
06FF:  ADDLW  30
0700:  MOVWF  04
0701:  BCF    03.7
0702:  INCF   04,F
0703:  MOVF   00,W
0704:  MOVWF  62
0705:  DECF   04,F
0706:  MOVF   00,W
0707:  MOVWF  61
0708:  MOVLW  62
0709:  BSF    03.6
070A:  MOVWF  0D
070B:  MOVLW  00
070C:  MOVWF  0F
070D:  BCF    03.0
070E:  MOVLW  05
070F:  BCF    03.6
0710:  MOVWF  63
0711:  CALL   394
0712:  MOVLW  10
0713:  MOVWF  04
0714:  MOVF   62,W
0715:  MOVWF  64
0716:  MOVF   61,W
0717:  MOVWF  63
0718:  CALL   400
....................       delay_ms(2000); 
0719:  MOVLW  08
071A:  MOVWF  61
071B:  MOVLW  FA
071C:  MOVWF  6D
071D:  CALL   0EA
071E:  DECFSZ 61,F
071F:  GOTO   71B
....................        
....................     while(1) 
....................     { 
0720:  GOTO   720
....................      
....................     
....................     
....................     } 
....................   
....................   
.................... } 
....................  
0721:  SLEEP
....................  
.................... /* ======== -BEGIN- SYSTEM CONFIGURATION FUNCTIONS -BEGIN- ======== */ 
.................... //Function-1 
.................... void SubSystem_Init(void){ 
....................  lcd_init(); 
....................  trisSetting_Init(); 
....................  interruptSetting_Init(); 
....................  adcSetting_Init(); 
*
01B4:  BCF    0A.3
01B5:  BCF    0A.4
01B6:  GOTO   604 (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void trisSetting_Init(){ 
....................    set_tris_b(0x01); 
*
0194:  MOVLW  01
0195:  BSF    03.5
0196:  MOVWF  06
.................... } 
....................  
.................... //Function-3 
.................... void interruptSetting_Init(){ 
....................      //-CONFIG--> OPERATION CANCEL BUTTON  
....................        ext_int_edge(L_TO_H); //Harici kesme Lojik 0'dan 1'e geçerken 
0197:  BSF    01.6
....................        enable_interrupts(INT_EXT); //Harici kesme aktif 
0198:  BCF    03.5
0199:  BSF    0B.4
....................        enable_interrupts(GLOBAL); //Aktif kesmeler için genel kesme yetkisi ver 
019A:  MOVLW  C0
019B:  IORWF  0B,F
....................      //-CONFIG--> TIMER0  
.................... } 
....................  
.................... //Function-4 
.................... void adcSetting_Init(){ 
....................      //-CONFIG--> Surfing Potentiometer 
....................         setup_adc_ports(sAN0|sAN1); 
019C:  BSF    03.5
019D:  BSF    03.6
019E:  MOVF   09,W
019F:  ANDLW  C0
01A0:  MOVWF  09
01A1:  BCF    03.6
01A2:  BCF    1F.4
01A3:  BCF    1F.5
01A4:  MOVLW  03
01A5:  BSF    03.6
01A6:  MOVWF  08
....................         setup_adc(adc_clock_div_32); 
01A7:  BCF    03.5
01A8:  BCF    03.6
01A9:  BCF    1F.6
01AA:  BSF    1F.7
01AB:  BSF    03.5
01AC:  BSF    1F.7
01AD:  BCF    03.5
01AE:  BSF    1F.0
....................         delay_us(200); 
01AF:  MOVLW  42
01B0:  MOVWF  77
01B1:  DECFSZ 77,F
01B2:  GOTO   1B1
01B3:  NOP
....................          
....................      //-CONFIG--> Timer Potentiometer 
....................      //-CONFIG--> Process Intensity Potentiometer 
.................... } 
....................  
.................... /* ======== -END- SYSTEM CONFIGURATION FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- LCD SCREEN FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief :It sequentially displays a welcome message and  
....................  *        prompts the user to present their ID card. 
....................  */ 
.................... void SubSystem_lcd_IdleStatus(void){ 
....................       printf(lcd_putc,"\f"); 
*
024B:  MOVLW  0C
024C:  MOVWF  6C
024D:  CALL   1C9
....................       lcd_gotoxy(4,1); 
024E:  MOVLW  04
024F:  MOVWF  6D
0250:  MOVLW  01
0251:  MOVWF  6E
0252:  CALL   1B7
....................       printf(lcd_putc,"Mikroleum'a"); 
0253:  MOVLW  67
0254:  BSF    03.6
0255:  MOVWF  0D
0256:  MOVLW  00
0257:  MOVWF  0F
0258:  BCF    03.6
0259:  CALL   1F5
....................       lcd_gotoxy(4,2); 
025A:  MOVLW  04
025B:  MOVWF  6D
025C:  MOVLW  02
025D:  MOVWF  6E
025E:  CALL   1B7
....................       printf(lcd_putc,"Hosgeldiniz"); 
025F:  MOVLW  6D
0260:  BSF    03.6
0261:  MOVWF  0D
0262:  MOVLW  00
0263:  MOVWF  0F
0264:  BCF    03.6
0265:  CALL   1F5
....................       delay_ms(500); 
0266:  MOVLW  02
0267:  MOVWF  61
0268:  MOVLW  FA
0269:  MOVWF  6D
026A:  CALL   0EA
026B:  DECFSZ 61,F
026C:  GOTO   268
....................       printf(lcd_putc,"\f"); 
026D:  MOVLW  0C
026E:  MOVWF  6C
026F:  CALL   1C9
....................        
....................       lcd_gotoxy(1,1); 
0270:  MOVLW  01
0271:  MOVWF  6D
0272:  MOVWF  6E
0273:  CALL   1B7
....................       printf(lcd_putc,"Lutfen ID Karti"); 
0274:  MOVLW  73
0275:  BSF    03.6
0276:  MOVWF  0D
0277:  MOVLW  00
0278:  MOVWF  0F
0279:  BCF    03.6
027A:  CALL   1F5
....................       lcd_gotoxy(4,2); 
027B:  MOVLW  04
027C:  MOVWF  6D
027D:  MOVLW  02
027E:  MOVWF  6E
027F:  CALL   1B7
....................       printf(lcd_putc,"Gosteriniz"); 
0280:  MOVLW  7B
0281:  BSF    03.6
0282:  MOVWF  0D
0283:  MOVLW  00
0284:  MOVWF  0F
0285:  BCF    03.6
0286:  CALL   1F5
....................       delay_ms(500); 
0287:  MOVLW  02
0288:  MOVWF  61
0289:  MOVLW  FA
028A:  MOVWF  6D
028B:  CALL   0EA
028C:  DECFSZ 61,F
028D:  GOTO   289
....................       printf(lcd_putc,"\f"); 
028E:  MOVLW  0C
028F:  MOVWF  6C
0290:  CALL   1C9
0291:  BCF    0A.3
0292:  BCF    0A.4
0293:  GOTO   605 (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void NavigateOperationMenu(void){ 
....................    printf(lcd_putc, "\f"); // LCD'yi temizle 
*
0316:  MOVLW  0C
0317:  MOVWF  6C
0318:  CALL   1C9
....................  
....................     // 1. Seçenek 
....................     if (Index_OptionMenu == 0) { 
0319:  MOVF   41,F
031A:  BTFSS  03.2
031B:  GOTO   333
....................         lcd_gotoxy(1, 1); 
031C:  MOVLW  01
031D:  MOVWF  6D
031E:  MOVWF  6E
031F:  CALL   1B7
....................         printf(lcd_putc, "1-Kopuk Islem <-"); 
0320:  MOVLW  81
0321:  BSF    03.6
0322:  MOVWF  0D
0323:  MOVLW  00
0324:  MOVWF  0F
0325:  BCF    03.6
0326:  CALL   1F5
....................         lcd_gotoxy(1, 2); 
0327:  MOVLW  01
0328:  MOVWF  6D
0329:  MOVLW  02
032A:  MOVWF  6E
032B:  CALL   1B7
....................         printf(lcd_putc, "2-Su Islem");    
032C:  MOVLW  8A
032D:  BSF    03.6
032E:  MOVWF  0D
032F:  MOVLW  00
0330:  MOVWF  0F
0331:  BCF    03.6
0332:  CALL   1F5
....................     }  
....................  
....................     // 2. Seçenek 
....................     if (Index_OptionMenu == 1) { 
0333:  DECFSZ 41,W
0334:  GOTO   34C
....................         lcd_gotoxy(1, 1); 
0335:  MOVLW  01
0336:  MOVWF  6D
0337:  MOVWF  6E
0338:  CALL   1B7
....................         printf(lcd_putc, "2-Su Islem <-"); 
0339:  MOVLW  90
033A:  BSF    03.6
033B:  MOVWF  0D
033C:  MOVLW  00
033D:  MOVWF  0F
033E:  BCF    03.6
033F:  CALL   1F5
....................         lcd_gotoxy(1, 2); 
0340:  MOVLW  01
0341:  MOVWF  6D
0342:  MOVLW  02
0343:  MOVWF  6E
0344:  CALL   1B7
....................         printf(lcd_putc, "3-Hava Islem");        
0345:  MOVLW  97
0346:  BSF    03.6
0347:  MOVWF  0D
0348:  MOVLW  00
0349:  MOVWF  0F
034A:  BCF    03.6
034B:  CALL   1F5
....................     } 
....................      
....................     // 3. Seçenek 
....................         if (Index_OptionMenu == 2) { 
034C:  MOVF   41,W
034D:  SUBLW  02
034E:  BTFSS  03.2
034F:  GOTO   367
....................         lcd_gotoxy(1, 1); 
0350:  MOVLW  01
0351:  MOVWF  6D
0352:  MOVWF  6E
0353:  CALL   1B7
....................         printf(lcd_putc, "3-Hava Islem <-"); 
0354:  MOVLW  9E
0355:  BSF    03.6
0356:  MOVWF  0D
0357:  MOVLW  00
0358:  MOVWF  0F
0359:  BCF    03.6
035A:  CALL   1F5
....................         lcd_gotoxy(1, 2); 
035B:  MOVLW  01
035C:  MOVWF  6D
035D:  MOVLW  02
035E:  MOVWF  6E
035F:  CALL   1B7
....................         printf(lcd_putc, "4-Cila Islem");    
0360:  MOVLW  A6
0361:  BSF    03.6
0362:  MOVWF  0D
0363:  MOVLW  00
0364:  MOVWF  0F
0365:  BCF    03.6
0366:  CALL   1F5
....................     }  
....................  
....................     // 4. Seçenek 
....................     if (Index_OptionMenu == 3) { 
0367:  MOVF   41,W
0368:  SUBLW  03
0369:  BTFSS  03.2
036A:  GOTO   382
....................         lcd_gotoxy(1, 1); 
036B:  MOVLW  01
036C:  MOVWF  6D
036D:  MOVWF  6E
036E:  CALL   1B7
....................         printf(lcd_putc, "4-Cila Islem <-"); 
036F:  MOVLW  AD
0370:  BSF    03.6
0371:  MOVWF  0D
0372:  MOVLW  00
0373:  MOVWF  0F
0374:  BCF    03.6
0375:  CALL   1F5
....................         lcd_gotoxy(1, 2); 
0376:  MOVLW  01
0377:  MOVWF  6D
0378:  MOVLW  02
0379:  MOVWF  6E
037A:  CALL   1B7
....................         printf(lcd_putc, "5-Kayit Islem");     
037B:  MOVLW  B5
037C:  BSF    03.6
037D:  MOVWF  0D
037E:  MOVLW  00
037F:  MOVWF  0F
0380:  BCF    03.6
0381:  CALL   1F5
....................     } 
....................      
....................     // 5. Seçenek 
....................     if (Index_OptionMenu == 4) { 
0382:  MOVF   41,W
0383:  SUBLW  04
0384:  BTFSS  03.2
0385:  GOTO   391
....................         lcd_gotoxy(1, 1); 
0386:  MOVLW  01
0387:  MOVWF  6D
0388:  MOVWF  6E
0389:  CALL   1B7
....................         printf(lcd_putc, "5-Kayit Islem <-");  
038A:  MOVLW  BC
038B:  BSF    03.6
038C:  MOVWF  0D
038D:  MOVLW  00
038E:  MOVWF  0F
038F:  BCF    03.6
0390:  CALL   1F5
....................     } 
0391:  BCF    0A.3
0392:  BCF    0A.4
0393:  GOTO   641 (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Function-3 
.................... void NavigateTimeMoneyPreferenceMenu(void){ 
....................     
....................    printf(lcd_putc, "\f");  
*
0480:  MOVLW  0C
0481:  MOVWF  6C
0482:  CALL   1C9
....................    lcd_gotoxy(1,1); 
0483:  MOVLW  01
0484:  MOVWF  6D
0485:  MOVWF  6E
0486:  CALL   1B7
....................    printf(lcd_putc, "Ucret:%d tl",Index_TimeMoneyPreference*2+2); 
0487:  BCF    03.0
0488:  RLF    42,W
0489:  ADDLW  02
048A:  MOVWF  61
048B:  MOVLW  C5
048C:  BSF    03.6
048D:  MOVWF  0D
048E:  MOVLW  00
048F:  MOVWF  0F
0490:  BCF    03.0
0491:  MOVLW  06
0492:  BCF    03.6
0493:  MOVWF  63
0494:  CALL   394
0495:  MOVF   61,W
0496:  MOVWF  62
0497:  MOVLW  18
0498:  MOVWF  63
*
04EF:  MOVLW  20
04F0:  MOVWF  6C
04F1:  CALL   1C9
04F2:  MOVLW  74
04F3:  MOVWF  6C
04F4:  CALL   1C9
04F5:  MOVLW  6C
04F6:  MOVWF  6C
04F7:  CALL   1C9
....................    lcd_gotoxy(1,2); 
04F8:  MOVLW  01
04F9:  MOVWF  6D
04FA:  MOVLW  02
04FB:  MOVWF  6E
04FC:  CALL   1B7
....................    printf(lcd_putc, "Sure:%ld",time_arr[Index_TimeMoneyPreference]); 
04FD:  BCF    03.0
04FE:  RLF    42,W
04FF:  ADDLW  47
0500:  MOVWF  04
0501:  BCF    03.7
0502:  INCF   04,F
0503:  MOVF   00,W
0504:  MOVWF  62
0505:  DECF   04,F
0506:  MOVF   00,W
0507:  MOVWF  61
0508:  MOVLW  CB
0509:  BSF    03.6
050A:  MOVWF  0D
050B:  MOVLW  00
050C:  MOVWF  0F
050D:  BCF    03.0
050E:  MOVLW  05
050F:  BCF    03.6
0510:  MOVWF  63
0511:  CALL   394
0512:  MOVLW  10
0513:  MOVWF  04
0514:  MOVF   62,W
0515:  MOVWF  64
0516:  MOVF   61,W
0517:  MOVWF  63
0518:  CALL   400
....................    lcd_gotoxy(10,2); 
0519:  MOVLW  0A
051A:  MOVWF  6D
051B:  MOVLW  02
051C:  MOVWF  6E
051D:  CALL   1B7
....................    printf(lcd_putc, "Sec:"); 
051E:  MOVLW  D0
051F:  BSF    03.6
0520:  MOVWF  0D
0521:  MOVLW  00
0522:  MOVWF  0F
0523:  BCF    03.6
0524:  CALL   1F5
....................    lcd_gotoxy(14,2); 
0525:  MOVLW  0E
0526:  MOVWF  6D
0527:  MOVLW  02
0528:  MOVWF  6E
0529:  CALL   1B7
....................    printf(lcd_putc, "%c",SelectionState); 
052A:  MOVF   2F,W
052B:  MOVWF  6C
052C:  CALL   1C9
....................     
....................     
....................    if(input(button_Select) == 1){ 
052D:  BSF    03.5
052E:  BSF    05.5
052F:  BCF    03.5
0530:  BTFSS  05.5
0531:  GOTO   5AD
....................       SelectionState = 'X'; 
0532:  MOVLW  58
0533:  MOVWF  2F
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 0){ 
0534:  MOVF   41,F
0535:  BTFSS  03.2
0536:  GOTO   55C
....................          MikroClient[ClientNumber].time_Foaming = time_arr[Index_TimeMoneyPreference]; 
0537:  RLF    40,W
0538:  MOVWF  77
0539:  RLF    77,F
053A:  RLF    77,F
053B:  MOVLW  F8
053C:  ANDWF  77,F
053D:  MOVF   77,W
053E:  ADDLW  30
053F:  MOVWF  78
0540:  CLRF   7A
0541:  BTFSC  03.0
0542:  INCF   7A,F
0543:  MOVF   7A,W
0544:  MOVWF  62
0545:  BCF    03.0
0546:  RLF    42,W
0547:  ADDLW  47
0548:  MOVWF  04
0549:  BCF    03.7
054A:  INCF   04,F
054B:  MOVF   00,W
054C:  MOVWF  7A
054D:  DECF   04,F
054E:  MOVF   00,W
054F:  MOVWF  63
0550:  MOVF   78,W
0551:  MOVWF  04
0552:  BCF    03.7
0553:  BTFSC  62.0
0554:  BSF    03.7
0555:  INCF   04,F
0556:  MOVF   7A,W
0557:  MOVWF  00
0558:  DECF   04,F
0559:  MOVF   63,W
055A:  MOVWF  00
....................       } 
055B:  GOTO   5AD
....................       else if(Index_OptionMenu == 1){ 
055C:  DECFSZ 41,W
055D:  GOTO   584
....................          MikroClient[ClientNumber].time_Washing = time_arr[Index_TimeMoneyPreference]; 
055E:  RLF    40,W
055F:  MOVWF  77
0560:  RLF    77,F
0561:  RLF    77,F
0562:  MOVLW  F8
0563:  ANDWF  77,F
0564:  MOVF   77,W
0565:  ADDLW  02
0566:  ADDLW  30
0567:  MOVWF  78
0568:  CLRF   7A
0569:  BTFSC  03.0
056A:  INCF   7A,F
056B:  MOVF   7A,W
056C:  MOVWF  62
056D:  BCF    03.0
056E:  RLF    42,W
056F:  ADDLW  47
0570:  MOVWF  04
0571:  BCF    03.7
0572:  INCF   04,F
0573:  MOVF   00,W
0574:  MOVWF  7A
0575:  DECF   04,F
0576:  MOVF   00,W
0577:  MOVWF  63
0578:  MOVF   78,W
0579:  MOVWF  04
057A:  BCF    03.7
057B:  BTFSC  62.0
057C:  BSF    03.7
057D:  INCF   04,F
057E:  MOVF   7A,W
057F:  MOVWF  00
0580:  DECF   04,F
0581:  MOVF   63,W
0582:  MOVWF  00
....................       } 
0583:  GOTO   5AD
....................       else if(Index_OptionMenu == 2){ 
0584:  MOVF   41,W
0585:  SUBLW  02
0586:  BTFSS  03.2
0587:  GOTO   5AD
....................          MikroClient[ClientNumber].time_Ventilation = time_arr[Index_TimeMoneyPreference]; 
0588:  RLF    40,W
0589:  MOVWF  77
058A:  RLF    77,F
058B:  RLF    77,F
058C:  MOVLW  F8
058D:  ANDWF  77,F
058E:  MOVF   77,W
058F:  ADDLW  04
0590:  ADDLW  30
0591:  MOVWF  78
0592:  CLRF   7A
0593:  BTFSC  03.0
0594:  INCF   7A,F
0595:  MOVF   7A,W
0596:  MOVWF  62
0597:  BCF    03.0
0598:  RLF    42,W
0599:  ADDLW  47
059A:  MOVWF  04
059B:  BCF    03.7
059C:  INCF   04,F
059D:  MOVF   00,W
059E:  MOVWF  7A
059F:  DECF   04,F
05A0:  MOVF   00,W
05A1:  MOVWF  63
05A2:  MOVF   78,W
05A3:  MOVWF  04
05A4:  BCF    03.7
05A5:  BTFSC  62.0
05A6:  BSF    03.7
05A7:  INCF   04,F
05A8:  MOVF   7A,W
05A9:  MOVWF  00
05AA:  DECF   04,F
05AB:  MOVF   63,W
05AC:  MOVWF  00
....................       } 
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
05AD:  BSF    2B.0
05AE:  MOVF   2B,W
05AF:  BSF    03.5
05B0:  MOVWF  07
05B1:  BCF    03.5
05B2:  BTFSS  07.0
05B3:  GOTO   5B6
....................       SelectionState = ' '; 
05B4:  MOVLW  20
05B5:  MOVWF  2F
....................    } 
....................     
....................    delay_ms(80); 
05B6:  MOVLW  50
05B7:  MOVWF  6D
05B8:  CALL   0EA
05B9:  BCF    0A.3
05BA:  BCF    0A.4
05BB:  GOTO   674 (RETURN)
.................... } 
....................  
.................... /* ======== -END- LCD SCREEN FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- UART PROTOCOL FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief : This function checks the `readed_ID` variable to determine  
....................  *         the action to take based on predefined identifiers. Depending on the identifier, 
....................  *         it displays a welcome message for specific users or sets the system to an idle state. 
....................  */ 
.................... void SubSystem_uart_CheckTheMessage(void){ 
....................     
....................    if(readed_ID == '+'){      //Mr. Selçuk's ID 
*
0294:  MOVF   2C,W
0295:  SUBLW  2B
0296:  BTFSS  03.2
0297:  GOTO   2B4
....................       ClientNumber = 0;       //System works for Mr. Selcuk 
0298:  CLRF   40
....................       lcd_gotoxy(4,1); 
0299:  MOVLW  04
029A:  MOVWF  6D
029B:  MOVLW  01
029C:  MOVWF  6E
029D:  CALL   1B7
....................       printf(lcd_putc,"Hosgeldiniz"); 
029E:  MOVLW  D3
029F:  BSF    03.6
02A0:  MOVWF  0D
02A1:  MOVLW  00
02A2:  MOVWF  0F
02A3:  BCF    03.6
02A4:  CALL   1F5
....................       lcd_gotoxy(4,2); 
02A5:  MOVLW  04
02A6:  MOVWF  6D
02A7:  MOVLW  02
02A8:  MOVWF  6E
02A9:  CALL   1B7
....................       printf(lcd_putc,"Selcuk Bey"); 
02AA:  MOVLW  D9
02AB:  BSF    03.6
02AC:  MOVWF  0D
02AD:  MOVLW  00
02AE:  MOVWF  0F
02AF:  BCF    03.6
02B0:  CALL   1F5
....................       systemLock = 1; 
02B1:  MOVLW  01
02B2:  MOVWF  2D
....................    } 
02B3:  GOTO   2D9
....................    else if(readed_ID == '*'){ //Mr. Emre's ID 
02B4:  MOVF   2C,W
02B5:  SUBLW  2A
02B6:  BTFSS  03.2
02B7:  GOTO   2D5
....................       ClientNumber = 1;       //System works for Mr. Emre 
02B8:  MOVLW  01
02B9:  MOVWF  40
....................       lcd_gotoxy(4,1); 
02BA:  MOVLW  04
02BB:  MOVWF  6D
02BC:  MOVLW  01
02BD:  MOVWF  6E
02BE:  CALL   1B7
....................       printf(lcd_putc,"Hosgeldiniz"); 
02BF:  MOVLW  DF
02C0:  BSF    03.6
02C1:  MOVWF  0D
02C2:  MOVLW  00
02C3:  MOVWF  0F
02C4:  BCF    03.6
02C5:  CALL   1F5
....................       lcd_gotoxy(4,2); 
02C6:  MOVLW  04
02C7:  MOVWF  6D
02C8:  MOVLW  02
02C9:  MOVWF  6E
02CA:  CALL   1B7
....................       printf(lcd_putc,"Emre Bey"); 
02CB:  MOVLW  E5
02CC:  BSF    03.6
02CD:  MOVWF  0D
02CE:  MOVLW  00
02CF:  MOVWF  0F
02D0:  BCF    03.6
02D1:  CALL   1F5
....................       systemLock = 1; 
02D2:  MOVLW  01
02D3:  MOVWF  2D
....................    } 
02D4:  GOTO   2D9
....................    else if(readed_ID == '.'){ //Slave pic is idle status 
02D5:  MOVF   2C,W
02D6:  SUBLW  2E
02D7:  BTFSC  03.2
....................        systemLock = 0; 
02D8:  CLRF   2D
....................    } 
02D9:  BCF    0A.3
02DA:  BCF    0A.4
02DB:  GOTO   60C (RETURN)
....................  
.................... } 
.................... /* ======== -END- UART PROTOCOL FUNCTIONS -END- ======== */ 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
