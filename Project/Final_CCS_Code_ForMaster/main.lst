CCS PCM C Compiler, Version 5.049, 5967               30-Ara-24 20:28

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Final_CCS_Code_ForMaster\main.lst

               ROM used:   4888 words (60%)
                           Largest free fragment is 2048
               RAM used:   131 (36%) at main() level
                           152 (41%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   050
002B:  BTFSS  0B.5
002C:  GOTO   02F
002D:  BTFSC  0B.2
002E:  GOTO   053
002F:  MOVF   22,W
0030:  MOVWF  04
0031:  MOVF   23,W
0032:  MOVWF  77
0033:  MOVF   24,W
0034:  MOVWF  78
0035:  MOVF   25,W
0036:  MOVWF  79
0037:  MOVF   26,W
0038:  MOVWF  7A
0039:  MOVF   27,W
003A:  BSF    03.6
003B:  MOVWF  0D
003C:  BCF    03.6
003D:  MOVF   28,W
003E:  BSF    03.6
003F:  MOVWF  0F
0040:  BCF    03.6
0041:  MOVF   29,W
0042:  BSF    03.6
0043:  MOVWF  0C
0044:  BCF    03.6
0045:  MOVF   2A,W
0046:  BSF    03.6
0047:  MOVWF  0E
0048:  BCF    03.6
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   056
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   05D
.................... //Ister bisiklet ol ister tir, ne olursan ol yine gel 
....................  
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
008B:  DATA 4F,38
008C:  DATA 65,39
008D:  DATA E1,39
008E:  DATA F9,37
008F:  DATA 6E,00
0090:  DATA C2,30
0091:  DATA 73,36
0092:  DATA 61,3A
0093:  DATA 69,36
0094:  DATA E4,34
0095:  DATA 00,00
0096:  DATA CD,34
0097:  DATA 6B,39
0098:  DATA 6F,36
0099:  DATA E5,3A
009A:  DATA ED,13
009B:  DATA 61,00
009C:  DATA C8,37
009D:  DATA F3,33
009E:  DATA 65,36
009F:  DATA E4,34
00A0:  DATA EE,34
00A1:  DATA 7A,00
00A2:  DATA CC,3A
00A3:  DATA 74,33
00A4:  DATA 65,37
00A5:  DATA A0,29
00A6:  DATA 69,33
00A7:  DATA F2,32
00A8:  DATA EE,34
00A9:  DATA FA,34
00AA:  DATA 00,01
00AB:  DATA C7,34
00AC:  DATA F2,34
00AD:  DATA EE,34
00AE:  DATA 7A,00
00AF:  DATA B1,16
00B0:  DATA CB,37
00B1:  DATA F0,3A
00B2:  DATA 6B,10
00B3:  DATA C9,39
00B4:  DATA EC,32
00B5:  DATA 6D,10
00B6:  DATA BC,16
00B7:  DATA 00,01
00B8:  DATA B2,16
00B9:  DATA D3,3A
00BA:  DATA A0,24
00BB:  DATA 73,36
00BC:  DATA E5,36
00BD:  DATA 00,01
00BE:  DATA B2,16
00BF:  DATA D3,3A
00C0:  DATA A0,24
00C1:  DATA 73,36
00C2:  DATA E5,36
00C3:  DATA 20,1E
00C4:  DATA 2D,00
00C5:  DATA B3,16
00C6:  DATA C8,30
00C7:  DATA F6,30
00C8:  DATA A0,24
00C9:  DATA 73,36
00CA:  DATA E5,36
00CB:  DATA 00,01
00CC:  DATA B3,16
00CD:  DATA C8,30
00CE:  DATA F6,30
00CF:  DATA A0,24
00D0:  DATA 73,36
00D1:  DATA E5,36
00D2:  DATA 20,1E
00D3:  DATA 2D,00
00D4:  DATA B4,16
00D5:  DATA C3,34
00D6:  DATA EC,30
00D7:  DATA A0,24
00D8:  DATA 73,36
00D9:  DATA E5,36
00DA:  DATA 00,01
00DB:  DATA B4,16
00DC:  DATA C3,34
00DD:  DATA EC,30
00DE:  DATA A0,24
00DF:  DATA 73,36
00E0:  DATA E5,36
00E1:  DATA 20,1E
00E2:  DATA 2D,00
00E3:  DATA B5,16
00E4:  DATA CB,30
00E5:  DATA F9,34
00E6:  DATA 74,10
00E7:  DATA C9,39
00E8:  DATA EC,32
00E9:  DATA 6D,00
00EA:  DATA B5,16
00EB:  DATA CB,30
00EC:  DATA F9,34
00ED:  DATA 74,10
00EE:  DATA C9,39
00EF:  DATA EC,32
00F0:  DATA 6D,10
00F1:  DATA BC,16
00F2:  DATA 00,00
00F3:  DATA D5,31
00F4:  DATA F2,32
00F5:  DATA 74,1D
00F6:  DATA 25,32
00F7:  DATA 20,3A
00F8:  DATA 6C,00
00F9:  DATA D3,3A
00FA:  DATA F2,32
00FB:  DATA BA,12
00FC:  DATA 6C,32
00FD:  DATA 00,00
00FE:  DATA D3,32
00FF:  DATA 63,1D
0100:  DATA 00,01
0101:  DATA D5,31
0102:  DATA F2,32
0103:  DATA 74,1D
0104:  DATA 25,36
0105:  DATA 64,10
0106:  DATA 74,36
0107:  DATA 00,01
0108:  DATA D3,32
0109:  DATA 63,1D
010A:  DATA 00,01
010B:  DATA C9,39
010C:  DATA EC,32
010D:  DATA 6D,10
010E:  DATA 2D,10
010F:  DATA 31,10
0110:  DATA BC,16
0111:  DATA 00,01
0112:  DATA C9,39
0113:  DATA EC,32
0114:  DATA 6D,10
0115:  DATA 2D,10
0116:  DATA 32,00
0117:  DATA C9,39
0118:  DATA EC,32
0119:  DATA 6D,10
011A:  DATA 2D,10
011B:  DATA 32,10
011C:  DATA BC,16
011D:  DATA 00,01
011E:  DATA C9,39
011F:  DATA EC,32
0120:  DATA 6D,10
0121:  DATA 2D,10
0122:  DATA 33,00
0123:  DATA C9,39
0124:  DATA EC,32
0125:  DATA 6D,10
0126:  DATA 2D,10
0127:  DATA 33,10
0128:  DATA BC,16
0129:  DATA 00,01
012A:  DATA C9,39
012B:  DATA EC,32
012C:  DATA 6D,10
012D:  DATA 2D,10
012E:  DATA 34,00
012F:  DATA C9,39
0130:  DATA EC,32
0131:  DATA 6D,10
0132:  DATA 2D,10
0133:  DATA 34,10
0134:  DATA BC,16
0135:  DATA 00,01
0136:  DATA C9,39
0137:  DATA EC,32
0138:  DATA 6D,10
0139:  DATA 2D,10
013A:  DATA 35,00
013B:  DATA C9,39
013C:  DATA EC,32
013D:  DATA 6D,10
013E:  DATA 2D,10
013F:  DATA 35,10
0140:  DATA BC,16
0141:  DATA 00,00
0142:  DATA 43,26
0143:  DATA CF,29
0144:  DATA 49,27
0145:  DATA 47,00
0146:  DATA CB,37
0147:  DATA F0,3A
0148:  DATA 6B,1D
0149:  DATA 25,36
014A:  DATA 64,00
014B:  DATA D3,3A
014C:  DATA 3A,1D
014D:  DATA 25,36
014E:  DATA 64,00
014F:  DATA C8,30
0150:  DATA F6,30
0151:  DATA BA,12
0152:  DATA 6C,32
0153:  DATA 00,01
0154:  DATA C3,34
0155:  DATA EC,30
0156:  DATA BA,12
0157:  DATA 6C,32
0158:  DATA 00,00
0159:  DATA C8,37
015A:  DATA F3,33
015B:  DATA 65,36
015C:  DATA E4,34
015D:  DATA EE,34
015E:  DATA 7A,00
015F:  DATA D3,32
0160:  DATA EC,31
0161:  DATA F5,35
0162:  DATA 20,21
0163:  DATA E5,3C
0164:  DATA 00,01
0165:  DATA C8,37
0166:  DATA F3,33
0167:  DATA 65,36
0168:  DATA E4,34
0169:  DATA EE,34
016A:  DATA 7A,00
016B:  DATA C5,36
016C:  DATA F2,32
016D:  DATA 20,21
016E:  DATA E5,3C
016F:  DATA 00,00
0170:  DATA A0,2B
0171:  DATA 3A,10
0172:  DATA 25,32
0173:  DATA 20,2A
0174:  DATA 4C,00
0175:  DATA 20,28
0176:  DATA 3A,10
0177:  DATA 25,32
0178:  DATA 20,2A
0179:  DATA 4C,00
017A:  DATA 4F,38
017B:  DATA 65,39
017C:  DATA E1,39
017D:  DATA F9,37
017E:  DATA 6E,10
017F:  DATA D3,37
0180:  DATA EE,3A
0181:  DATA 00,01
0182:  DATA C9,39
0183:  DATA EC,32
0184:  DATA 6D,36
0185:  DATA 65,39
0186:  DATA 69,37
0187:  DATA 69,3D
0188:  DATA 00,01
0189:  DATA CB,30
018A:  DATA 79,32
018B:  DATA 65,32
018C:  DATA 69,36
018D:  DATA E9,3C
018E:  DATA 6F,39
018F:  DATA 00,01
0190:  DATA CB,30
0191:  DATA F9,34
0192:  DATA 74,36
0193:  DATA 61,39
0194:  DATA 00,01
0195:  DATA D4,30
0196:  DATA ED,30
0197:  DATA 6D,36
0198:  DATA 61,37
0199:  DATA E4,34
019A:  DATA 00,01
019B:  DATA D3,30
019C:  DATA 67,36
019D:  DATA E9,31
019E:  DATA E1,35
019F:  DATA EC,30
01A0:  DATA 00,01
01A1:  DATA CB,30
01A2:  DATA EC,34
01A3:  DATA EE,34
01A4:  DATA 7A,00
*
02E7:  MOVF   0B,W
02E8:  BSF    03.5
02E9:  MOVWF  41
02EA:  BCF    03.5
02EB:  BCF    0B.7
02EC:  BSF    03.5
02ED:  BSF    03.6
02EE:  BSF    0C.7
02EF:  BSF    0C.0
02F0:  NOP
02F1:  NOP
02F2:  BCF    03.6
02F3:  BTFSS  41.7
02F4:  GOTO   2F8
02F5:  BCF    03.5
02F6:  BSF    0B.7
02F7:  BSF    03.5
02F8:  BCF    03.5
02F9:  BSF    03.6
02FA:  MOVF   0C,W
02FB:  ANDLW  7F
02FC:  BTFSC  03.2
02FD:  GOTO   359
02FE:  BSF    03.5
02FF:  BCF    03.6
0300:  MOVWF  41
0301:  BCF    03.5
0302:  BSF    03.6
0303:  MOVF   0D,W
0304:  BSF    03.5
0305:  BCF    03.6
0306:  MOVWF  42
0307:  BCF    03.5
0308:  BSF    03.6
0309:  MOVF   0F,W
030A:  BSF    03.5
030B:  BCF    03.6
030C:  MOVWF  43
030D:  MOVF   41,W
030E:  MOVWF  4C
030F:  BCF    03.5
0310:  CALL   2AD
0311:  BSF    03.5
0312:  MOVF   42,W
0313:  BCF    03.5
0314:  BSF    03.6
0315:  MOVWF  0D
0316:  BSF    03.5
0317:  BCF    03.6
0318:  MOVF   43,W
0319:  BCF    03.5
031A:  BSF    03.6
031B:  MOVWF  0F
031C:  BCF    03.6
031D:  MOVF   0B,W
031E:  BSF    03.5
031F:  MOVWF  44
0320:  BCF    03.5
0321:  BCF    0B.7
0322:  BSF    03.5
0323:  BSF    03.6
0324:  BSF    0C.7
0325:  BSF    0C.0
0326:  NOP
0327:  NOP
0328:  BCF    03.6
0329:  BTFSS  44.7
032A:  GOTO   32E
032B:  BCF    03.5
032C:  BSF    0B.7
032D:  BSF    03.5
032E:  BCF    03.5
032F:  BSF    03.6
0330:  RLF    0C,W
0331:  RLF    0E,W
0332:  ANDLW  7F
0333:  BTFSC  03.2
0334:  GOTO   359
0335:  BSF    03.5
0336:  BCF    03.6
0337:  MOVWF  41
0338:  BCF    03.5
0339:  BSF    03.6
033A:  MOVF   0D,W
033B:  BSF    03.5
033C:  BCF    03.6
033D:  MOVWF  42
033E:  BCF    03.5
033F:  BSF    03.6
0340:  MOVF   0F,W
0341:  BSF    03.5
0342:  BCF    03.6
0343:  MOVWF  43
0344:  MOVF   41,W
0345:  MOVWF  4C
0346:  BCF    03.5
0347:  CALL   2AD
0348:  BSF    03.5
0349:  MOVF   42,W
034A:  BCF    03.5
034B:  BSF    03.6
034C:  MOVWF  0D
034D:  BSF    03.5
034E:  BCF    03.6
034F:  MOVF   43,W
0350:  BCF    03.5
0351:  BSF    03.6
0352:  MOVWF  0F
0353:  INCF   0D,F
0354:  BTFSC  03.2
0355:  INCF   0F,F
0356:  BCF    03.6
0357:  GOTO   2E7
0358:  BSF    03.6
0359:  BCF    03.6
035A:  RETURN
*
0406:  MOVLW  10
0407:  BSF    03.5
0408:  MOVWF  49
0409:  CLRF   77
040A:  CLRF   7A
040B:  RRF    46,F
040C:  RRF    45,F
040D:  BTFSS  03.0
040E:  GOTO   415
040F:  MOVF   47,W
0410:  ADDWF  77,F
0411:  BTFSC  03.0
0412:  INCF   7A,F
0413:  MOVF   48,W
0414:  ADDWF  7A,F
0415:  RRF    7A,F
0416:  RRF    77,F
0417:  RRF    79,F
0418:  RRF    78,F
0419:  DECFSZ 49,F
041A:  GOTO   40B
041B:  BCF    03.5
041C:  RETURN
041D:  CLRF   78
041E:  CLRF   79
041F:  CLRF   77
0420:  CLRF   7A
0421:  BSF    03.5
0422:  MOVF   46,W
0423:  BTFSS  03.2
0424:  GOTO   428
0425:  MOVF   45,W
0426:  BTFSC  03.2
0427:  GOTO   442
0428:  MOVLW  10
0429:  MOVWF  47
042A:  BCF    03.0
042B:  RLF    43,F
042C:  RLF    44,F
042D:  RLF    77,F
042E:  RLF    7A,F
042F:  MOVF   46,W
0430:  SUBWF  7A,W
0431:  BTFSS  03.2
0432:  GOTO   435
0433:  MOVF   45,W
0434:  SUBWF  77,W
0435:  BTFSS  03.0
0436:  GOTO   43E
0437:  MOVF   45,W
0438:  SUBWF  77,F
0439:  BTFSS  03.0
043A:  DECF   7A,F
043B:  MOVF   46,W
043C:  SUBWF  7A,F
043D:  BSF    03.0
043E:  RLF    78,F
043F:  RLF    79,F
0440:  DECFSZ 47,F
0441:  GOTO   42A
0442:  BCF    03.5
0443:  RETURN
*
04D6:  MOVF   0B,W
04D7:  BSF    03.5
04D8:  MOVWF  44
04D9:  BCF    03.5
04DA:  BCF    0B.7
04DB:  BSF    03.5
04DC:  BSF    03.6
04DD:  BSF    0C.7
04DE:  BSF    0C.0
04DF:  NOP
04E0:  NOP
04E1:  BCF    03.6
04E2:  BTFSS  44.7
04E3:  GOTO   4E7
04E4:  BCF    03.5
04E5:  BSF    0B.7
04E6:  BSF    03.5
04E7:  BTFSC  03.0
04E8:  GOTO   520
04E9:  BCF    03.5
04EA:  BSF    03.6
04EB:  MOVF   0C,W
04EC:  ANDLW  7F
04ED:  BSF    03.5
04EE:  BCF    03.6
04EF:  MOVWF  44
04F0:  BCF    03.5
04F1:  BSF    03.6
04F2:  MOVF   0D,W
04F3:  BSF    03.5
04F4:  BCF    03.6
04F5:  MOVWF  45
04F6:  BCF    03.5
04F7:  BSF    03.6
04F8:  MOVF   0F,W
04F9:  BSF    03.5
04FA:  BCF    03.6
04FB:  MOVWF  46
04FC:  MOVF   44,W
04FD:  MOVWF  4C
04FE:  BCF    03.5
04FF:  CALL   2AD
0500:  BSF    03.5
0501:  MOVF   45,W
0502:  BCF    03.5
0503:  BSF    03.6
0504:  MOVWF  0D
0505:  BSF    03.5
0506:  BCF    03.6
0507:  MOVF   46,W
0508:  BCF    03.5
0509:  BSF    03.6
050A:  MOVWF  0F
050B:  BCF    03.6
050C:  MOVF   0B,W
050D:  BSF    03.5
050E:  MOVWF  47
050F:  BCF    03.5
0510:  BCF    0B.7
0511:  BSF    03.5
0512:  BSF    03.6
0513:  BSF    0C.7
0514:  BSF    0C.0
0515:  NOP
0516:  NOP
0517:  BCF    03.6
0518:  BTFSS  47.7
0519:  GOTO   51D
051A:  BCF    03.5
051B:  BSF    0B.7
051C:  BSF    03.5
051D:  DECFSZ 43,F
051E:  GOTO   520
051F:  GOTO   54E
0520:  BCF    03.5
0521:  BSF    03.6
0522:  RLF    0C,W
0523:  RLF    0E,W
0524:  ANDLW  7F
0525:  BSF    03.5
0526:  BCF    03.6
0527:  MOVWF  44
0528:  BCF    03.5
0529:  BSF    03.6
052A:  MOVF   0D,W
052B:  BSF    03.5
052C:  BCF    03.6
052D:  MOVWF  45
052E:  BCF    03.5
052F:  BSF    03.6
0530:  MOVF   0F,W
0531:  BSF    03.5
0532:  BCF    03.6
0533:  MOVWF  46
0534:  MOVF   44,W
0535:  MOVWF  4C
0536:  BCF    03.5
0537:  CALL   2AD
0538:  BSF    03.5
0539:  MOVF   45,W
053A:  BCF    03.5
053B:  BSF    03.6
053C:  MOVWF  0D
053D:  BSF    03.5
053E:  BCF    03.6
053F:  MOVF   46,W
0540:  BCF    03.5
0541:  BSF    03.6
0542:  MOVWF  0F
0543:  INCF   0D,F
0544:  BTFSC  03.2
0545:  INCF   0F,F
0546:  BCF    03.0
0547:  BSF    03.5
0548:  BCF    03.6
0549:  DECFSZ 43,F
054A:  GOTO   54C
054B:  GOTO   54E
054C:  BCF    03.5
054D:  GOTO   4D6
054E:  BCF    03.5
054F:  RETURN
0550:  BSF    03.5
0551:  MOVF   49,W
0552:  CLRF   78
0553:  SUBWF  48,W
0554:  BTFSC  03.0
0555:  GOTO   559
0556:  MOVF   48,W
0557:  MOVWF  77
0558:  GOTO   565
0559:  CLRF   77
055A:  MOVLW  08
055B:  MOVWF  4A
055C:  RLF    48,F
055D:  RLF    77,F
055E:  MOVF   49,W
055F:  SUBWF  77,W
0560:  BTFSC  03.0
0561:  MOVWF  77
0562:  RLF    78,F
0563:  DECFSZ 4A,F
0564:  GOTO   55C
0565:  BCF    03.5
0566:  RETURN
0567:  MOVLW  20
0568:  BSF    03.5
0569:  BTFSS  43.4
056A:  MOVLW  30
056B:  MOVWF  44
056C:  MOVF   42,W
056D:  MOVWF  77
056E:  BTFSS  42.7
056F:  GOTO   578
0570:  COMF   77,F
0571:  INCF   77,F
0572:  MOVF   77,W
0573:  MOVWF  42
0574:  MOVLW  2D
0575:  MOVWF  44
0576:  BSF    43.7
0577:  BSF    43.0
0578:  MOVF   42,W
0579:  MOVWF  48
057A:  MOVLW  64
057B:  MOVWF  49
057C:  BCF    03.5
057D:  CALL   550
057E:  MOVF   77,W
057F:  BSF    03.5
0580:  MOVWF  42
0581:  MOVLW  30
0582:  ADDWF  78,W
0583:  MOVWF  45
0584:  MOVF   42,W
0585:  MOVWF  48
0586:  MOVLW  0A
0587:  MOVWF  49
0588:  BCF    03.5
0589:  CALL   550
058A:  MOVLW  30
058B:  ADDWF  77,W
058C:  BSF    03.5
058D:  MOVWF  47
058E:  MOVLW  30
058F:  ADDWF  78,W
0590:  MOVWF  46
0591:  MOVF   44,W
0592:  MOVWF  77
0593:  MOVLW  30
0594:  SUBWF  45,W
0595:  BTFSC  03.2
0596:  GOTO   59B
0597:  BSF    43.1
0598:  BTFSC  43.7
0599:  BSF    43.2
059A:  GOTO   5AF
059B:  MOVF   44,W
059C:  MOVWF  45
059D:  MOVLW  20
059E:  MOVWF  44
059F:  MOVLW  30
05A0:  SUBWF  46,W
05A1:  BTFSC  03.2
05A2:  GOTO   5A7
05A3:  BSF    43.0
05A4:  BTFSC  43.7
05A5:  BSF    43.1
05A6:  GOTO   5AF
05A7:  BTFSS  03.2
05A8:  BSF    43.0
05A9:  BTFSS  03.2
05AA:  GOTO   5AF
05AB:  MOVF   45,W
05AC:  MOVWF  46
05AD:  MOVLW  20
05AE:  MOVWF  45
05AF:  BTFSC  43.2
05B0:  GOTO   5B6
05B1:  BTFSC  43.1
05B2:  GOTO   5BB
05B3:  BTFSC  43.0
05B4:  GOTO   5C0
05B5:  GOTO   5C5
05B6:  MOVF   44,W
05B7:  MOVWF  4C
05B8:  BCF    03.5
05B9:  CALL   2AD
05BA:  BSF    03.5
05BB:  MOVF   45,W
05BC:  MOVWF  4C
05BD:  BCF    03.5
05BE:  CALL   2AD
05BF:  BSF    03.5
05C0:  MOVF   46,W
05C1:  MOVWF  4C
05C2:  BCF    03.5
05C3:  CALL   2AD
05C4:  BSF    03.5
05C5:  MOVF   47,W
05C6:  MOVWF  4C
05C7:  BCF    03.5
05C8:  CALL   2AD
05C9:  RETURN
05CA:  BSF    03.5
05CB:  CLRF   4B
05CC:  MOVF   04,W
05CD:  MOVWF  4A
05CE:  BCF    4B.0
05CF:  BTFSC  03.7
05D0:  BSF    4B.0
05D1:  BTFSS  44.7
05D2:  GOTO   5DB
05D3:  BSF    4A.7
05D4:  BTFSS  4A.4
05D5:  INCF   4A,F
05D6:  COMF   43,F
05D7:  COMF   44,F
05D8:  INCF   43,F
05D9:  BTFSC  03.2
05DA:  INCF   44,F
05DB:  SWAPF  44,W
05DC:  IORLW  F0
05DD:  MOVWF  46
05DE:  ADDWF  46,F
05DF:  ADDLW  E2
05E0:  MOVWF  47
05E1:  ADDLW  32
05E2:  MOVWF  49
05E3:  MOVF   44,W
05E4:  ANDLW  0F
05E5:  ADDWF  47,F
05E6:  ADDWF  47,F
05E7:  ADDWF  49,F
05E8:  ADDLW  E9
05E9:  MOVWF  48
05EA:  ADDWF  48,F
05EB:  ADDWF  48,F
05EC:  SWAPF  43,W
05ED:  ANDLW  0F
05EE:  ADDWF  48,F
05EF:  ADDWF  49,F
05F0:  RLF    48,F
05F1:  RLF    49,F
05F2:  COMF   49,F
05F3:  RLF    49,F
05F4:  MOVF   43,W
05F5:  ANDLW  0F
05F6:  ADDWF  49,F
05F7:  RLF    46,F
05F8:  MOVLW  07
05F9:  MOVWF  45
05FA:  MOVLW  0A
05FB:  ADDWF  49,F
05FC:  DECF   48,F
05FD:  BTFSS  03.0
05FE:  GOTO   5FB
05FF:  ADDWF  48,F
0600:  DECF   47,F
0601:  BTFSS  03.0
0602:  GOTO   5FF
0603:  ADDWF  47,F
0604:  DECF   46,F
0605:  BTFSS  03.0
0606:  GOTO   603
0607:  ADDWF  46,F
0608:  DECF   45,F
0609:  BTFSS  03.0
060A:  GOTO   607
060B:  MOVLW  C5
060C:  MOVWF  04
060D:  BCF    03.7
060E:  MOVLW  07
060F:  ANDWF  4A,W
0610:  BCF    4A.6
0611:  DECF   04,F
0612:  ANDWF  4A,W
0613:  BTFSS  03.2
0614:  GOTO   61C
0615:  BTFSC  4A.4
0616:  INCF   04,F
0617:  BTFSC  4A.4
0618:  GOTO   61C
0619:  MOVLW  20
061A:  MOVWF  77
061B:  GOTO   639
061C:  ADDWF  04,F
061D:  MOVLW  C9
061E:  SUBWF  04,W
061F:  BTFSC  03.2
0620:  BSF    4A.6
0621:  MOVF   00,W
0622:  MOVWF  77
0623:  BTFSS  03.2
0624:  GOTO   62D
0625:  BTFSC  4A.6
0626:  GOTO   62D
0627:  BTFSC  4A.4
0628:  GOTO   649
0629:  BTFSC  4A.3
062A:  GOTO   62D
062B:  MOVLW  20
062C:  GOTO   638
062D:  BTFSS  4A.7
062E:  GOTO   635
062F:  MOVLW  2D
0630:  MOVWF  77
0631:  DECF   04,F
0632:  BCF    4A.6
0633:  BCF    4A.7
0634:  GOTO   639
0635:  BSF    4A.3
0636:  BCF    4A.4
0637:  MOVLW  30
0638:  ADDWF  77,F
0639:  CLRF   44
063A:  MOVF   04,W
063B:  MOVWF  43
063C:  BCF    44.0
063D:  BTFSC  03.7
063E:  BSF    44.0
063F:  MOVF   77,W
0640:  MOVWF  4C
0641:  BCF    03.5
0642:  CALL   2AD
0643:  BSF    03.5
0644:  MOVF   43,W
0645:  MOVWF  04
0646:  BCF    03.7
0647:  BTFSC  44.0
0648:  BSF    03.7
0649:  INCF   04,F
064A:  BTFSS  4A.6
064B:  GOTO   61D
064C:  BCF    03.5
064D:  RETURN
*
0789:  MOVLW  8E
078A:  MOVWF  77
078B:  BSF    03.5
078C:  MOVF   42,W
078D:  MOVWF  78
078E:  MOVF   41,W
078F:  MOVWF  79
0790:  CLRF   7A
0791:  MOVF   78,F
0792:  BTFSS  03.2
0793:  GOTO   79E
0794:  MOVF   79,W
0795:  MOVWF  78
0796:  CLRF   79
0797:  MOVLW  08
0798:  SUBWF  77,F
0799:  MOVF   78,F
079A:  BTFSS  03.2
079B:  GOTO   79E
079C:  CLRF   77
079D:  GOTO   7A6
079E:  BCF    03.0
079F:  BTFSC  78.7
07A0:  GOTO   7A5
07A1:  RLF    79,F
07A2:  RLF    78,F
07A3:  DECF   77,F
07A4:  GOTO   79E
07A5:  BCF    78.7
07A6:  BCF    03.5
07A7:  RETURN
07A8:  MOVLW  8E
07A9:  MOVWF  77
07AA:  BSF    03.5
07AB:  MOVF   41,W
07AC:  SUBWF  77,F
07AD:  MOVF   42,W
07AE:  MOVWF  79
07AF:  MOVF   43,W
07B0:  MOVWF  78
07B1:  BSF    79.7
07B2:  MOVF   77,F
07B3:  BTFSC  03.2
07B4:  GOTO   7C0
07B5:  BCF    03.0
07B6:  MOVF   79,F
07B7:  BTFSS  03.2
07B8:  GOTO   7BC
07B9:  MOVF   78,F
07BA:  BTFSC  03.2
07BB:  GOTO   7C0
07BC:  RRF    79,F
07BD:  RRF    78,F
07BE:  DECFSZ 77,F
07BF:  GOTO   7B5
07C0:  BTFSS  42.7
07C1:  GOTO   7C7
07C2:  COMF   78,F
07C3:  COMF   79,F
07C4:  INCF   78,F
07C5:  BTFSC  03.2
07C6:  INCF   79,F
07C7:  BCF    03.5
07C8:  RETURN
*
0B9B:  BSF    03.5
0B9C:  MOVF   41,W
0B9D:  BTFSC  03.2
0B9E:  GOTO   40C
0B9F:  MOVWF  49
0BA0:  MOVF   45,W
0BA1:  BTFSC  03.2
0BA2:  GOTO   40C
0BA3:  ADDWF  49,F
0BA4:  BTFSC  03.0
0BA5:  GOTO   3AD
0BA6:  MOVLW  7F
0BA7:  SUBWF  49,F
0BA8:  BTFSS  03.0
0BA9:  GOTO   40C
0BAA:  BTFSC  03.2
0BAB:  GOTO   40C
0BAC:  GOTO   3B1
0BAD:  MOVLW  81
0BAE:  ADDWF  49,F
0BAF:  BTFSC  03.0
0BB0:  GOTO   40C
0BB1:  MOVF   49,W
0BB2:  MOVWF  77
0BB3:  CLRF   78
0BB4:  CLRF   79
0BB5:  CLRF   7A
0BB6:  MOVF   42,W
0BB7:  MOVWF  4D
0BB8:  BSF    4D.7
0BB9:  MOVF   43,W
0BBA:  MOVWF  4C
0BBB:  MOVF   44,W
0BBC:  MOVWF  4B
0BBD:  MOVLW  18
0BBE:  MOVWF  49
0BBF:  CLRF   4A
0BC0:  BTFSS  4B.0
0BC1:  GOTO   3DA
0BC2:  MOVF   48,W
0BC3:  ADDWF  7A,F
0BC4:  BTFSS  03.0
0BC5:  GOTO   3CC
0BC6:  INCF   79,F
0BC7:  BTFSS  03.2
0BC8:  GOTO   3CC
0BC9:  INCF   78,F
0BCA:  BTFSC  03.2
0BCB:  BSF    4A.7
0BCC:  MOVF   47,W
0BCD:  ADDWF  79,F
0BCE:  BTFSS  03.0
0BCF:  GOTO   3D3
0BD0:  INCF   78,F
0BD1:  BTFSC  03.2
0BD2:  BSF    4A.7
0BD3:  MOVF   46,W
0BD4:  MOVWF  43
0BD5:  BSF    43.7
0BD6:  MOVF   43,W
0BD7:  ADDWF  78,F
0BD8:  BTFSC  03.0
0BD9:  BSF    4A.7
0BDA:  RLF    4A,F
0BDB:  RRF    78,F
0BDC:  RRF    79,F
0BDD:  RRF    7A,F
0BDE:  RRF    4D,F
0BDF:  RRF    4C,F
0BE0:  RRF    4B,F
0BE1:  BCF    03.0
0BE2:  DECFSZ 49,F
0BE3:  GOTO   3BF
0BE4:  MOVLW  01
0BE5:  ADDWF  77,F
0BE6:  BTFSC  03.0
0BE7:  GOTO   40C
0BE8:  BTFSC  78.7
0BE9:  GOTO   3F1
0BEA:  RLF    4D,F
0BEB:  RLF    7A,F
0BEC:  RLF    79,F
0BED:  RLF    78,F
0BEE:  DECF   77,F
0BEF:  BTFSC  03.2
0BF0:  GOTO   40C
0BF1:  BTFSS  4D.7
0BF2:  GOTO   402
0BF3:  INCF   7A,F
0BF4:  BTFSS  03.2
0BF5:  GOTO   402
0BF6:  INCF   79,F
0BF7:  BTFSS  03.2
0BF8:  GOTO   402
0BF9:  INCF   78,F
0BFA:  BTFSS  03.2
0BFB:  GOTO   402
0BFC:  RRF    78,F
0BFD:  RRF    79,F
0BFE:  RRF    7A,F
0BFF:  INCF   77,F
0C00:  BTFSC  03.2
0C01:  GOTO   40C
0C02:  MOVF   42,W
0C03:  MOVWF  4A
0C04:  MOVF   46,W
0C05:  XORWF  4A,F
0C06:  BTFSS  4A.7
0C07:  GOTO   40A
0C08:  BSF    78.7
0C09:  GOTO   410
0C0A:  BCF    78.7
0C0B:  GOTO   410
0C0C:  CLRF   77
0C0D:  CLRF   78
0C0E:  CLRF   79
0C0F:  CLRF   7A
0C10:  BCF    03.5
0C11:  RETURN
....................  
.................... #list 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                  SYSTEM DEVICES                                                */   
.................... /*******************************************************************************************************************/   
....................  
.................... #device ADC = 10 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                  SYSTEM USES                                                   */   
.................... /*******************************************************************************************************************/   
....................  
.................... #use delay(clock=4M)  
*
01A5:  MOVLW  CD
01A6:  MOVWF  04
01A7:  BCF    03.7
01A8:  MOVF   00,W
01A9:  BTFSC  03.2
01AA:  GOTO   1B9
01AB:  MOVLW  01
01AC:  MOVWF  78
01AD:  CLRF   77
01AE:  DECFSZ 77,F
01AF:  GOTO   1AE
01B0:  DECFSZ 78,F
01B1:  GOTO   1AD
01B2:  MOVLW  4A
01B3:  MOVWF  77
01B4:  DECFSZ 77,F
01B5:  GOTO   1B4
01B6:  GOTO   1B7
01B7:  DECFSZ 00,F
01B8:  GOTO   1AB
01B9:  RETURN
.................... #use rs232(baud=9600,parity=N,uart1,bits=8) 
.................... #use fast_io(b) //Includes : The operation cancel button & The pins of the 7-segment display 
.................... #use fast_io(e) //Includes : 7-segment display pins for scanning 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                SYSTEM INCLUDES                                                  */   
.................... /*******************************************************************************************************************/   
.................... #include <lcd.c>     
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
01D4:  MOVLW  0F
01D5:  BSF    03.5
01D6:  ANDWF  08,W
01D7:  IORLW  F0
01D8:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
01D9:  BCF    03.5
01DA:  BSF    08.2
....................    delay_cycles(1); 
01DB:  NOP
....................    lcd_output_enable(1); 
01DC:  BSF    08.0
....................    delay_cycles(1); 
01DD:  NOP
....................    high = lcd_read_nibble(); 
01DE:  CALL   1C8
01DF:  MOVF   78,W
01E0:  BSF    03.5
01E1:  MOVWF  54
....................        
....................    lcd_output_enable(0); 
01E2:  BCF    03.5
01E3:  BCF    08.0
....................    delay_cycles(1); 
01E4:  NOP
....................    lcd_output_enable(1); 
01E5:  BSF    08.0
....................    delay_us(1); 
01E6:  NOP
....................    low = lcd_read_nibble(); 
01E7:  CALL   1C8
01E8:  MOVF   78,W
01E9:  BSF    03.5
01EA:  MOVWF  53
....................        
....................    lcd_output_enable(0); 
01EB:  BCF    03.5
01EC:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01ED:  MOVLW  0F
01EE:  BSF    03.5
01EF:  ANDWF  08,W
01F0:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
01F1:  SWAPF  54,W
01F2:  MOVWF  77
01F3:  MOVLW  F0
01F4:  ANDWF  77,F
01F5:  MOVF   77,W
01F6:  IORWF  53,W
01F7:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
01C8:  MOVF   08,W
01C9:  MOVWF  77
01CA:  SWAPF  08,W
01CB:  ANDLW  0F
01CC:  MOVWF  78
....................   #endif 
01CD:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
01BA:  BSF    03.5
01BB:  SWAPF  54,W
01BC:  ANDLW  F0
01BD:  MOVWF  77
01BE:  MOVLW  0F
01BF:  BCF    03.5
01C0:  ANDWF  08,W
01C1:  IORWF  77,W
01C2:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
01C3:  NOP
....................    lcd_output_enable(1); 
01C4:  BSF    08.0
....................    delay_us(2); 
01C5:  GOTO   1C6
....................    lcd_output_enable(0); 
01C6:  BCF    08.0
01C7:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
01CE:  BSF    03.5
01CF:  BCF    08.0
....................    lcd_rs_tris(); 
01D0:  BCF    08.1
....................    lcd_rw_tris(); 
01D1:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
01D2:  BCF    03.5
01D3:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
01F8:  MOVF   78,W
01F9:  MOVWF  53
01FA:  BTFSS  53.7
01FB:  GOTO   1FE
01FC:  BCF    03.5
01FD:  GOTO   1D4
....................    lcd_output_rs(address); 
01FE:  BTFSC  51.0
01FF:  GOTO   203
0200:  BCF    03.5
0201:  BCF    08.1
0202:  BSF    03.5
0203:  BTFSS  51.0
0204:  GOTO   208
0205:  BCF    03.5
0206:  BSF    08.1
0207:  BSF    03.5
....................    delay_cycles(1); 
0208:  NOP
....................    lcd_output_rw(0); 
0209:  BCF    03.5
020A:  BCF    08.2
....................    delay_cycles(1); 
020B:  NOP
....................    lcd_output_enable(0); 
020C:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
020D:  BSF    03.5
020E:  SWAPF  52,W
020F:  MOVWF  53
0210:  MOVLW  0F
0211:  ANDWF  53,F
0212:  MOVF   53,W
0213:  MOVWF  54
0214:  BCF    03.5
0215:  CALL   1BA
....................    lcd_send_nibble(n & 0xf); 
0216:  BSF    03.5
0217:  MOVF   52,W
0218:  ANDLW  0F
0219:  MOVWF  53
021A:  MOVWF  54
021B:  BCF    03.5
021C:  CALL   1BA
021D:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
021E:  MOVLW  28
021F:  BSF    03.5
0220:  MOVWF  42
0221:  MOVLW  0C
0222:  MOVWF  43
0223:  MOVLW  01
0224:  MOVWF  44
0225:  MOVLW  06
0226:  MOVWF  45
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0227:  BCF    03.5
0228:  BCF    08.0
....................    lcd_output_rs(0); 
0229:  BCF    08.1
....................    lcd_output_rw(0); 
022A:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
022B:  MOVLW  0F
022C:  BSF    03.5
022D:  ANDWF  08,W
022E:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
022F:  BCF    08.0
....................    lcd_rs_tris(); 
0230:  BCF    08.1
....................    lcd_rw_tris(); 
0231:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0232:  MOVLW  0F
0233:  MOVWF  4D
0234:  BCF    03.5
0235:  CALL   1A5
....................    for(i=1;i<=3;++i) 
0236:  MOVLW  01
0237:  BSF    03.5
0238:  MOVWF  41
0239:  MOVF   41,W
023A:  SUBLW  03
023B:  BTFSS  03.0
023C:  GOTO   249
....................    { 
....................        lcd_send_nibble(3); 
023D:  MOVLW  03
023E:  MOVWF  54
023F:  BCF    03.5
0240:  CALL   1BA
....................        delay_ms(5); 
0241:  MOVLW  05
0242:  BSF    03.5
0243:  MOVWF  4D
0244:  BCF    03.5
0245:  CALL   1A5
0246:  BSF    03.5
0247:  INCF   41,F
0248:  GOTO   239
....................    } 
....................     
....................    lcd_send_nibble(2); 
0249:  MOVLW  02
024A:  MOVWF  54
024B:  BCF    03.5
024C:  CALL   1BA
....................    delay_ms(5); 
024D:  MOVLW  05
024E:  BSF    03.5
024F:  MOVWF  4D
0250:  BCF    03.5
0251:  CALL   1A5
....................    for(i=0;i<=3;++i) 
0252:  BSF    03.5
0253:  CLRF   41
0254:  MOVF   41,W
0255:  SUBLW  03
0256:  BTFSS  03.0
0257:  GOTO   266
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0258:  MOVLW  C2
0259:  ADDWF  41,W
025A:  MOVWF  04
025B:  BCF    03.7
025C:  MOVF   00,W
025D:  MOVWF  46
025E:  CLRF   51
025F:  MOVF   46,W
0260:  MOVWF  52
0261:  BCF    03.5
0262:  CALL   1CE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0263:  BSF    03.5
0264:  INCF   41,F
0265:  GOTO   254
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0299:  BSF    03.5
029A:  DECFSZ 4E,W
029B:  GOTO   29D
029C:  GOTO   2A0
....................       address=LCD_LINE_TWO; 
029D:  MOVLW  40
029E:  MOVWF  4F
029F:  GOTO   2A1
....................    else 
....................       address=0; 
02A0:  CLRF   4F
....................       
....................    address+=x-1; 
02A1:  MOVLW  01
02A2:  SUBWF  4D,W
02A3:  ADDWF  4F,F
....................    lcd_send_byte(0,0x80|address); 
02A4:  MOVF   4F,W
02A5:  IORLW  80
02A6:  MOVWF  50
02A7:  CLRF   51
02A8:  MOVF   50,W
02A9:  MOVWF  52
02AA:  BCF    03.5
02AB:  CALL   1CE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
02AC:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
02AD:  BSF    03.5
02AE:  MOVF   4C,W
02AF:  XORLW  07
02B0:  BCF    03.5
02B1:  BTFSC  03.2
02B2:  GOTO   2BD
02B3:  XORLW  0B
02B4:  BTFSC  03.2
02B5:  GOTO   2C4
02B6:  XORLW  06
02B7:  BTFSC  03.2
02B8:  GOTO   2D0
02B9:  XORLW  02
02BA:  BTFSC  03.2
02BB:  GOTO   2D8
02BC:  GOTO   2DF
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
02BD:  MOVLW  01
02BE:  BSF    03.5
02BF:  MOVWF  4D
02C0:  MOVWF  4E
02C1:  BCF    03.5
02C2:  CALL   299
02C3:  GOTO   2E6
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
02C4:  BSF    03.5
02C5:  CLRF   51
02C6:  MOVLW  01
02C7:  MOVWF  52
02C8:  BCF    03.5
02C9:  CALL   1CE
....................                      delay_ms(2); 
02CA:  MOVLW  02
02CB:  BSF    03.5
02CC:  MOVWF  4D
02CD:  BCF    03.5
02CE:  CALL   1A5
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
02CF:  GOTO   2E6
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
02D0:  MOVLW  01
02D1:  BSF    03.5
02D2:  MOVWF  4D
02D3:  MOVLW  02
02D4:  MOVWF  4E
02D5:  BCF    03.5
02D6:  CALL   299
02D7:  GOTO   2E6
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
02D8:  BSF    03.5
02D9:  CLRF   51
02DA:  MOVLW  10
02DB:  MOVWF  52
02DC:  BCF    03.5
02DD:  CALL   1CE
02DE:  GOTO   2E6
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02DF:  MOVLW  01
02E0:  BSF    03.5
02E1:  MOVWF  51
02E2:  MOVF   4C,W
02E3:  MOVWF  52
02E4:  BCF    03.5
02E5:  CALL   1CE
....................      #endif 
....................    } 
02E6:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <math.h>        
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................                                  
.................... /*******************************************************************************************************************/   
.................... /*                                                  SYSTEM FUSES                                                  */   
.................... /*******************************************************************************************************************/   
....................                                        
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                 SYSTEM REGISTER                                                */   
.................... /*******************************************************************************************************************/   
....................  
.................... #byte my_TIM0_OPTION_REG = 0x81  //Config register 
.................... #byte my_TIM0_MODULE_REG = 0x01  //8 bit timer value storage register 
.................... #byte my_INTCON_REG      = 0x0B  //General purpose interrupt register 
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                 SYSTEM STRUCTS                                                 */   
.................... /*******************************************************************************************************************/   
....................  
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;  //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                               SYSTEM VARIABLES                                                */   
.................... /*******************************************************************************************************************/   
....................  
....................  
.................... //------------ VAR --> CRITICAL PART <-- VAR ------------// 
.................... char readed_ID;            //Coming data will be When came from slave PIC 
.................... int8 systemLock;           //If the ID is valid, system open. Otherwise it will remain locked 
.................... int8 OPS_Status;           //55 means ops will be canceled, otherwise ops will be going on 
.................... char SelectionState;       //Put 'X' if button_Select is HIGH, put empty character if button_RemoveSelect is HIGH 
.................... int8 LockingMechanism = 1; //Will protect the system against repetitive or incorrect operations 
....................  
.................... //------------ VAR --> Keeps Clients <-- VAR ------------// 
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;                            // Will be used as given on the right --> MikroClient[ClientNumber]                                         
....................  
.................... //------------ VAR --> POTENTIOMETERS <-- VAR ------------// 
.................... int Index_OptionMenu; 
.................... int Index_TimeMoneyPreference; 
.................... int Index_PolishMililitre; 
.................... int Index_PastProcesses; 
.................... unsigned long int val_ADC_Pot_Surf; 
.................... unsigned long int val_ADC_Pot_Timer; 
.................... unsigned long int val_ADC_Pot_Polish; 
.................... unsigned long int val_ADC_Pot_PastProcesses; 
....................  
.................... //------------ VAR --> TIMER & ARRAYS <-- VAR ------------// 
.................... unsigned long int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};//Seconds 
*
1039:  MOVLW  14
103A:  BCF    03.6
103B:  MOVWF  4D
103C:  CLRF   4E
103D:  MOVLW  28
103E:  MOVWF  4F
103F:  CLRF   50
1040:  MOVLW  3C
1041:  MOVWF  51
1042:  CLRF   52
1043:  MOVLW  50
1044:  MOVWF  53
1045:  CLRF   54
1046:  MOVLW  64
1047:  MOVWF  55
1048:  CLRF   56
1049:  MOVLW  78
104A:  MOVWF  57
104B:  CLRF   58
104C:  MOVLW  8C
104D:  MOVWF  59
104E:  CLRF   5A
104F:  MOVLW  A0
1050:  MOVWF  5B
1051:  CLRF   5C
1052:  MOVLW  B4
1053:  MOVWF  5D
1054:  CLRF   5E
1055:  MOVLW  C8
1056:  MOVWF  5F
1057:  CLRF   60
1058:  MOVLW  DC
1059:  MOVWF  61
105A:  CLRF   62
105B:  MOVLW  F0
105C:  MOVWF  63
105D:  CLRF   64
.................... unsigned long int timer0_isr_counter=0; 
.................... unsigned long int desired_value=0.0; 
.................... unsigned long int mililitrePolish[5] = {1,2,3,4,5}; // 1x100ml , 2x100ml, ... 5x100ml 
105E:  MOVLW  01
105F:  MOVWF  69
1060:  CLRF   6A
1061:  MOVLW  02
1062:  MOVWF  6B
1063:  CLRF   6C
1064:  MOVLW  03
1065:  MOVWF  6D
1066:  CLRF   6E
1067:  MOVLW  04
1068:  MOVWF  6F
1069:  CLRF   70
106A:  MOVLW  05
106B:  MOVWF  71
106C:  CLRF   72
....................  
.................... //------------ VAR --> 7-SEGMENT DISPLAY NUMBERS <-- VAR ------------// 
.................... int8 segmentTable[16] = {  
....................     0x7E, 0x0C, 0xB6, 0x9E, 0xCC, //==> 0,1,2,3,4 
....................     0xDA, 0xFA, 0x0E, 0xFE, 0xDE  //==> 5,6,7,8,9 
.................... }; 
106D:  MOVLW  7E
106E:  BSF    03.5
106F:  MOVWF  20
1070:  MOVLW  0C
1071:  MOVWF  21
1072:  MOVLW  B6
1073:  MOVWF  22
1074:  MOVLW  9E
1075:  MOVWF  23
1076:  MOVLW  CC
1077:  MOVWF  24
1078:  MOVLW  DA
1079:  MOVWF  25
107A:  MOVLW  FA
107B:  MOVWF  26
107C:  MOVLW  0E
107D:  MOVWF  27
107E:  MOVLW  FE
107F:  MOVWF  28
1080:  MOVLW  DE
1081:  MOVWF  29
1082:  CLRF   2A
1083:  CLRF   2B
1084:  CLRF   2C
1085:  CLRF   2D
1086:  CLRF   2E
1087:  CLRF   2F
....................  
.................... //Split the current time value into digits. 
.................... int8 number_unitDigit=0; 
.................... int8 number_tensDigit=0; 
.................... int8 number_hundredDigit =0; 
....................  
.................... unsigned long int CurrentTime;     // Current countdown value 
....................  
.................... int8 counter_StartOpsButtonTick=0;  /* 
....................                                      * If the value is 1, start the foaming process. 
....................                                      * If the value is 2, start the washing process. 
....................                                      * If the value is 3, start the ventilation process. 
....................                                      * If the value is 4, start the polishing process. 
....................                                      */ 
.................... unsigned long SelectedTime;         //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
.................... unsigned long currentPolishAmount; 
.................... int8 allProcessComplate_flag=0;    /**  
....................                                      * allProcessComplete_flag tracks the completion status of all processes, including polishing. 
....................                                      * 0: Processes are still ongoing. 
....................                                      * 1: All processes are complete. 
....................                                      */ 
....................                                       
.................... //------------ VAR --> INTERNAL EEPROM <-- VAR ------------// 
.................... //EEPROM variables to store the values selected by the user 
.................... // Variables for storing "written" values 
.................... unsigned int8 eeprom_foaming_written_cost     = 0; 
.................... unsigned int8 eeprom_washing_written_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_written_cost = 0; 
.................... unsigned int8 eeprom_polishing_written_cost   = 0; 
....................  
.................... // Variables for storing "read" values 
.................... unsigned int8 eeprom_foaming_read_cost     = 0; 
.................... unsigned int8 eeprom_washing_read_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_read_cost = 0; 
.................... unsigned int8 eeprom_polishing_read_cost   = 0; 
....................  
.................... //Keeps track of the last written address in EEPROM for each customer 
.................... unsigned int8 Client0_last_address=0; //For Selçuk Bey's account 
.................... unsigned int8 Client1_last_address=0; //For Emre Bey's account 
....................  
.................... unsigned int8 IndexOfReadMemory=2; /** 
....................                                      * The operation number corresponds to the specific operation we are focusing on,  
....................                                      * e.g., operation-1, operation-2 ==> 1 and 2 are their operation numbers,  
....................                                      * with operation-1 being the minimum. 
....................                                      */ 
....................  
....................  
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                               SYSTEM DEFINITIONS                                              */   
.................... /*******************************************************************************************************************/   
....................  
.................... /* ======== SYSTEM INPUT & OUTPUT ======== */ 
.................... //-IO--INPUT---->LCD Screen Control Section  
.................... #define button_NEXT           pin_A3   //Proceed to the next operation. 
.................... #define button_BACK           pin_A4   //Go back to the previous operation. 
.................... #define button_Select         pin_A5   //Select the desired option. 
.................... #define button_RemoveSelect   pin_C0   //Remove the option I canceled. 
....................  
.................... #define button_OPS_START      pin_C1   /* button_OPS_START :  
....................                                         * This button performs the following functions: 
....................                                         * - Starts the foaming, washing, ventilation, and polishing processes. 
....................                                         * - Triggers the countdown for foaming, washing, and ventilation. 
....................                                         * - Loads percentage progress into the system for polishing. 
....................                                         */ 
....................                                          
.................... #define button_OPS_CANCEL      pin_B0   //Cancel all operations and close the system for the user. 
.................... #define button_DrainPolishing  pin_C2   //It adds polish to the container while the button is pressed 
....................  
....................  
.................... //-IO--OUTPUT---->7-Segment Display Scanning Section 
.................... #define pin_HundredDigit_switch pin_E2 
.................... #define pin_TensDigit_switch    pin_E0  
.................... #define pin_UnitDigit_switch    pin_E1  
....................  
.................... //-MEMORY------> Internal EEPROM memory client base addresses 
.................... //They will share the EEPROM memory evenly 
.................... #define eeprom_Client0_systemStartAddress 0 
.................... #define eeprom_Client1_systemStartAddress 130 
....................  
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                               FUNCTIONS PROTOTYPES                                            */   
.................... /*******************************************************************************************************************/   
.................... /* ======== SYSTEM CONFIGURATION FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_Init(void); 
.................... void trisSetting_Init(void); 
.................... void displaySetting_Init(void); 
.................... void interruptSetting_Init(void); 
.................... void adcSetting_Init(void); 
....................  
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_lcd_IdleStatus(void); 
.................... void NavigateOperationMenu(void); 
.................... void NavigateTimeMoneyPreferenceMenu(void); 
.................... void NavigatePolishingMenu(void); 
.................... void DisplayRecordsSequentiallyOnLCD(void); 
.................... void NavigatePastProcessesMenu(void); 
....................  
.................... /* ======== UART SERIAL COM. FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_uart_CheckTheMessage(void); 
....................  
.................... /* ======== 7-SEGMENT DISPLAY FUNCTIONS PROTOTYPES  ======== */ 
.................... void sequentialDisplayScan(void); 
.................... void loadZeroValue_2_DisplaySegment(void); 
....................  
.................... /* ======== EEPROM WRITE/READ FUNCTIONS PROTOTYPES  ======== */ 
....................  
.................... void Read_EEPROM_OpsVal_from_EEPROMregs(void); 
.................... void display_Selected_EEPROM_OpsVal_OnLCD(void); 
.................... void showSelectedPastProcessesOps(void); 
....................  
.................... void loadCostValuesToEEPROMVariables(void); 
.................... void Write_EEPROM_OpsVal_to_EEPROMregs(void); 
.................... void displayProcessCompletionStatus(void); 
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                                  SYSTEM MACROS                                                 */   
.................... /*******************************************************************************************************************/   
....................  
.................... /* ======== -BEGIN- SYSTEM POTENTIOMETER INDEXER -BEGIN- ======== */ 
.................... #define ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf)        \ 
....................    do{                                        \ 
....................           Index_OptionMenu = ((val_ADC_Pot_Surf*5)/1020);  \ 
....................           if(Index_OptionMenu >= 5){                       \ 
....................             Index_OptionMenu = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer)              \ 
....................    do{                                                                \ 
....................           Index_TimeMoneyPreference = ((val_ADC_Pot_Timer*12)/1020);  \ 
....................           if(Index_TimeMoneyPreference >= 12){                        \ 
....................              Index_TimeMoneyPreference = 11;                          \ 
....................           }                                                           \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofPolish(val_ADC_Pot_Polish)                  \ 
....................    do{                                                            \ 
....................           Index_PolishMililitre = ((val_ADC_Pot_Polish*5)/1020);  \ 
....................           if(Index_PolishMililitre >= 5){                         \ 
....................             Index_PolishMililitre = 4;                            \ 
....................           }                                                       \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofPastProcesses(val_ADC_Pot_PastProcesses)         \ 
....................    do{                                                                 \ 
....................           Index_PastProcesses = ((val_ADC_Pot_PastProcesses*5)/1020);  \ 
....................           if(Index_PastProcesses >= 5){                                \ 
....................             Index_PastProcesses = 4;                                   \ 
....................           }                                                            \ 
....................    }while(0) 
....................     
.................... /* ======== -END- SYSTEM POTENTIOMETER INDEXER -END- ======== */    
....................  
.................... /* ======== -BEGIN- SYSTEM TIMER TIME CONFIG -BEGIN- ======== */ 
.................... //--> Timer Desired Value Calculator  
.................... #define TimerScalingFactor ((1000.0) / 64.0) 
.................... #define SECOND_TO_ISR_COUNT(SelectedTime)                     \ 
....................    do{                                                        \ 
....................          desired_value = (SelectedTime * TimerScalingFactor); \ 
....................    }while(0) 
....................  
.................... /* ======== -END- SYSTEM TIMER TIME CONFIG -END- ======== */ 
....................  
....................  
....................  
.................... /*******************************************************************************************************************/   
.................... /*                                               SYSTEM INTERRUPTS                                               */   
.................... /*******************************************************************************************************************/   
....................  
.................... /* ======== -BEGIN- EXTERNAL INTERRUPT -BEGIN- ======== */ 
.................... #int_EXT 
.................... void system_isr_OperationCANCEL(){ 
....................   OPS_Status = 55;       //That's a password to break do-while's loops 
*
0056:  MOVLW  37
0057:  MOVWF  2D
....................   my_INTCON_REG &= 0XFD; //Clear External Interrupt Flag bit  
0058:  BCF    0B.1
.................... } 
.................... /* ======== -END- EXTERNAL INTERRUPT -END- ======== */ 
....................  
.................... /* ======== -BEGIN- TIMER_0 INTERRUPT -BEGIN- ======== */ 
0059:  BCF    0B.1
005A:  BCF    0A.3
005B:  BCF    0A.4
005C:  GOTO   02F
.................... #INT_TIMER0 
.................... void systemTimer0_isr(){ 
....................  
....................    timer0_isr_counter++; 
005D:  INCF   65,F
005E:  BTFSC  03.2
005F:  INCF   66,F
....................     
.................... /* 
....................  * e.g., 20 seconds is equal to 20000 milliseconds. 
....................  * We divide by 64 because Timer 0 generates an interrupt every 64 milliseconds. 
....................  * (20000 milliseconds / 64 milliseconds) = 312.5 
....................  * This gives the desired value for the timing calculation. 
....................  */ 
....................    if(timer0_isr_counter == desired_value){ 
0060:  MOVF   67,W
0061:  SUBWF  65,W
0062:  BTFSS  03.2
0063:  GOTO   06B
0064:  MOVF   68,W
0065:  SUBWF  66,W
0066:  BTFSS  03.2
0067:  GOTO   06B
....................     
....................       //CurrentTime=0; 
....................       timer0_isr_counter=0;   
0068:  CLRF   66
0069:  CLRF   65
....................       //Disable Timer0 Interrupt 
....................       my_INTCON_REG &= 0xDF; 
006A:  BCF    0B.5
....................        
....................    } 
....................     
....................     
....................    //If 1 second has passed 
....................    if((timer0_isr_counter%16) == 0){ 
006B:  MOVF   65,W
006C:  ANDLW  0F
006D:  BSF    03.5
006E:  MOVWF  56
006F:  CLRF   57
0070:  MOVF   56,F
0071:  BTFSS  03.2
0072:  GOTO   085
0073:  MOVF   57,F
0074:  BTFSS  03.2
0075:  GOTO   085
....................     
....................       //Decrease the current time value by one. 
....................       CurrentTime-=1; 
0076:  MOVLW  01
0077:  SUBWF  7B,F
0078:  MOVLW  00
0079:  BTFSS  03.0
007A:  MOVLW  01
007B:  SUBWF  7C,F
....................            
....................          if(CurrentTime==0){      
007C:  MOVF   7B,F
007D:  BTFSS  03.2
007E:  GOTO   085
007F:  MOVF   7C,F
0080:  BTFSS  03.2
0081:  GOTO   085
....................             //Disable Timer0 Interrupt 
....................             my_INTCON_REG &= 0xDF;      
0082:  BCF    03.5
0083:  BCF    0B.5
0084:  BSF    03.5
....................          } 
....................    } 
....................     
....................    // Clear timer0 overflow interrupt flag 
....................    my_INTCON_REG &= 0xFB;  
0085:  BCF    03.5
0086:  BCF    0B.2
....................     
0087:  BCF    0B.2
0088:  BCF    0A.3
0089:  BCF    0A.4
008A:  GOTO   02F
.................... } 
.................... /* ======== -END- TIMER_0 INTERRUPT -END- ======== */ 
....................  
....................  
....................  
.................... /********************************************************************************************************************/ 
.................... /*                                MAIN CODE & SEQUENTIAL STEPS OF THE OPERATION                                     */ 
.................... /********************************************************************************************************************/ 
.................... void main(void)  
*
1000:  MOVF   03,W
1001:  ANDLW  1F
1002:  MOVWF  03
1003:  BSF    03.5
1004:  BSF    03.6
1005:  BCF    07.3
1006:  MOVLW  19
1007:  BCF    03.6
1008:  MOVWF  19
1009:  MOVLW  A6
100A:  MOVWF  18
100B:  MOVLW  90
100C:  BCF    03.5
100D:  MOVWF  18
100E:  MOVLW  01
100F:  MOVWF  2F
1010:  CLRF   66
1011:  CLRF   65
1012:  CLRF   68
1013:  CLRF   67
1014:  CLRF   73
1015:  CLRF   74
1016:  CLRF   75
1017:  CLRF   76
1018:  BSF    03.5
1019:  CLRF   32
101A:  CLRF   33
101B:  CLRF   34
101C:  CLRF   35
101D:  CLRF   36
101E:  CLRF   37
101F:  CLRF   38
1020:  CLRF   39
1021:  CLRF   3A
1022:  CLRF   3B
1023:  CLRF   3C
1024:  MOVLW  02
1025:  MOVWF  3D
1026:  MOVLW  FF
1027:  MOVWF  3E
1028:  CLRF   40
1029:  CLRF   3F
102A:  BSF    03.6
102B:  MOVF   09,W
102C:  ANDLW  C0
102D:  MOVWF  09
102E:  BCF    03.6
102F:  BCF    1F.4
1030:  BCF    1F.5
1031:  MOVLW  00
1032:  BSF    03.6
1033:  MOVWF  08
1034:  BCF    03.5
1035:  CLRF   07
1036:  CLRF   08
1037:  CLRF   09
1038:  BCF    03.7
.................... { 
....................    
....................    //System parameters and peripherals will be initialized 
....................    SubSystem_Init(); 
*
1088:  BCF    0A.4
1089:  BCF    03.5
108A:  GOTO   21E
108B:  BSF    0A.4
....................    
.................... while(1){//--------------------- BEGIN---MAIN WHILE(1)---BEGIN----------------------------// 
....................    
....................    
....................    readed_ID  = '.';   //Clear Id symbol 
108C:  MOVLW  2E
108D:  MOVWF  2B
....................    systemLock = 0; 
108E:  CLRF   2C
....................    OPS_Status = 56;    //Disable  
108F:  MOVLW  38
1090:  MOVWF  2D
....................    
....................    //Wait until unlock the system 
....................    do{ 
....................            SubSystem_lcd_IdleStatus();   //Greeting the customer 
1091:  BCF    0A.4
1092:  GOTO   35B
1093:  BSF    0A.4
....................             
....................            if(kbhit()) 
1094:  BTFSS  0C.5
1095:  GOTO   09D
....................            { 
....................               readed_ID = getc(); 
1096:  BTFSS  0C.5
1097:  GOTO   096
1098:  MOVF   1A,W
1099:  MOVWF  2B
....................               SubSystem_uart_CheckTheMessage(); 
109A:  BCF    0A.4
109B:  GOTO   3B6
109C:  BSF    0A.4
....................            }       
....................          
....................     }while(systemLock!=1); 
109D:  DECFSZ 2C,W
109E:  GOTO   091
....................   
....................     delay_ms(1000); 
109F:  MOVLW  04
10A0:  BSF    03.5
10A1:  MOVWF  41
10A2:  MOVLW  FA
10A3:  MOVWF  4D
10A4:  BCF    0A.4
10A5:  BCF    03.5
10A6:  CALL   1A5
10A7:  BSF    0A.4
10A8:  BSF    03.5
10A9:  DECFSZ 41,F
10AA:  GOTO   0A2
....................      
....................      
....................      
....................      
....................    
.................... /** 
....................  * @brief Program navigates through option menus using a potentiometer and buttons. 
....................  *  
....................  * Reads potentiometer values to select options or adjust parameters like time and cost. 
....................  * The "NEXT" button moves forward or confirms selection, while the "BACK" button allows returning or resetting. 
....................  * Specific sub-menus handle time/money preferences and polishing settings, with double-clicks for confirmation  
....................  * and single clicks for resetting choices. 
....................  */ 
....................  
....................  
.................... /*-----------------------------------------------------------------------------------------------------------------*/   
.................... /*                       >>> BEGIN - SEQUENTIAL STEPS OF THE OPERATION - BEGIN <<<                                 */   
.................... /*-----------------------------------------------------------------------------------------------------------------*/   
....................    
....................  
....................       do{ 
....................              //Start Of Conversation for ADC_Surf 
....................              set_adc_channel(0); 
10AB:  MOVLW  00
10AC:  MOVWF  78
10AD:  BCF    03.5
10AE:  MOVF   1F,W
10AF:  ANDLW  C3
10B0:  IORWF  78,W
10B1:  MOVWF  1F
....................              //Provide sufficient acquisition time. 
....................              delay_us(20); 
10B2:  MOVLW  06
10B3:  MOVWF  77
10B4:  DECFSZ 77,F
10B5:  GOTO   0B4
10B6:  NOP
....................               
....................              //Get Surf_Pot ADC value(0-1024) 
....................              val_ADC_Pot_Surf = read_adc();   
10B7:  BSF    1F.1
10B8:  BTFSC  1F.1
10B9:  GOTO   0B8
10BA:  BSF    03.5
10BB:  MOVF   1E,W
10BC:  BCF    03.5
10BD:  MOVWF  45
10BE:  MOVF   1E,W
10BF:  MOVWF  46
....................               
....................              //Convert Surf_Pot ADC value into the option menu index 
....................              ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf); 
10C0:  MOVF   46,W
10C1:  BSF    03.5
10C2:  MOVWF  46
10C3:  BCF    03.5
10C4:  MOVF   45,W
10C5:  BSF    03.5
10C6:  MOVWF  45
10C7:  CLRF   48
10C8:  MOVLW  05
10C9:  MOVWF  47
10CA:  BCF    0A.4
10CB:  BCF    03.5
10CC:  CALL   406
10CD:  BSF    0A.4
10CE:  MOVF   79,W
10CF:  BSF    03.5
10D0:  MOVWF  42
10D1:  MOVF   78,W
10D2:  MOVWF  41
10D3:  MOVF   42,W
10D4:  MOVWF  44
10D5:  MOVF   41,W
10D6:  MOVWF  43
10D7:  MOVLW  03
10D8:  MOVWF  46
10D9:  MOVLW  FC
10DA:  MOVWF  45
10DB:  BCF    0A.4
10DC:  BCF    03.5
10DD:  CALL   41D
10DE:  BSF    0A.4
10DF:  MOVF   78,W
10E0:  MOVWF  41
10E1:  SUBLW  04
10E2:  BTFSC  03.0
10E3:  GOTO   0E6
10E4:  MOVLW  04
10E5:  MOVWF  41
....................              
....................              //Use index value to show selected option and other one 
....................              NavigateOperationMenu(); 
10E6:  BCF    0A.4
10E7:  GOTO   444
10E8:  BSF    0A.4
....................               
....................              //Clear selection 
....................              SelectionState = ' '; 
10E9:  MOVLW  20
10EA:  MOVWF  2E
....................               
....................                 //The client wants to see the next section based on the selected option 
....................                 //Selections will be made for foaming, washing, and ventilation processes in this section 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu <= 2)) 
10EB:  BSF    03.5
10EC:  BSF    05.3
10ED:  BCF    03.5
10EE:  BTFSS  05.3
10EF:  GOTO   13A
10F0:  MOVF   41,W
10F1:  SUBLW  02
10F2:  BTFSS  03.0
10F3:  GOTO   13A
....................                 { 
....................        
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
10F4:  MOVLW  04
10F5:  MOVWF  78
10F6:  MOVF   1F,W
10F7:  ANDLW  C3
10F8:  IORWF  78,W
10F9:  MOVWF  1F
....................                               //Provide sufficient acquisition time. 
....................                               delay_us(20); 
10FA:  MOVLW  06
10FB:  MOVWF  77
10FC:  DECFSZ 77,F
10FD:  GOTO   0FC
10FE:  NOP
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_Timer = read_adc();  
10FF:  BSF    1F.1
1100:  BTFSC  1F.1
1101:  GOTO   100
1102:  BSF    03.5
1103:  MOVF   1E,W
1104:  BCF    03.5
1105:  MOVWF  47
1106:  MOVF   1E,W
1107:  MOVWF  48
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer); 
1108:  MOVF   48,W
1109:  BSF    03.5
110A:  MOVWF  46
110B:  BCF    03.5
110C:  MOVF   47,W
110D:  BSF    03.5
110E:  MOVWF  45
110F:  CLRF   48
1110:  MOVLW  0C
1111:  MOVWF  47
1112:  BCF    0A.4
1113:  BCF    03.5
1114:  CALL   406
1115:  BSF    0A.4
1116:  MOVF   79,W
1117:  BSF    03.5
1118:  MOVWF  42
1119:  MOVF   78,W
111A:  MOVWF  41
111B:  MOVF   42,W
111C:  MOVWF  44
111D:  MOVF   41,W
111E:  MOVWF  43
111F:  MOVLW  03
1120:  MOVWF  46
1121:  MOVLW  FC
1122:  MOVWF  45
1123:  BCF    0A.4
1124:  BCF    03.5
1125:  CALL   41D
1126:  BSF    0A.4
1127:  MOVF   78,W
1128:  MOVWF  42
1129:  SUBLW  0B
112A:  BTFSC  03.0
112B:  GOTO   12E
112C:  MOVLW  0B
112D:  MOVWF  42
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigateTimeMoneyPreferenceMenu(); 
112E:  BCF    0A.4
112F:  GOTO   64E
1130:  BSF    0A.4
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
1131:  BSF    03.5
1132:  BSF    05.4
1133:  BCF    03.5
1134:  BTFSC  05.4
....................                                  break; 
1135:  GOTO   13A
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
1136:  MOVF   2D,W
1137:  SUBLW  37
1138:  BTFSS  03.2
1139:  GOTO   0F4
....................                 } 
....................                  
....................                  
....................                 //In this section, only milliliter selection will be made for the polishing process 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu == 3)){ 
113A:  BSF    03.5
113B:  BSF    05.3
113C:  BCF    03.5
113D:  BTFSS  05.3
113E:  GOTO   186
113F:  MOVF   41,W
1140:  SUBLW  03
1141:  BTFSS  03.2
1142:  GOTO   186
....................     
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
1143:  MOVLW  04
1144:  MOVWF  78
1145:  MOVF   1F,W
1146:  ANDLW  C3
1147:  IORWF  78,W
1148:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_Polish = read_adc();  
1149:  BSF    1F.1
114A:  BTFSC  1F.1
114B:  GOTO   14A
114C:  BSF    03.5
114D:  MOVF   1E,W
114E:  BCF    03.5
114F:  MOVWF  49
1150:  MOVF   1E,W
1151:  MOVWF  4A
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofPolish(val_ADC_Pot_Polish); 
1152:  MOVF   4A,W
1153:  BSF    03.5
1154:  MOVWF  46
1155:  BCF    03.5
1156:  MOVF   49,W
1157:  BSF    03.5
1158:  MOVWF  45
1159:  CLRF   48
115A:  MOVLW  05
115B:  MOVWF  47
115C:  BCF    0A.4
115D:  BCF    03.5
115E:  CALL   406
115F:  BSF    0A.4
1160:  MOVF   79,W
1161:  BSF    03.5
1162:  MOVWF  42
1163:  MOVF   78,W
1164:  MOVWF  41
1165:  MOVF   42,W
1166:  MOVWF  44
1167:  MOVF   41,W
1168:  MOVWF  43
1169:  MOVLW  03
116A:  MOVWF  46
116B:  MOVLW  FC
116C:  MOVWF  45
116D:  BCF    0A.4
116E:  BCF    03.5
116F:  CALL   41D
1170:  BSF    0A.4
1171:  MOVF   78,W
1172:  MOVWF  43
1173:  SUBLW  04
1174:  BTFSC  03.0
1175:  GOTO   178
1176:  MOVLW  04
1177:  MOVWF  43
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigatePolishingMenu(); 
1178:  BCF    0A.4
1179:  BSF    0A.3
117A:  GOTO   000
117B:  BSF    0A.4
117C:  BCF    0A.3
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
117D:  BSF    03.5
117E:  BSF    05.4
117F:  BCF    03.5
1180:  BTFSC  05.4
....................                                  break; 
1181:  GOTO   186
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
1182:  MOVF   2D,W
1183:  SUBLW  37
1184:  BTFSS  03.2
1185:  GOTO   143
....................                  
....................                 } 
....................                  
....................                 //In this section, the client can see all of his past processes 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu == 4)){ 
1186:  BSF    03.5
1187:  BSF    05.3
1188:  BCF    03.5
1189:  BTFSS  05.3
118A:  GOTO   1FA
118B:  MOVF   41,W
118C:  SUBLW  04
118D:  BTFSS  03.2
118E:  GOTO   1FA
....................                  
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
118F:  MOVLW  04
1190:  MOVWF  78
1191:  MOVF   1F,W
1192:  ANDLW  C3
1193:  IORWF  78,W
1194:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_PastProcesses = read_adc();  
1195:  BSF    1F.1
1196:  BTFSC  1F.1
1197:  GOTO   196
1198:  BSF    03.5
1199:  MOVF   1E,W
119A:  BCF    03.5
119B:  MOVWF  4B
119C:  MOVF   1E,W
119D:  MOVWF  4C
....................                                
....................                               //Convert Timer_Pot ADC value into the past processes index 
....................                               ADC_TO_INDEXofPastProcesses(val_ADC_Pot_PastProcesses); 
119E:  MOVF   4C,W
119F:  BSF    03.5
11A0:  MOVWF  46
11A1:  BCF    03.5
11A2:  MOVF   4B,W
11A3:  BSF    03.5
11A4:  MOVWF  45
11A5:  CLRF   48
11A6:  MOVLW  05
11A7:  MOVWF  47
11A8:  BCF    0A.4
11A9:  BCF    03.5
11AA:  CALL   406
11AB:  BSF    0A.4
11AC:  MOVF   79,W
11AD:  BSF    03.5
11AE:  MOVWF  42
11AF:  MOVF   78,W
11B0:  MOVWF  41
11B1:  MOVF   42,W
11B2:  MOVWF  44
11B3:  MOVF   41,W
11B4:  MOVWF  43
11B5:  MOVLW  03
11B6:  MOVWF  46
11B7:  MOVLW  FC
11B8:  MOVWF  45
11B9:  BCF    0A.4
11BA:  BCF    03.5
11BB:  CALL   41D
11BC:  BSF    0A.4
11BD:  MOVF   78,W
11BE:  MOVWF  44
11BF:  SUBLW  04
11C0:  BTFSC  03.0
11C1:  GOTO   1C4
11C2:  MOVLW  04
11C3:  MOVWF  44
....................                                
....................                               //Use past processes index value to show selected past processes 
....................                                NavigatePastProcessesMenu(); 
11C4:  BCF    0A.4
11C5:  BSF    0A.3
11C6:  GOTO   12E
11C7:  BSF    0A.4
11C8:  BCF    0A.3
....................                                 
....................                                delay_ms(250); 
11C9:  MOVLW  FA
11CA:  BSF    03.5
11CB:  MOVWF  4D
11CC:  BCF    0A.4
11CD:  BCF    03.5
11CE:  CALL   1A5
11CF:  BSF    0A.4
....................                                 
....................                                      //Enter the selected past-procesess 
....................                                      if((input(button_NEXT) == 1)){       
11D0:  BSF    03.5
11D1:  BSF    05.3
11D2:  BCF    03.5
11D3:  BTFSS  05.3
11D4:  GOTO   1F1
....................                                         printf(lcd_putc, "\f"); 
11D5:  MOVLW  0C
11D6:  BSF    03.5
11D7:  MOVWF  4C
11D8:  BCF    0A.4
11D9:  BCF    03.5
11DA:  CALL   2AD
11DB:  BSF    0A.4
....................                                          
....................                                        do{ 
....................                                         
....................                                           //This way, the location to be read in the EEPROM is determined. 
....................                                           IndexOfReadMemory = Index_PastProcesses; 
11DC:  MOVF   44,W
11DD:  BSF    03.5
11DE:  MOVWF  3D
....................                                            
....................                                           //Display the selected past processes ops. on the LCD in an organized manner 
....................                                           showSelectedPastProcessesOps(); 
11DF:  BCF    0A.4
11E0:  BSF    0A.3
11E1:  BCF    03.5
11E2:  GOTO   1ED
11E3:  BSF    0A.4
11E4:  BCF    0A.3
....................                                            
....................                                              
....................                                        }while(input(button_BACK) != 1); //Wait until press back button 
11E5:  BSF    03.5
11E6:  BSF    05.4
11E7:  BCF    03.5
11E8:  BTFSS  05.4
11E9:  GOTO   1DC
....................                                       
....................                                      delay_ms(250); 
11EA:  MOVLW  FA
11EB:  BSF    03.5
11EC:  MOVWF  4D
11ED:  BCF    0A.4
11EE:  BCF    03.5
11EF:  CALL   1A5
11F0:  BSF    0A.4
....................                                      } 
....................                                 
....................                                 
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
11F1:  BSF    03.5
11F2:  BSF    05.4
11F3:  BCF    03.5
11F4:  BTFSC  05.4
....................                                  break; 
11F5:  GOTO   1FA
....................                               } 
....................                                
....................                          }while(OPS_Status!=55);  
11F6:  MOVF   2D,W
11F7:  SUBLW  37
11F8:  BTFSS  03.2
11F9:  GOTO   18F
....................                 } 
....................                  
....................       /****************************************************************************************************/   
....................       /*         BEGIN- Foam, Washing, Ventilation, and Polishing Operations will be executed -BEGIN      */   
....................       /****************************************************************************************************/ 
....................   
....................                  
....................                 /* 
....................                  * In this section, a countdown will start for the selected times. 
....................                  * Each time the button_OPS_START is pressed, a new countdown for the process will begin. 
....................                 */ 
....................                 if(input(button_OPS_START) == 1){ 
11FA:  BSF    03.5
11FB:  BSF    3E.1
11FC:  MOVF   3E,W
11FD:  MOVWF  07
11FE:  BCF    03.5
11FF:  BTFSS  07.1
1200:  GOTO   38C
....................                  
....................                         printf(lcd_putc,"\f"); 
1201:  MOVLW  0C
1202:  BSF    03.5
1203:  MOVWF  4C
1204:  BCF    0A.4
1205:  BCF    03.5
1206:  CALL   2AD
1207:  BSF    0A.4
....................                         lcd_gotoxy(4,1); 
1208:  MOVLW  04
1209:  BSF    03.5
120A:  MOVWF  4D
120B:  MOVLW  01
120C:  MOVWF  4E
120D:  BCF    0A.4
120E:  BCF    03.5
120F:  CALL   299
1210:  BSF    0A.4
....................                         printf(lcd_putc,"Operasyon"); 
1211:  MOVLW  8B
1212:  BSF    03.6
1213:  MOVWF  0D
1214:  MOVLW  00
1215:  MOVWF  0F
1216:  BCF    0A.4
1217:  BCF    03.6
1218:  CALL   2E7
1219:  BSF    0A.4
....................                         lcd_gotoxy(4,2); 
121A:  MOVLW  04
121B:  BSF    03.5
121C:  MOVWF  4D
121D:  MOVLW  02
121E:  MOVWF  4E
121F:  BCF    0A.4
1220:  BCF    03.5
1221:  CALL   299
1222:  BSF    0A.4
....................                         printf(lcd_putc,"Baslatildi"); 
1223:  MOVLW  90
1224:  BSF    03.6
1225:  MOVWF  0D
1226:  MOVLW  00
1227:  MOVWF  0F
1228:  BCF    0A.4
1229:  BCF    03.6
122A:  CALL   2E7
122B:  BSF    0A.4
....................                          
....................                         //Wait 100 milliseconds to allow for button interference 
....................                         delay_ms(100);  
122C:  MOVLW  64
122D:  BSF    03.5
122E:  MOVWF  4D
122F:  BCF    0A.4
1230:  BCF    03.5
1231:  CALL   1A5
1232:  BSF    0A.4
....................                          
....................                         //Increase the value by one, if clicked during each recheck 
....................                         counter_StartOpsButtonTick+=1; 
1233:  MOVLW  01
1234:  ADDWF  76,F
....................                         LockingMechanism = 1; 
1235:  MOVWF  2F
....................                          
....................                         do{ 
....................                                
....................                               //Loads the foaming time 
....................                               if((counter_StartOpsButtonTick == 1) && (LockingMechanism == 1)){        
1236:  DECFSZ 76,W
1237:  GOTO   28C
1238:  DECFSZ 2F,W
1239:  GOTO   28C
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Foaming; 
123A:  RLF    40,W
123B:  MOVWF  77
123C:  RLF    77,F
123D:  RLF    77,F
123E:  MOVLW  F8
123F:  ANDWF  77,F
1240:  MOVF   77,W
1241:  ADDLW  30
1242:  MOVWF  04
1243:  BCF    03.7
1244:  INCF   04,F
1245:  MOVF   00,W
1246:  MOVWF  7E
1247:  DECF   04,F
1248:  MOVF   00,W
1249:  MOVWF  7D
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Foaming; 
124A:  RLF    40,W
124B:  MOVWF  77
124C:  RLF    77,F
124D:  RLF    77,F
124E:  MOVLW  F8
124F:  ANDWF  77,F
1250:  MOVF   77,W
1251:  ADDLW  30
1252:  MOVWF  04
1253:  BCF    03.7
1254:  INCF   04,F
1255:  MOVF   00,W
1256:  MOVWF  7C
1257:  DECF   04,F
1258:  MOVF   00,W
1259:  MOVWF  7B
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
125A:  MOVF   7E,W
125B:  BSF    03.5
125C:  MOVWF  42
125D:  MOVF   7D,W
125E:  MOVWF  41
125F:  BCF    0A.4
1260:  BCF    03.5
1261:  CALL   789
1262:  BSF    0A.4
1263:  MOVF   7A,W
1264:  BSF    03.5
1265:  MOVWF  44
1266:  MOVF   79,W
1267:  MOVWF  43
1268:  MOVF   78,W
1269:  MOVWF  42
126A:  MOVF   77,W
126B:  MOVWF  41
126C:  CLRF   48
126D:  CLRF   47
126E:  MOVLW  7A
126F:  MOVWF  46
1270:  MOVLW  82
1271:  MOVWF  45
1272:  BCF    0A.4
1273:  BSF    0A.3
1274:  BCF    03.5
1275:  CALL   39B
1276:  BSF    0A.4
1277:  BCF    0A.3
1278:  MOVF   7A,W
1279:  BSF    03.5
127A:  MOVWF  44
127B:  MOVF   79,W
127C:  MOVWF  43
127D:  MOVF   78,W
127E:  MOVWF  42
127F:  MOVF   77,W
1280:  MOVWF  41
1281:  BCF    0A.4
1282:  BCF    03.5
1283:  CALL   7A8
1284:  BSF    0A.4
1285:  MOVF   79,W
1286:  MOVWF  68
1287:  MOVF   78,W
1288:  MOVWF  67
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
1289:  MOVLW  A0
128A:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
128B:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                                //Loads the washing time 
....................                               if((counter_StartOpsButtonTick == 2) && (LockingMechanism == 1)){        
128C:  MOVF   76,W
128D:  SUBLW  02
128E:  BTFSS  03.2
128F:  GOTO   2E6
1290:  DECFSZ 2F,W
1291:  GOTO   2E6
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Washing; 
1292:  RLF    40,W
1293:  MOVWF  77
1294:  RLF    77,F
1295:  RLF    77,F
1296:  MOVLW  F8
1297:  ANDWF  77,F
1298:  MOVF   77,W
1299:  ADDLW  02
129A:  ADDLW  30
129B:  MOVWF  04
129C:  BCF    03.7
129D:  INCF   04,F
129E:  MOVF   00,W
129F:  MOVWF  7E
12A0:  DECF   04,F
12A1:  MOVF   00,W
12A2:  MOVWF  7D
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Washing; 
12A3:  RLF    40,W
12A4:  MOVWF  77
12A5:  RLF    77,F
12A6:  RLF    77,F
12A7:  MOVLW  F8
12A8:  ANDWF  77,F
12A9:  MOVF   77,W
12AA:  ADDLW  02
12AB:  ADDLW  30
12AC:  MOVWF  04
12AD:  BCF    03.7
12AE:  INCF   04,F
12AF:  MOVF   00,W
12B0:  MOVWF  7C
12B1:  DECF   04,F
12B2:  MOVF   00,W
12B3:  MOVWF  7B
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
12B4:  MOVF   7E,W
12B5:  BSF    03.5
12B6:  MOVWF  42
12B7:  MOVF   7D,W
12B8:  MOVWF  41
12B9:  BCF    0A.4
12BA:  BCF    03.5
12BB:  CALL   789
12BC:  BSF    0A.4
12BD:  MOVF   7A,W
12BE:  BSF    03.5
12BF:  MOVWF  44
12C0:  MOVF   79,W
12C1:  MOVWF  43
12C2:  MOVF   78,W
12C3:  MOVWF  42
12C4:  MOVF   77,W
12C5:  MOVWF  41
12C6:  CLRF   48
12C7:  CLRF   47
12C8:  MOVLW  7A
12C9:  MOVWF  46
12CA:  MOVLW  82
12CB:  MOVWF  45
12CC:  BCF    0A.4
12CD:  BSF    0A.3
12CE:  BCF    03.5
12CF:  CALL   39B
12D0:  BSF    0A.4
12D1:  BCF    0A.3
12D2:  MOVF   7A,W
12D3:  BSF    03.5
12D4:  MOVWF  44
12D5:  MOVF   79,W
12D6:  MOVWF  43
12D7:  MOVF   78,W
12D8:  MOVWF  42
12D9:  MOVF   77,W
12DA:  MOVWF  41
12DB:  BCF    0A.4
12DC:  BCF    03.5
12DD:  CALL   7A8
12DE:  BSF    0A.4
12DF:  MOVF   79,W
12E0:  MOVWF  68
12E1:  MOVF   78,W
12E2:  MOVWF  67
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
12E3:  MOVLW  A0
12E4:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
12E5:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                               //Loads the Ventilation time 
....................                               if((counter_StartOpsButtonTick == 3) && (LockingMechanism == 1)){        
12E6:  MOVF   76,W
12E7:  SUBLW  03
12E8:  BTFSS  03.2
12E9:  GOTO   340
12EA:  DECFSZ 2F,W
12EB:  GOTO   340
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Ventilation; 
12EC:  RLF    40,W
12ED:  MOVWF  77
12EE:  RLF    77,F
12EF:  RLF    77,F
12F0:  MOVLW  F8
12F1:  ANDWF  77,F
12F2:  MOVF   77,W
12F3:  ADDLW  04
12F4:  ADDLW  30
12F5:  MOVWF  04
12F6:  BCF    03.7
12F7:  INCF   04,F
12F8:  MOVF   00,W
12F9:  MOVWF  7E
12FA:  DECF   04,F
12FB:  MOVF   00,W
12FC:  MOVWF  7D
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Ventilation; 
12FD:  RLF    40,W
12FE:  MOVWF  77
12FF:  RLF    77,F
1300:  RLF    77,F
1301:  MOVLW  F8
1302:  ANDWF  77,F
1303:  MOVF   77,W
1304:  ADDLW  04
1305:  ADDLW  30
1306:  MOVWF  04
1307:  BCF    03.7
1308:  INCF   04,F
1309:  MOVF   00,W
130A:  MOVWF  7C
130B:  DECF   04,F
130C:  MOVF   00,W
130D:  MOVWF  7B
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
130E:  MOVF   7E,W
130F:  BSF    03.5
1310:  MOVWF  42
1311:  MOVF   7D,W
1312:  MOVWF  41
1313:  BCF    0A.4
1314:  BCF    03.5
1315:  CALL   789
1316:  BSF    0A.4
1317:  MOVF   7A,W
1318:  BSF    03.5
1319:  MOVWF  44
131A:  MOVF   79,W
131B:  MOVWF  43
131C:  MOVF   78,W
131D:  MOVWF  42
131E:  MOVF   77,W
131F:  MOVWF  41
1320:  CLRF   48
1321:  CLRF   47
1322:  MOVLW  7A
1323:  MOVWF  46
1324:  MOVLW  82
1325:  MOVWF  45
1326:  BCF    0A.4
1327:  BSF    0A.3
1328:  BCF    03.5
1329:  CALL   39B
132A:  BSF    0A.4
132B:  BCF    0A.3
132C:  MOVF   7A,W
132D:  BSF    03.5
132E:  MOVWF  44
132F:  MOVF   79,W
1330:  MOVWF  43
1331:  MOVF   78,W
1332:  MOVWF  42
1333:  MOVF   77,W
1334:  MOVWF  41
1335:  BCF    0A.4
1336:  BCF    03.5
1337:  CALL   7A8
1338:  BSF    0A.4
1339:  MOVF   79,W
133A:  MOVWF  68
133B:  MOVF   78,W
133C:  MOVWF  67
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
133D:  MOVLW  A0
133E:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
133F:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                               //Load the selected amount of polish 
....................                               if((counter_StartOpsButtonTick == 4) && (LockingMechanism == 1)){ 
1340:  MOVF   76,W
1341:  SUBLW  04
1342:  BTFSS  03.2
1343:  GOTO   36C
1344:  DECFSZ 2F,W
1345:  GOTO   36C
....................                                
....................                                     //The loop will exit when the polish is finished or if the process is canceled 
....................                                     do{ 
....................                                      
....................                                        if(input(button_DrainPolishing) == 1){ 
1346:  BSF    03.5
1347:  BSF    3E.2
1348:  MOVF   3E,W
1349:  MOVWF  07
134A:  BCF    03.5
134B:  BTFSS  07.2
134C:  GOTO   35A
....................                                           currentPolishAmount-=4; 
134D:  MOVLW  04
134E:  BSF    03.5
134F:  SUBWF  30,F
1350:  MOVLW  00
1351:  BTFSS  03.0
1352:  MOVLW  01
1353:  SUBWF  31,F
....................                                           delay_ms(100); 
1354:  MOVLW  64
1355:  MOVWF  4D
1356:  BCF    0A.4
1357:  BCF    03.5
1358:  CALL   1A5
1359:  BSF    0A.4
....................                                           } 
....................                                            
....................                                           if(currentPolishAmount<0){ 
....................                                           currentPolishAmount=0; 
....................                                           } 
....................                                        //Display/scroll the CurrentTime value on the displays 
....................                                        sequentialDisplayScan(); 
135A:  BCF    0A.4
135B:  BSF    0A.3
135C:  CALL   412
135D:  BSF    0A.4
135E:  BCF    0A.3
....................                                         
....................                                     }while(currentPolishAmount != 0); 
135F:  BSF    03.5
1360:  MOVF   30,F
1361:  BTFSS  03.2
1362:  GOTO   347
1363:  MOVF   31,F
1364:  BTFSS  03.2
1365:  GOTO   347
....................                                         
....................                                     LockingMechanism=0; 
1366:  BCF    03.5
1367:  CLRF   2F
....................                                     allProcessComplate_flag = 1; 
1368:  MOVLW  01
1369:  BSF    03.5
136A:  MOVWF  32
136B:  BCF    03.5
....................                               } 
....................                                                      
....................                              //Display/scroll the CurrentTime value on the displays 
....................                              sequentialDisplayScan(); 
136C:  BCF    0A.4
136D:  BSF    0A.3
136E:  CALL   412
136F:  BSF    0A.4
1370:  BCF    0A.3
....................                               
....................                               
....................                              /**  
....................                                * These conditions are used to break out of the loop for various reasons,  
....................                                * and will redirect the program back to the main menu. 
....................                                *  
....................                                * - If allProcessComplete_flag is 1, indicating all processes are finished, the loop will exit. 
....................                                * - If CurrentTime equals 1 and SelectedTime equals 60, the loop will also exit. 
....................                                */ 
....................                                 if(allProcessComplate_flag == 1){ 
1371:  BSF    03.5
1372:  DECFSZ 32,W
1373:  GOTO   375
....................                                     break;     
1374:  GOTO   38B
....................                                 }                                     
....................                                 if((CurrentTime==1) && (SelectedTime==60)){ 
1375:  DECFSZ 7B,W
1376:  GOTO   381
1377:  MOVF   7C,F
1378:  BTFSS  03.2
1379:  GOTO   381
137A:  MOVF   7D,W
137B:  SUBLW  3C
137C:  BTFSS  03.2
137D:  GOTO   381
137E:  MOVF   7E,F
137F:  BTFSC  03.2
....................                                   break; 
1380:  GOTO   38B
....................                                 } 
....................              
....................                         }while( (CurrentTime!=0) ); 
1381:  MOVF   7B,F
1382:  BTFSC  03.2
1383:  GOTO   386
1384:  BCF    03.5
1385:  GOTO   236
1386:  MOVF   7C,F
1387:  BTFSC  03.2
1388:  GOTO   38B
1389:  BCF    03.5
138A:  GOTO   236
138B:  BCF    03.5
....................                          
....................                 } 
....................                             
....................       /****************************************************************************************************/   
....................       /*         END- Foam, Washing, Ventilation, and Polishing Operations will be executed -END      */   
....................       /****************************************************************************************************/   
....................        
....................        
....................                delay_ms(100); 
138C:  MOVLW  64
138D:  BSF    03.5
138E:  MOVWF  4D
138F:  BCF    0A.4
1390:  BCF    03.5
1391:  CALL   1A5
1392:  BSF    0A.4
....................                 
....................             //Load the initial value(0) into the segments. 
....................             loadZeroValue_2_DisplaySegment(); 
1393:  BCF    0A.4
1394:  GOTO   7C9
1395:  BSF    0A.4
....................           
....................           
....................        //If the cancel operation button hasn't been pressed, it will return to the main menu again 
....................       }while(OPS_Status!=55); 
1396:  MOVF   2D,W
1397:  SUBLW  37
1398:  BTFSC  03.2
1399:  GOTO   39C
139A:  BSF    03.5
139B:  GOTO   0AB
....................        
....................   displayProcessCompletionStatus();//buraya koyarsan ana menüye gitmez ki 
139C:  BCF    0A.4
139D:  BSF    0A.3
139E:  GOTO   4C7
139F:  BSF    0A.4
13A0:  BCF    0A.3
13A1:  GOTO   08C
....................    
....................        
....................        
.................... }//--------------------- END---MAIN WHILE(1)---END----------------------------// 
....................  
....................  
....................    
....................        
.................... /*-----------------------------------------------------------------------------------------------------------------*/   
.................... /*                             >>> END - SEQUENTIAL STEPS OF THE OPERATION - END <<<                               */   
.................... /*-----------------------------------------------------------------------------------------------------------------*/   
....................     
....................   
.................... } 
....................  
13A2:  SLEEP
....................  
.................... /* ======== -BEGIN- SYSTEM CONFIGURATION FUNCTIONS -BEGIN- ======== */ 
.................... //Function-1 
.................... void SubSystem_Init(void){ 
....................  lcd_init(); 
....................  trisSetting_Init(); 
....................  displaySetting_Init(); 
....................  interruptSetting_Init(); 
....................  adcSetting_Init(); 
*
0296:  BCF    0A.3
0297:  BSF    0A.4
0298:  GOTO   08B (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void trisSetting_Init(){ 
....................    set_tris_b(0x01); //B0       ==> Cancel all operations and close the system 
*
0266:  MOVLW  01
0267:  MOVWF  06
....................                      //B1 to B7 ==> 7-Segment Display  
....................                       
....................    //Assign the Display Scanning switches as outputs 
....................    output_drive(pin_HundredDigit_switch);  
0268:  BCF    09.2
....................    output_drive(pin_TensDigit_switch); 
0269:  BCF    09.0
....................    output_drive(pin_UnitDigit_switch); 
026A:  BCF    09.1
....................       
.................... } 
....................  
.................... //Function-3 
.................... void interruptSetting_Init(){ 
.................... //---> OPERATION CANCEL BUTTON CONFIGURATION  <---// 
....................  
....................         //Interrupt on rising edge of INT pin  
....................         my_TIM0_OPTION_REG |= 0x40; 
*
0273:  BSF    03.5
0274:  BSF    01.6
....................         //External Interrupt Enable &  Global Interrupt Enable  
....................         my_INTCON_REG |= 0x90;  
0275:  MOVLW  90
0276:  BCF    03.5
0277:  IORWF  0B,F
....................       
.................... //---> TIMER & INTERRUPT CONFIGURATION  <---// 
....................       
....................         // T(overflow) = InstructionTime*PSC*(256-TIM0_val) 
....................         //        64mS = 1uS * 256 * (256-56) 
....................         my_TIM0_OPTION_REG &= 0xC7 ; 
0278:  MOVLW  C7
0279:  BSF    03.5
027A:  ANDWF  01,F
....................         my_TIM0_MODULE_REG = 56; 
027B:  MOVLW  38
027C:  BCF    03.5
027D:  MOVWF  01
....................  
.................... } 
....................  
.................... //Function-4 
.................... void adcSetting_Init(){ 
....................      //-CONFIG--> Surfing Potentiometer & Timer Potentiometer 
....................         setup_adc_ports(sAN0|sAN1); 
027E:  BSF    03.5
027F:  BSF    03.6
0280:  MOVF   09,W
0281:  ANDLW  C0
0282:  MOVWF  09
0283:  BCF    03.6
0284:  BCF    1F.4
0285:  BCF    1F.5
0286:  MOVLW  03
0287:  BSF    03.6
0288:  MOVWF  08
....................         setup_adc(adc_clock_div_32); 
0289:  BCF    03.5
028A:  BCF    03.6
028B:  BCF    1F.6
028C:  BSF    1F.7
028D:  BSF    03.5
028E:  BSF    1F.7
028F:  BCF    03.5
0290:  BSF    1F.0
....................         delay_us(20); 
0291:  MOVLW  06
0292:  MOVWF  77
0293:  DECFSZ 77,F
0294:  GOTO   293
0295:  NOP
....................         
....................      //-CONFIG--> Process Intensity Potentiometer 
.................... } 
....................  
.................... //Function-5 
.................... void displaySetting_Init(){ 
....................  
....................    //Apply voltage to display the digits 
....................    output_high(pin_UnitDigit_switch);     
*
026B:  BCF    03.5
026C:  BSF    09.1
....................    output_high(pin_TensDigit_switch);      
026D:  BSF    09.0
....................    output_high(pin_HundredDigit_switch);  
026E:  BSF    09.2
....................     
....................    //Load the initial value into the segments. 
....................    output_b(segmentTable[0]);  
026F:  BSF    03.5
0270:  MOVF   20,W
0271:  BCF    03.5
0272:  MOVWF  06
.................... } 
....................  
.................... /* ======== -END- SYSTEM CONFIGURATION FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
.................... /* ======== -BEGIN- LCD SCREEN FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief :It sequentially displays a welcome message and  
....................  *        prompts the user to present their ID card. 
....................  */ 
.................... void SubSystem_lcd_IdleStatus(void){ 
....................       printf(lcd_putc,"\f"); 
*
035B:  MOVLW  0C
035C:  BSF    03.5
035D:  MOVWF  4C
035E:  BCF    03.5
035F:  CALL   2AD
....................       lcd_gotoxy(4,1); 
0360:  MOVLW  04
0361:  BSF    03.5
0362:  MOVWF  4D
0363:  MOVLW  01
0364:  MOVWF  4E
0365:  BCF    03.5
0366:  CALL   299
....................       printf(lcd_putc,"Mikroleum'a"); 
0367:  MOVLW  96
0368:  BSF    03.6
0369:  MOVWF  0D
036A:  MOVLW  00
036B:  MOVWF  0F
036C:  BCF    03.6
036D:  CALL   2E7
....................       lcd_gotoxy(4,2); 
036E:  MOVLW  04
036F:  BSF    03.5
0370:  MOVWF  4D
0371:  MOVLW  02
0372:  MOVWF  4E
0373:  BCF    03.5
0374:  CALL   299
....................       printf(lcd_putc,"Hosgeldiniz"); 
0375:  MOVLW  9C
0376:  BSF    03.6
0377:  MOVWF  0D
0378:  MOVLW  00
0379:  MOVWF  0F
037A:  BCF    03.6
037B:  CALL   2E7
....................       delay_ms(800); 
037C:  MOVLW  04
037D:  BSF    03.5
037E:  MOVWF  41
037F:  MOVLW  C8
0380:  MOVWF  4D
0381:  BCF    03.5
0382:  CALL   1A5
0383:  BSF    03.5
0384:  DECFSZ 41,F
0385:  GOTO   37F
....................       printf(lcd_putc,"\f"); 
0386:  MOVLW  0C
0387:  MOVWF  4C
0388:  BCF    03.5
0389:  CALL   2AD
....................        
....................       lcd_gotoxy(1,1); 
038A:  MOVLW  01
038B:  BSF    03.5
038C:  MOVWF  4D
038D:  MOVWF  4E
038E:  BCF    03.5
038F:  CALL   299
....................       printf(lcd_putc,"Lutfen Sifrenizi"); 
0390:  MOVLW  A2
0391:  BSF    03.6
0392:  MOVWF  0D
0393:  MOVLW  00
0394:  MOVWF  0F
0395:  BCF    03.6
0396:  CALL   2E7
....................       lcd_gotoxy(6,2); 
0397:  MOVLW  06
0398:  BSF    03.5
0399:  MOVWF  4D
039A:  MOVLW  02
039B:  MOVWF  4E
039C:  BCF    03.5
039D:  CALL   299
....................       printf(lcd_putc,"Giriniz"); 
039E:  MOVLW  AB
039F:  BSF    03.6
03A0:  MOVWF  0D
03A1:  MOVLW  00
03A2:  MOVWF  0F
03A3:  BCF    03.6
03A4:  CALL   2E7
....................       delay_ms(800); 
03A5:  MOVLW  04
03A6:  BSF    03.5
03A7:  MOVWF  41
03A8:  MOVLW  C8
03A9:  MOVWF  4D
03AA:  BCF    03.5
03AB:  CALL   1A5
03AC:  BSF    03.5
03AD:  DECFSZ 41,F
03AE:  GOTO   3A8
....................       printf(lcd_putc,"\f"); 
03AF:  MOVLW  0C
03B0:  MOVWF  4C
03B1:  BCF    03.5
03B2:  CALL   2AD
03B3:  BCF    0A.3
03B4:  BSF    0A.4
03B5:  GOTO   093 (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void NavigateOperationMenu(void){ 
....................    printf(lcd_putc, "\f"); // LCD'yi temizle 
*
0444:  MOVLW  0C
0445:  BSF    03.5
0446:  MOVWF  4C
0447:  BCF    03.5
0448:  CALL   2AD
....................  
....................     // 1. Seçenek 
....................     if (Index_OptionMenu == 0) { 
0449:  MOVF   41,F
044A:  BTFSS  03.2
044B:  GOTO   467
....................         lcd_gotoxy(1, 1); 
044C:  MOVLW  01
044D:  BSF    03.5
044E:  MOVWF  4D
044F:  MOVWF  4E
0450:  BCF    03.5
0451:  CALL   299
....................         printf(lcd_putc, "1-Kopuk Islem <-"); 
0452:  MOVLW  AF
0453:  BSF    03.6
0454:  MOVWF  0D
0455:  MOVLW  00
0456:  MOVWF  0F
0457:  BCF    03.6
0458:  CALL   2E7
....................         lcd_gotoxy(1, 2); 
0459:  MOVLW  01
045A:  BSF    03.5
045B:  MOVWF  4D
045C:  MOVLW  02
045D:  MOVWF  4E
045E:  BCF    03.5
045F:  CALL   299
....................         printf(lcd_putc, "2-Su Islem");    
0460:  MOVLW  B8
0461:  BSF    03.6
0462:  MOVWF  0D
0463:  MOVLW  00
0464:  MOVWF  0F
0465:  BCF    03.6
0466:  CALL   2E7
....................     }  
....................  
....................     // 2. Seçenek 
....................     if (Index_OptionMenu == 1) { 
0467:  DECFSZ 41,W
0468:  GOTO   484
....................         lcd_gotoxy(1, 1); 
0469:  MOVLW  01
046A:  BSF    03.5
046B:  MOVWF  4D
046C:  MOVWF  4E
046D:  BCF    03.5
046E:  CALL   299
....................         printf(lcd_putc, "2-Su Islem <-"); 
046F:  MOVLW  BE
0470:  BSF    03.6
0471:  MOVWF  0D
0472:  MOVLW  00
0473:  MOVWF  0F
0474:  BCF    03.6
0475:  CALL   2E7
....................         lcd_gotoxy(1, 2); 
0476:  MOVLW  01
0477:  BSF    03.5
0478:  MOVWF  4D
0479:  MOVLW  02
047A:  MOVWF  4E
047B:  BCF    03.5
047C:  CALL   299
....................         printf(lcd_putc, "3-Hava Islem");        
047D:  MOVLW  C5
047E:  BSF    03.6
047F:  MOVWF  0D
0480:  MOVLW  00
0481:  MOVWF  0F
0482:  BCF    03.6
0483:  CALL   2E7
....................     } 
....................      
....................     // 3. Seçenek 
....................         if (Index_OptionMenu == 2) { 
0484:  MOVF   41,W
0485:  SUBLW  02
0486:  BTFSS  03.2
0487:  GOTO   4A3
....................         lcd_gotoxy(1, 1); 
0488:  MOVLW  01
0489:  BSF    03.5
048A:  MOVWF  4D
048B:  MOVWF  4E
048C:  BCF    03.5
048D:  CALL   299
....................         printf(lcd_putc, "3-Hava Islem <-"); 
048E:  MOVLW  CC
048F:  BSF    03.6
0490:  MOVWF  0D
0491:  MOVLW  00
0492:  MOVWF  0F
0493:  BCF    03.6
0494:  CALL   2E7
....................         lcd_gotoxy(1, 2); 
0495:  MOVLW  01
0496:  BSF    03.5
0497:  MOVWF  4D
0498:  MOVLW  02
0499:  MOVWF  4E
049A:  BCF    03.5
049B:  CALL   299
....................         printf(lcd_putc, "4-Cila Islem");    
049C:  MOVLW  D4
049D:  BSF    03.6
049E:  MOVWF  0D
049F:  MOVLW  00
04A0:  MOVWF  0F
04A1:  BCF    03.6
04A2:  CALL   2E7
....................     }  
....................  
....................     // 4. Seçenek 
....................     if (Index_OptionMenu == 3) { 
04A3:  MOVF   41,W
04A4:  SUBLW  03
04A5:  BTFSS  03.2
04A6:  GOTO   4C2
....................         lcd_gotoxy(1, 1); 
04A7:  MOVLW  01
04A8:  BSF    03.5
04A9:  MOVWF  4D
04AA:  MOVWF  4E
04AB:  BCF    03.5
04AC:  CALL   299
....................         printf(lcd_putc, "4-Cila Islem <-"); 
04AD:  MOVLW  DB
04AE:  BSF    03.6
04AF:  MOVWF  0D
04B0:  MOVLW  00
04B1:  MOVWF  0F
04B2:  BCF    03.6
04B3:  CALL   2E7
....................         lcd_gotoxy(1, 2); 
04B4:  MOVLW  01
04B5:  BSF    03.5
04B6:  MOVWF  4D
04B7:  MOVLW  02
04B8:  MOVWF  4E
04B9:  BCF    03.5
04BA:  CALL   299
....................         printf(lcd_putc, "5-Kayit Islem");     
04BB:  MOVLW  E3
04BC:  BSF    03.6
04BD:  MOVWF  0D
04BE:  MOVLW  00
04BF:  MOVWF  0F
04C0:  BCF    03.6
04C1:  CALL   2E7
....................     } 
....................      
....................     // 5. Seçenek 
....................     if (Index_OptionMenu == 4) { 
04C2:  MOVF   41,W
04C3:  SUBLW  04
04C4:  BTFSS  03.2
04C5:  GOTO   4D3
....................         lcd_gotoxy(1, 1); 
04C6:  MOVLW  01
04C7:  BSF    03.5
04C8:  MOVWF  4D
04C9:  MOVWF  4E
04CA:  BCF    03.5
04CB:  CALL   299
....................         printf(lcd_putc, "5-Kayit Islem <-");  
04CC:  MOVLW  EA
04CD:  BSF    03.6
04CE:  MOVWF  0D
04CF:  MOVLW  00
04D0:  MOVWF  0F
04D1:  BCF    03.6
04D2:  CALL   2E7
....................     } 
04D3:  BCF    0A.3
04D4:  BSF    0A.4
04D5:  GOTO   0E8 (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Function-3 
.................... void NavigateTimeMoneyPreferenceMenu(void){ 
....................     
....................    printf(lcd_putc, "\f");  
*
064E:  MOVLW  0C
064F:  BSF    03.5
0650:  MOVWF  4C
0651:  BCF    03.5
0652:  CALL   2AD
....................    lcd_gotoxy(1,1); 
0653:  MOVLW  01
0654:  BSF    03.5
0655:  MOVWF  4D
0656:  MOVWF  4E
0657:  BCF    03.5
0658:  CALL   299
....................    printf(lcd_putc, "Ucret:%d tl",(unsigned int)((time_arr[Index_TimeMoneyPreference]/10)*2)); 
0659:  BCF    03.0
065A:  RLF    42,W
065B:  ADDLW  4D
065C:  MOVWF  04
065D:  BCF    03.7
065E:  INCF   04,F
065F:  MOVF   00,W
0660:  BSF    03.5
0661:  MOVWF  42
0662:  DECF   04,F
0663:  MOVF   00,W
0664:  MOVWF  41
0665:  MOVF   42,W
0666:  MOVWF  44
0667:  MOVF   41,W
0668:  MOVWF  43
0669:  CLRF   46
066A:  MOVLW  0A
066B:  MOVWF  45
066C:  BCF    03.5
066D:  CALL   41D
066E:  MOVF   79,W
066F:  BSF    03.5
0670:  MOVWF  42
0671:  MOVF   78,W
0672:  MOVWF  41
0673:  BCF    03.0
0674:  RLF    41,W
0675:  MOVWF  79
0676:  RLF    42,W
0677:  MOVWF  7A
0678:  MOVF   79,W
0679:  MOVWF  41
067A:  MOVLW  F3
067B:  BCF    03.5
067C:  BSF    03.6
067D:  MOVWF  0D
067E:  MOVLW  00
067F:  MOVWF  0F
0680:  BCF    03.0
0681:  MOVLW  06
0682:  BSF    03.5
0683:  BCF    03.6
0684:  MOVWF  43
0685:  BCF    03.5
0686:  CALL   4D6
0687:  BSF    03.5
0688:  MOVF   41,W
0689:  MOVWF  42
068A:  MOVLW  18
068B:  MOVWF  43
068C:  BCF    03.5
068D:  CALL   567
068E:  MOVLW  20
068F:  BSF    03.5
0690:  MOVWF  4C
0691:  BCF    03.5
0692:  CALL   2AD
0693:  MOVLW  74
0694:  BSF    03.5
0695:  MOVWF  4C
0696:  BCF    03.5
0697:  CALL   2AD
0698:  MOVLW  6C
0699:  BSF    03.5
069A:  MOVWF  4C
069B:  BCF    03.5
069C:  CALL   2AD
....................    lcd_gotoxy(1,2); 
069D:  MOVLW  01
069E:  BSF    03.5
069F:  MOVWF  4D
06A0:  MOVLW  02
06A1:  MOVWF  4E
06A2:  BCF    03.5
06A3:  CALL   299
....................    printf(lcd_putc, "Sure:%ld",time_arr[Index_TimeMoneyPreference]); 
06A4:  BCF    03.0
06A5:  RLF    42,W
06A6:  ADDLW  4D
06A7:  MOVWF  04
06A8:  BCF    03.7
06A9:  INCF   04,F
06AA:  MOVF   00,W
06AB:  BSF    03.5
06AC:  MOVWF  42
06AD:  DECF   04,F
06AE:  MOVF   00,W
06AF:  MOVWF  41
06B0:  MOVLW  F9
06B1:  BCF    03.5
06B2:  BSF    03.6
06B3:  MOVWF  0D
06B4:  MOVLW  00
06B5:  MOVWF  0F
06B6:  BCF    03.0
06B7:  MOVLW  05
06B8:  BSF    03.5
06B9:  BCF    03.6
06BA:  MOVWF  43
06BB:  BCF    03.5
06BC:  CALL   4D6
06BD:  MOVLW  10
06BE:  MOVWF  04
06BF:  BSF    03.5
06C0:  MOVF   42,W
06C1:  MOVWF  44
06C2:  MOVF   41,W
06C3:  MOVWF  43
06C4:  BCF    03.5
06C5:  CALL   5CA
....................    lcd_gotoxy(10,2); 
06C6:  MOVLW  0A
06C7:  BSF    03.5
06C8:  MOVWF  4D
06C9:  MOVLW  02
06CA:  MOVWF  4E
06CB:  BCF    03.5
06CC:  CALL   299
....................    printf(lcd_putc, "Sec:"); 
06CD:  MOVLW  FE
06CE:  BSF    03.6
06CF:  MOVWF  0D
06D0:  MOVLW  00
06D1:  MOVWF  0F
06D2:  BCF    03.6
06D3:  CALL   2E7
....................    lcd_gotoxy(14,2); 
06D4:  MOVLW  0E
06D5:  BSF    03.5
06D6:  MOVWF  4D
06D7:  MOVLW  02
06D8:  MOVWF  4E
06D9:  BCF    03.5
06DA:  CALL   299
....................    printf(lcd_putc, "%c",SelectionState); 
06DB:  MOVF   2E,W
06DC:  BSF    03.5
06DD:  MOVWF  4C
06DE:  BCF    03.5
06DF:  CALL   2AD
....................     
....................     
....................    if(input(button_Select) == 1){ 
06E0:  BSF    03.5
06E1:  BSF    05.5
06E2:  BCF    03.5
06E3:  BTFSS  05.5
06E4:  GOTO   778
....................       SelectionState = 'X'; 
06E5:  MOVLW  58
06E6:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 0){ 
06E7:  MOVF   41,F
06E8:  BTFSS  03.2
06E9:  GOTO   717
....................          MikroClient[ClientNumber].time_Foaming = time_arr[Index_TimeMoneyPreference]; 
06EA:  RLF    40,W
06EB:  MOVWF  77
06EC:  RLF    77,F
06ED:  RLF    77,F
06EE:  MOVLW  F8
06EF:  ANDWF  77,F
06F0:  MOVF   77,W
06F1:  ADDLW  30
06F2:  MOVWF  78
06F3:  CLRF   7A
06F4:  BTFSC  03.0
06F5:  INCF   7A,F
06F6:  MOVF   78,W
06F7:  BSF    03.5
06F8:  MOVWF  41
06F9:  MOVF   7A,W
06FA:  MOVWF  42
06FB:  BCF    03.0
06FC:  BCF    03.5
06FD:  RLF    42,W
06FE:  ADDLW  4D
06FF:  MOVWF  04
0700:  BCF    03.7
0701:  INCF   04,F
0702:  MOVF   00,W
0703:  MOVWF  7A
0704:  DECF   04,F
0705:  MOVF   00,W
0706:  BSF    03.5
0707:  MOVWF  43
0708:  MOVF   7A,W
0709:  MOVWF  44
070A:  MOVF   41,W
070B:  MOVWF  04
070C:  BCF    03.7
070D:  BTFSC  42.0
070E:  BSF    03.7
070F:  INCF   04,F
0710:  MOVF   44,W
0711:  MOVWF  00
0712:  DECF   04,F
0713:  MOVF   43,W
0714:  MOVWF  00
....................       } 
0715:  GOTO   777
0716:  BCF    03.5
....................       else if(Index_OptionMenu == 1){ 
0717:  DECFSZ 41,W
0718:  GOTO   747
....................          MikroClient[ClientNumber].time_Washing = time_arr[Index_TimeMoneyPreference]; 
0719:  RLF    40,W
071A:  MOVWF  77
071B:  RLF    77,F
071C:  RLF    77,F
071D:  MOVLW  F8
071E:  ANDWF  77,F
071F:  MOVF   77,W
0720:  ADDLW  02
0721:  ADDLW  30
0722:  MOVWF  78
0723:  CLRF   7A
0724:  BTFSC  03.0
0725:  INCF   7A,F
0726:  MOVF   78,W
0727:  BSF    03.5
0728:  MOVWF  41
0729:  MOVF   7A,W
072A:  MOVWF  42
072B:  BCF    03.0
072C:  BCF    03.5
072D:  RLF    42,W
072E:  ADDLW  4D
072F:  MOVWF  04
0730:  BCF    03.7
0731:  INCF   04,F
0732:  MOVF   00,W
0733:  MOVWF  7A
0734:  DECF   04,F
0735:  MOVF   00,W
0736:  BSF    03.5
0737:  MOVWF  43
0738:  MOVF   7A,W
0739:  MOVWF  44
073A:  MOVF   41,W
073B:  MOVWF  04
073C:  BCF    03.7
073D:  BTFSC  42.0
073E:  BSF    03.7
073F:  INCF   04,F
0740:  MOVF   44,W
0741:  MOVWF  00
0742:  DECF   04,F
0743:  MOVF   43,W
0744:  MOVWF  00
....................       } 
0745:  GOTO   777
0746:  BCF    03.5
....................       else if(Index_OptionMenu == 2){ 
0747:  MOVF   41,W
0748:  SUBLW  02
0749:  BTFSS  03.2
074A:  GOTO   778
....................          MikroClient[ClientNumber].time_Ventilation = time_arr[Index_TimeMoneyPreference]; 
074B:  RLF    40,W
074C:  MOVWF  77
074D:  RLF    77,F
074E:  RLF    77,F
074F:  MOVLW  F8
0750:  ANDWF  77,F
0751:  MOVF   77,W
0752:  ADDLW  04
0753:  ADDLW  30
0754:  MOVWF  78
0755:  CLRF   7A
0756:  BTFSC  03.0
0757:  INCF   7A,F
0758:  MOVF   78,W
0759:  BSF    03.5
075A:  MOVWF  41
075B:  MOVF   7A,W
075C:  MOVWF  42
075D:  BCF    03.0
075E:  BCF    03.5
075F:  RLF    42,W
0760:  ADDLW  4D
0761:  MOVWF  04
0762:  BCF    03.7
0763:  INCF   04,F
0764:  MOVF   00,W
0765:  MOVWF  7A
0766:  DECF   04,F
0767:  MOVF   00,W
0768:  BSF    03.5
0769:  MOVWF  43
076A:  MOVF   7A,W
076B:  MOVWF  44
076C:  MOVF   41,W
076D:  MOVWF  04
076E:  BCF    03.7
076F:  BTFSC  42.0
0770:  BSF    03.7
0771:  INCF   04,F
0772:  MOVF   44,W
0773:  MOVWF  00
0774:  DECF   04,F
0775:  MOVF   43,W
0776:  MOVWF  00
0777:  BCF    03.5
....................       } 
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
0778:  BSF    03.5
0779:  BSF    3E.0
077A:  MOVF   3E,W
077B:  MOVWF  07
077C:  BCF    03.5
077D:  BTFSS  07.0
077E:  GOTO   781
....................       SelectionState = ' '; 
077F:  MOVLW  20
0780:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
0781:  MOVLW  50
0782:  BSF    03.5
0783:  MOVWF  4D
0784:  BCF    03.5
0785:  CALL   1A5
0786:  BCF    0A.3
0787:  BSF    0A.4
0788:  GOTO   130 (RETURN)
.................... } 
....................  
.................... //Function-4 
.................... void NavigatePolishingMenu(){ 
....................    printf(lcd_putc, "\f");  
*
0800:  MOVLW  0C
0801:  BSF    03.5
0802:  MOVWF  4C
0803:  BCF    0A.3
0804:  BCF    03.5
0805:  CALL   2AD
0806:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
0807:  MOVLW  01
0808:  BSF    03.5
0809:  MOVWF  4D
080A:  MOVWF  4E
080B:  BCF    0A.3
080C:  BCF    03.5
080D:  CALL   299
080E:  BSF    0A.3
....................    printf(lcd_putc, "Ucret:%ld tl",(15*mililitrePolish[Index_PolishMililitre])); 
080F:  BCF    03.0
0810:  RLF    43,W
0811:  ADDLW  69
0812:  MOVWF  04
0813:  BCF    03.7
0814:  INCF   04,F
0815:  MOVF   00,W
0816:  MOVWF  7A
0817:  DECF   04,F
0818:  MOVF   00,W
0819:  BSF    03.5
081A:  MOVWF  41
081B:  MOVF   7A,W
081C:  MOVWF  42
081D:  CLRF   46
081E:  MOVLW  0F
081F:  MOVWF  45
0820:  MOVF   42,W
0821:  MOVWF  48
0822:  MOVF   41,W
0823:  MOVWF  47
0824:  BCF    0A.3
0825:  BCF    03.5
0826:  CALL   406
0827:  BSF    0A.3
0828:  MOVF   79,W
0829:  BSF    03.5
082A:  MOVWF  42
082B:  MOVF   78,W
082C:  MOVWF  41
082D:  MOVLW  01
082E:  BCF    03.5
082F:  BSF    03.6
0830:  MOVWF  0D
0831:  MOVLW  01
0832:  MOVWF  0F
0833:  BCF    03.0
0834:  MOVLW  06
0835:  BSF    03.5
0836:  BCF    03.6
0837:  MOVWF  43
0838:  BCF    0A.3
0839:  BCF    03.5
083A:  CALL   4D6
083B:  BSF    0A.3
083C:  MOVLW  10
083D:  MOVWF  04
083E:  BSF    03.5
083F:  MOVF   42,W
0840:  MOVWF  44
0841:  MOVF   41,W
0842:  MOVWF  43
0843:  BCF    0A.3
0844:  BCF    03.5
0845:  CALL   5CA
0846:  BSF    0A.3
0847:  MOVLW  20
0848:  BSF    03.5
0849:  MOVWF  4C
084A:  BCF    0A.3
084B:  BCF    03.5
084C:  CALL   2AD
084D:  BSF    0A.3
084E:  MOVLW  74
084F:  BSF    03.5
0850:  MOVWF  4C
0851:  BCF    0A.3
0852:  BCF    03.5
0853:  CALL   2AD
0854:  BSF    0A.3
0855:  MOVLW  6C
0856:  BSF    03.5
0857:  MOVWF  4C
0858:  BCF    0A.3
0859:  BCF    03.5
085A:  CALL   2AD
085B:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
085C:  MOVLW  01
085D:  BSF    03.5
085E:  MOVWF  4D
085F:  MOVLW  02
0860:  MOVWF  4E
0861:  BCF    0A.3
0862:  BCF    03.5
0863:  CALL   299
0864:  BSF    0A.3
....................    printf(lcd_putc, "Ml:%ld",(unsigned long int)(100*mililitrePolish[Index_PolishMililitre])); 
0865:  BCF    03.0
0866:  RLF    43,W
0867:  ADDLW  69
0868:  MOVWF  04
0869:  BCF    03.7
086A:  INCF   04,F
086B:  MOVF   00,W
086C:  MOVWF  7A
086D:  DECF   04,F
086E:  MOVF   00,W
086F:  BSF    03.5
0870:  MOVWF  41
0871:  MOVF   7A,W
0872:  MOVWF  42
0873:  CLRF   46
0874:  MOVLW  64
0875:  MOVWF  45
0876:  MOVF   42,W
0877:  MOVWF  48
0878:  MOVF   41,W
0879:  MOVWF  47
087A:  BCF    0A.3
087B:  BCF    03.5
087C:  CALL   406
087D:  BSF    0A.3
087E:  MOVF   79,W
087F:  BSF    03.5
0880:  MOVWF  42
0881:  MOVF   78,W
0882:  MOVWF  41
0883:  MOVLW  4D
0884:  MOVWF  4C
0885:  BCF    0A.3
0886:  BCF    03.5
0887:  CALL   2AD
0888:  BSF    0A.3
0889:  MOVLW  6C
088A:  BSF    03.5
088B:  MOVWF  4C
088C:  BCF    0A.3
088D:  BCF    03.5
088E:  CALL   2AD
088F:  BSF    0A.3
0890:  MOVLW  3A
0891:  BSF    03.5
0892:  MOVWF  4C
0893:  BCF    0A.3
0894:  BCF    03.5
0895:  CALL   2AD
0896:  BSF    0A.3
0897:  MOVLW  10
0898:  MOVWF  04
0899:  BSF    03.5
089A:  MOVF   42,W
089B:  MOVWF  44
089C:  MOVF   41,W
089D:  MOVWF  43
089E:  BCF    0A.3
089F:  BCF    03.5
08A0:  CALL   5CA
08A1:  BSF    0A.3
....................    lcd_gotoxy(10,2); 
08A2:  MOVLW  0A
08A3:  BSF    03.5
08A4:  MOVWF  4D
08A5:  MOVLW  02
08A6:  MOVWF  4E
08A7:  BCF    0A.3
08A8:  BCF    03.5
08A9:  CALL   299
08AA:  BSF    0A.3
....................    printf(lcd_putc, "Sec:"); 
08AB:  MOVLW  08
08AC:  BSF    03.6
08AD:  MOVWF  0D
08AE:  MOVLW  01
08AF:  MOVWF  0F
08B0:  BCF    0A.3
08B1:  BCF    03.6
08B2:  CALL   2E7
08B3:  BSF    0A.3
....................    lcd_gotoxy(14,2); 
08B4:  MOVLW  0E
08B5:  BSF    03.5
08B6:  MOVWF  4D
08B7:  MOVLW  02
08B8:  MOVWF  4E
08B9:  BCF    0A.3
08BA:  BCF    03.5
08BB:  CALL   299
08BC:  BSF    0A.3
....................    printf(lcd_putc, "%c",SelectionState); 
08BD:  MOVF   2E,W
08BE:  BSF    03.5
08BF:  MOVWF  4C
08C0:  BCF    0A.3
08C1:  BCF    03.5
08C2:  CALL   2AD
08C3:  BSF    0A.3
....................     
....................     
....................    if(input(button_Select) == 1){ 
08C4:  BSF    03.5
08C5:  BSF    05.5
08C6:  BCF    03.5
08C7:  BTFSS  05.5
08C8:  GOTO   11B
....................       SelectionState = 'X'; 
08C9:  MOVLW  58
08CA:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 3){ 
08CB:  MOVF   41,W
08CC:  SUBLW  03
08CD:  BTFSS  03.2
08CE:  GOTO   11B
....................          MikroClient[ClientNumber].mililitre_Polishing = (100*mililitrePolish[Index_PolishMililitre]);  
08CF:  RLF    40,W
08D0:  MOVWF  77
08D1:  RLF    77,F
08D2:  RLF    77,F
08D3:  MOVLW  F8
08D4:  ANDWF  77,F
08D5:  MOVF   77,W
08D6:  ADDLW  06
08D7:  ADDLW  30
08D8:  BSF    03.5
08D9:  MOVWF  41
08DA:  CLRF   42
08DB:  BTFSC  03.0
08DC:  INCF   42,F
08DD:  BCF    03.0
08DE:  BCF    03.5
08DF:  RLF    43,W
08E0:  ADDLW  69
08E1:  MOVWF  04
08E2:  BCF    03.7
08E3:  INCF   04,F
08E4:  MOVF   00,W
08E5:  MOVWF  7A
08E6:  DECF   04,F
08E7:  MOVF   00,W
08E8:  BSF    03.5
08E9:  MOVWF  43
08EA:  MOVF   7A,W
08EB:  MOVWF  44
08EC:  CLRF   46
08ED:  MOVLW  64
08EE:  MOVWF  45
08EF:  MOVF   44,W
08F0:  MOVWF  48
08F1:  MOVF   43,W
08F2:  MOVWF  47
08F3:  BCF    0A.3
08F4:  BCF    03.5
08F5:  CALL   406
08F6:  BSF    0A.3
08F7:  MOVF   78,W
08F8:  BSF    03.5
08F9:  MOVWF  43
08FA:  MOVF   79,W
08FB:  MOVWF  44
08FC:  MOVF   41,W
08FD:  MOVWF  04
08FE:  BCF    03.7
08FF:  BTFSC  42.0
0900:  BSF    03.7
0901:  INCF   04,F
0902:  MOVF   44,W
0903:  MOVWF  00
0904:  DECF   04,F
0905:  MOVF   43,W
0906:  MOVWF  00
....................          currentPolishAmount = MikroClient[ClientNumber].mililitre_Polishing; 
0907:  BCF    03.5
0908:  RLF    40,W
0909:  MOVWF  77
090A:  RLF    77,F
090B:  RLF    77,F
090C:  MOVLW  F8
090D:  ANDWF  77,F
090E:  MOVF   77,W
090F:  ADDLW  06
0910:  ADDLW  30
0911:  MOVWF  04
0912:  BCF    03.7
0913:  INCF   04,F
0914:  MOVF   00,W
0915:  BSF    03.5
0916:  MOVWF  31
0917:  DECF   04,F
0918:  MOVF   00,W
0919:  MOVWF  30
091A:  BCF    03.5
....................       } 
....................        
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
091B:  BSF    03.5
091C:  BSF    3E.0
091D:  MOVF   3E,W
091E:  MOVWF  07
091F:  BCF    03.5
0920:  BTFSS  07.0
0921:  GOTO   124
....................       SelectionState = ' '; 
0922:  MOVLW  20
0923:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
0924:  MOVLW  50
0925:  BSF    03.5
0926:  MOVWF  4D
0927:  BCF    0A.3
0928:  BCF    03.5
0929:  CALL   1A5
092A:  BSF    0A.3
092B:  BCF    0A.3
092C:  BSF    0A.4
092D:  GOTO   17B (RETURN)
.................... } 
....................  
....................  
.................... void NavigatePastProcessesMenu(){ 
....................    printf(lcd_putc, "\f"); 
092E:  MOVLW  0C
092F:  BSF    03.5
0930:  MOVWF  4C
0931:  BCF    0A.3
0932:  BCF    03.5
0933:  CALL   2AD
0934:  BSF    0A.3
....................     
....................    // 1-Islem 
....................    if (Index_PastProcesses == 0) { 
0935:  MOVF   44,F
0936:  BTFSS  03.2
0937:  GOTO   15B
....................         lcd_gotoxy(1, 1); 
0938:  MOVLW  01
0939:  BSF    03.5
093A:  MOVWF  4D
093B:  MOVWF  4E
093C:  BCF    0A.3
093D:  BCF    03.5
093E:  CALL   299
093F:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 1 <-"); 
0940:  MOVLW  0B
0941:  BSF    03.6
0942:  MOVWF  0D
0943:  MOVLW  01
0944:  MOVWF  0F
0945:  BCF    0A.3
0946:  BCF    03.6
0947:  CALL   2E7
0948:  BSF    0A.3
....................         lcd_gotoxy(1, 2); 
0949:  MOVLW  01
094A:  BSF    03.5
094B:  MOVWF  4D
094C:  MOVLW  02
094D:  MOVWF  4E
094E:  BCF    0A.3
094F:  BCF    03.5
0950:  CALL   299
0951:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 2");    
0952:  MOVLW  12
0953:  BSF    03.6
0954:  MOVWF  0D
0955:  MOVLW  01
0956:  MOVWF  0F
0957:  BCF    0A.3
0958:  BCF    03.6
0959:  CALL   2E7
095A:  BSF    0A.3
....................     }  
....................  
....................     // 2-Islem 
....................    if (Index_PastProcesses == 1) { 
095B:  DECFSZ 44,W
095C:  GOTO   180
....................         lcd_gotoxy(1, 1); 
095D:  MOVLW  01
095E:  BSF    03.5
095F:  MOVWF  4D
0960:  MOVWF  4E
0961:  BCF    0A.3
0962:  BCF    03.5
0963:  CALL   299
0964:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 2 <-"); 
0965:  MOVLW  17
0966:  BSF    03.6
0967:  MOVWF  0D
0968:  MOVLW  01
0969:  MOVWF  0F
096A:  BCF    0A.3
096B:  BCF    03.6
096C:  CALL   2E7
096D:  BSF    0A.3
....................         lcd_gotoxy(1, 2); 
096E:  MOVLW  01
096F:  BSF    03.5
0970:  MOVWF  4D
0971:  MOVLW  02
0972:  MOVWF  4E
0973:  BCF    0A.3
0974:  BCF    03.5
0975:  CALL   299
0976:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 3");    
0977:  MOVLW  1E
0978:  BSF    03.6
0979:  MOVWF  0D
097A:  MOVLW  01
097B:  MOVWF  0F
097C:  BCF    0A.3
097D:  BCF    03.6
097E:  CALL   2E7
097F:  BSF    0A.3
....................     }  
....................        // 3-Islem 
....................    if (Index_PastProcesses == 2) { 
0980:  MOVF   44,W
0981:  SUBLW  02
0982:  BTFSS  03.2
0983:  GOTO   1A7
....................         lcd_gotoxy(1, 1); 
0984:  MOVLW  01
0985:  BSF    03.5
0986:  MOVWF  4D
0987:  MOVWF  4E
0988:  BCF    0A.3
0989:  BCF    03.5
098A:  CALL   299
098B:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 3 <-"); 
098C:  MOVLW  23
098D:  BSF    03.6
098E:  MOVWF  0D
098F:  MOVLW  01
0990:  MOVWF  0F
0991:  BCF    0A.3
0992:  BCF    03.6
0993:  CALL   2E7
0994:  BSF    0A.3
....................         lcd_gotoxy(1, 2); 
0995:  MOVLW  01
0996:  BSF    03.5
0997:  MOVWF  4D
0998:  MOVLW  02
0999:  MOVWF  4E
099A:  BCF    0A.3
099B:  BCF    03.5
099C:  CALL   299
099D:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 4");    
099E:  MOVLW  2A
099F:  BSF    03.6
09A0:  MOVWF  0D
09A1:  MOVLW  01
09A2:  MOVWF  0F
09A3:  BCF    0A.3
09A4:  BCF    03.6
09A5:  CALL   2E7
09A6:  BSF    0A.3
....................     }  
....................  
....................     // 4-Islem 
....................    if (Index_PastProcesses == 3) { 
09A7:  MOVF   44,W
09A8:  SUBLW  03
09A9:  BTFSS  03.2
09AA:  GOTO   1CE
....................         lcd_gotoxy(1, 1); 
09AB:  MOVLW  01
09AC:  BSF    03.5
09AD:  MOVWF  4D
09AE:  MOVWF  4E
09AF:  BCF    0A.3
09B0:  BCF    03.5
09B1:  CALL   299
09B2:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 4 <-"); 
09B3:  MOVLW  2F
09B4:  BSF    03.6
09B5:  MOVWF  0D
09B6:  MOVLW  01
09B7:  MOVWF  0F
09B8:  BCF    0A.3
09B9:  BCF    03.6
09BA:  CALL   2E7
09BB:  BSF    0A.3
....................         lcd_gotoxy(1, 2); 
09BC:  MOVLW  01
09BD:  BSF    03.5
09BE:  MOVWF  4D
09BF:  MOVLW  02
09C0:  MOVWF  4E
09C1:  BCF    0A.3
09C2:  BCF    03.5
09C3:  CALL   299
09C4:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 5");   
09C5:  MOVLW  36
09C6:  BSF    03.6
09C7:  MOVWF  0D
09C8:  MOVLW  01
09C9:  MOVWF  0F
09CA:  BCF    0A.3
09CB:  BCF    03.6
09CC:  CALL   2E7
09CD:  BSF    0A.3
....................     }  
....................      
....................    // 5-Islem 
....................    if (Index_PastProcesses == 4) { 
09CE:  MOVF   44,W
09CF:  SUBLW  04
09D0:  BTFSS  03.2
09D1:  GOTO   1E3
....................         lcd_gotoxy(1, 1); 
09D2:  MOVLW  01
09D3:  BSF    03.5
09D4:  MOVWF  4D
09D5:  MOVWF  4E
09D6:  BCF    0A.3
09D7:  BCF    03.5
09D8:  CALL   299
09D9:  BSF    0A.3
....................         printf(lcd_putc, "Islem - 5 <-"); 
09DA:  MOVLW  3B
09DB:  BSF    03.6
09DC:  MOVWF  0D
09DD:  MOVLW  01
09DE:  MOVWF  0F
09DF:  BCF    0A.3
09E0:  BCF    03.6
09E1:  CALL   2E7
09E2:  BSF    0A.3
....................     }  
....................    
....................    delay_ms(80); 
09E3:  MOVLW  50
09E4:  BSF    03.5
09E5:  MOVWF  4D
09E6:  BCF    0A.3
09E7:  BCF    03.5
09E8:  CALL   1A5
09E9:  BSF    0A.3
09EA:  BCF    0A.3
09EB:  BSF    0A.4
09EC:  GOTO   1C7 (RETURN)
....................  
.................... } 
....................  
.................... //Function-5 
.................... void DisplayRecordsSequentiallyOnLCD(){ 
....................    printf(lcd_putc,"\f"); 
....................    lcd_gotoxy(2,1); 
....................    printf(lcd_putc,"CLOSING"); 
....................    delay_ms(1000); 
....................    printf(lcd_putc,"\f");   
....................    lcd_gotoxy(1,1); 
....................    printf(lcd_putc, "Kopuk:%ld", MikroClient[ClientNumber].time_Foaming); 
....................    lcd_gotoxy(1,2); 
....................    printf(lcd_putc, "Su::%ld",MikroClient[ClientNumber].time_Washing); 
....................    delay_ms(2000); 
....................    printf(lcd_putc,"\f");   
....................    lcd_gotoxy(1,1); 
....................    printf(lcd_putc, "Hava:%ld", MikroClient[ClientNumber].time_Ventilation); 
....................    lcd_gotoxy(1,2); 
....................     printf(lcd_putc, "Cila:%ld", MikroClient[ClientNumber].mililitre_Polishing); 
....................    delay_ms(2000); 
.................... } 
....................  
.................... /* ======== -END- LCD SCREEN FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- UART PROTOCOL FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief : This function checks the `readed_ID` variable to determine  
....................  *         the action to take based on predefined identifiers. Depending on the identifier, 
....................  *         it displays a welcome message for specific users or sets the system to an idle state. 
....................  */ 
.................... void SubSystem_uart_CheckTheMessage(void){ 
....................     
....................    if(readed_ID == '+'){      //Mr. Selçuk's ID 
*
03B6:  MOVF   2B,W
03B7:  SUBLW  2B
03B8:  BTFSS  03.2
03B9:  GOTO   3DA
....................       ClientNumber = 0;       //System works for Mr. Selcuk 
03BA:  CLRF   40
....................       lcd_gotoxy(4,1); 
03BB:  MOVLW  04
03BC:  BSF    03.5
03BD:  MOVWF  4D
03BE:  MOVLW  01
03BF:  MOVWF  4E
03C0:  BCF    03.5
03C1:  CALL   299
....................       printf(lcd_putc,"Hosgeldiniz"); 
03C2:  MOVLW  59
03C3:  BSF    03.6
03C4:  MOVWF  0D
03C5:  MOVLW  01
03C6:  MOVWF  0F
03C7:  BCF    03.6
03C8:  CALL   2E7
....................       lcd_gotoxy(4,2); 
03C9:  MOVLW  04
03CA:  BSF    03.5
03CB:  MOVWF  4D
03CC:  MOVLW  02
03CD:  MOVWF  4E
03CE:  BCF    03.5
03CF:  CALL   299
....................       printf(lcd_putc,"Selcuk Bey"); 
03D0:  MOVLW  5F
03D1:  BSF    03.6
03D2:  MOVWF  0D
03D3:  MOVLW  01
03D4:  MOVWF  0F
03D5:  BCF    03.6
03D6:  CALL   2E7
....................       systemLock = 1; 
03D7:  MOVLW  01
03D8:  MOVWF  2C
....................    } 
03D9:  GOTO   403
....................    else if(readed_ID == '*'){ //Mr. Emre's ID 
03DA:  MOVF   2B,W
03DB:  SUBLW  2A
03DC:  BTFSS  03.2
03DD:  GOTO   3FF
....................       ClientNumber = 1;       //System works for Mr. Emre 
03DE:  MOVLW  01
03DF:  MOVWF  40
....................       lcd_gotoxy(4,1); 
03E0:  MOVLW  04
03E1:  BSF    03.5
03E2:  MOVWF  4D
03E3:  MOVLW  01
03E4:  MOVWF  4E
03E5:  BCF    03.5
03E6:  CALL   299
....................       printf(lcd_putc,"Hosgeldiniz"); 
03E7:  MOVLW  65
03E8:  BSF    03.6
03E9:  MOVWF  0D
03EA:  MOVLW  01
03EB:  MOVWF  0F
03EC:  BCF    03.6
03ED:  CALL   2E7
....................       lcd_gotoxy(4,2); 
03EE:  MOVLW  04
03EF:  BSF    03.5
03F0:  MOVWF  4D
03F1:  MOVLW  02
03F2:  MOVWF  4E
03F3:  BCF    03.5
03F4:  CALL   299
....................       printf(lcd_putc,"Emre Bey"); 
03F5:  MOVLW  6B
03F6:  BSF    03.6
03F7:  MOVWF  0D
03F8:  MOVLW  01
03F9:  MOVWF  0F
03FA:  BCF    03.6
03FB:  CALL   2E7
....................       systemLock = 1; 
03FC:  MOVLW  01
03FD:  MOVWF  2C
....................    } 
03FE:  GOTO   403
....................    else if(readed_ID == '.'){ //Slave pic is idle status 
03FF:  MOVF   2B,W
0400:  SUBLW  2E
0401:  BTFSC  03.2
....................        systemLock = 0; 
0402:  CLRF   2C
....................    } 
0403:  BCF    0A.3
0404:  BSF    0A.4
0405:  GOTO   09C (RETURN)
....................  
.................... } 
.................... /* ======== -END- UART PROTOCOL FUNCTIONS -END- ======== */ 
....................  
....................  
.................... /* ======== -BEGIN- 7-SEGMENT DISPLAY -BEGIN- ======== */ 
.................... void sequentialDisplayScan(){ 
....................  
....................          //It indicates that the polishing process has now started 
....................          if((counter_StartOpsButtonTick == 4)){ 
*
0C12:  MOVF   76,W
0C13:  SUBLW  04
0C14:  BTFSS  03.2
0C15:  GOTO   443
....................                    
....................             number_unitDigit    = (currentPolishAmount%10); 
0C16:  BSF    03.5
0C17:  MOVF   31,W
0C18:  MOVWF  44
0C19:  MOVF   30,W
0C1A:  MOVWF  43
0C1B:  CLRF   46
0C1C:  MOVLW  0A
0C1D:  MOVWF  45
0C1E:  BCF    0A.3
0C1F:  BCF    03.5
0C20:  CALL   41D
0C21:  BSF    0A.3
0C22:  MOVF   77,W
0C23:  MOVWF  73
....................             number_tensDigit    = ((currentPolishAmount/10)%10); 
0C24:  BSF    03.5
0C25:  MOVF   31,W
0C26:  MOVWF  44
0C27:  MOVF   30,W
0C28:  MOVWF  43
0C29:  CLRF   46
0C2A:  MOVLW  0A
0C2B:  MOVWF  45
0C2C:  BCF    0A.3
0C2D:  BCF    03.5
0C2E:  CALL   41D
0C2F:  BSF    0A.3
0C30:  MOVF   79,W
0C31:  BSF    03.5
0C32:  MOVWF  42
0C33:  MOVF   78,W
0C34:  MOVWF  41
0C35:  MOVF   42,W
0C36:  MOVWF  44
0C37:  MOVF   41,W
0C38:  MOVWF  43
0C39:  CLRF   46
0C3A:  MOVLW  0A
0C3B:  MOVWF  45
0C3C:  BCF    0A.3
0C3D:  BCF    03.5
0C3E:  CALL   41D
0C3F:  BSF    0A.3
0C40:  MOVF   77,W
0C41:  MOVWF  74
....................              
....................          } 
0C42:  GOTO   48D
....................          //CurrentTime will be taken from the timer. 
....................          else{ 
....................              
....................             number_unitDigit    = (CurrentTime%10);   
0C43:  MOVF   7C,W
0C44:  BSF    03.5
0C45:  MOVWF  44
0C46:  MOVF   7B,W
0C47:  MOVWF  43
0C48:  CLRF   46
0C49:  MOVLW  0A
0C4A:  MOVWF  45
0C4B:  BCF    0A.3
0C4C:  BCF    03.5
0C4D:  CALL   41D
0C4E:  BSF    0A.3
0C4F:  MOVF   77,W
0C50:  MOVWF  73
....................             number_tensDigit    = ((CurrentTime/10)%10);  
0C51:  MOVF   7C,W
0C52:  BSF    03.5
0C53:  MOVWF  44
0C54:  MOVF   7B,W
0C55:  MOVWF  43
0C56:  CLRF   46
0C57:  MOVLW  0A
0C58:  MOVWF  45
0C59:  BCF    0A.3
0C5A:  BCF    03.5
0C5B:  CALL   41D
0C5C:  BSF    0A.3
0C5D:  MOVF   79,W
0C5E:  BSF    03.5
0C5F:  MOVWF  42
0C60:  MOVF   78,W
0C61:  MOVWF  41
0C62:  MOVF   42,W
0C63:  MOVWF  44
0C64:  MOVF   41,W
0C65:  MOVWF  43
0C66:  CLRF   46
0C67:  MOVLW  0A
0C68:  MOVWF  45
0C69:  BCF    0A.3
0C6A:  BCF    03.5
0C6B:  CALL   41D
0C6C:  BSF    0A.3
0C6D:  MOVF   77,W
0C6E:  MOVWF  74
....................             number_hundredDigit = ((CurrentTime/100)%10); 
0C6F:  MOVF   7C,W
0C70:  BSF    03.5
0C71:  MOVWF  44
0C72:  MOVF   7B,W
0C73:  MOVWF  43
0C74:  CLRF   46
0C75:  MOVLW  64
0C76:  MOVWF  45
0C77:  BCF    0A.3
0C78:  BCF    03.5
0C79:  CALL   41D
0C7A:  BSF    0A.3
0C7B:  MOVF   79,W
0C7C:  BSF    03.5
0C7D:  MOVWF  42
0C7E:  MOVF   78,W
0C7F:  MOVWF  41
0C80:  MOVF   42,W
0C81:  MOVWF  44
0C82:  MOVF   41,W
0C83:  MOVWF  43
0C84:  CLRF   46
0C85:  MOVLW  0A
0C86:  MOVWF  45
0C87:  BCF    0A.3
0C88:  BCF    03.5
0C89:  CALL   41D
0C8A:  BSF    0A.3
0C8B:  MOVF   77,W
0C8C:  MOVWF  75
....................          } 
....................           
....................     
....................           
....................          
....................          /* 
....................           * Perform digit changes using the transistor. 
....................           * Display the corresponding value for the relevant digit. 
....................           * Wait for a millisecond to allow the human eye to perceive the change. 
....................           */ 
....................           output_high(pin_UnitDigit_switch);      
0C8D:  BSF    09.1
....................           output_low(pin_TensDigit_switch);       
0C8E:  BCF    09.0
....................           output_low(pin_HundredDigit_switch);    
0C8F:  BCF    09.2
....................           output_b(segmentTable[number_unitDigit]);  
0C90:  MOVLW  A0
0C91:  ADDWF  73,W
0C92:  MOVWF  04
0C93:  BCF    03.7
0C94:  MOVF   00,W
0C95:  BSF    03.5
0C96:  MOVWF  41
0C97:  BCF    03.5
0C98:  MOVWF  06
....................           delay_ms(10);                             
0C99:  MOVLW  0A
0C9A:  BSF    03.5
0C9B:  MOVWF  4D
0C9C:  BCF    0A.3
0C9D:  BCF    03.5
0C9E:  CALL   1A5
0C9F:  BSF    0A.3
....................            
....................           output_low(pin_UnitDigit_switch);       
0CA0:  BCF    09.1
....................           output_high(pin_TensDigit_switch);      
0CA1:  BSF    09.0
....................           output_low(pin_HundredDigit_switch);           
0CA2:  BCF    09.2
....................           output_b(segmentTable[number_tensDigit]);  
0CA3:  MOVLW  A0
0CA4:  ADDWF  74,W
0CA5:  MOVWF  04
0CA6:  BCF    03.7
0CA7:  MOVF   00,W
0CA8:  BSF    03.5
0CA9:  MOVWF  41
0CAA:  BCF    03.5
0CAB:  MOVWF  06
....................           delay_ms(10);   
0CAC:  MOVLW  0A
0CAD:  BSF    03.5
0CAE:  MOVWF  4D
0CAF:  BCF    0A.3
0CB0:  BCF    03.5
0CB1:  CALL   1A5
0CB2:  BSF    0A.3
....................            
....................           output_low(pin_UnitDigit_switch);        
0CB3:  BCF    09.1
....................           output_low(pin_TensDigit_switch);        
0CB4:  BCF    09.0
....................           output_high(pin_HundredDigit_switch);    
0CB5:  BSF    09.2
....................           output_b(segmentTable[number_hundredDigit]);  
0CB6:  MOVLW  A0
0CB7:  ADDWF  75,W
0CB8:  MOVWF  04
0CB9:  BCF    03.7
0CBA:  MOVF   00,W
0CBB:  BSF    03.5
0CBC:  MOVWF  41
0CBD:  BCF    03.5
0CBE:  MOVWF  06
....................           delay_ms(10);  
0CBF:  MOVLW  0A
0CC0:  BSF    03.5
0CC1:  MOVWF  4D
0CC2:  BCF    0A.3
0CC3:  BCF    03.5
0CC4:  CALL   1A5
0CC5:  BSF    0A.3
0CC6:  RETURN
....................     
.................... } 
....................  
.................... void loadZeroValue_2_DisplaySegment(){ 
....................  
....................    //Apply voltage to display the digits 
....................    output_high(pin_UnitDigit_switch);     
*
07C9:  BSF    09.1
....................    output_high(pin_TensDigit_switch);      
07CA:  BSF    09.0
....................    output_high(pin_HundredDigit_switch);  
07CB:  BSF    09.2
....................     
....................    //Load the initial value into the segments. 
....................    output_b(segmentTable[0]);  
07CC:  BSF    03.5
07CD:  MOVF   20,W
07CE:  BCF    03.5
07CF:  MOVWF  06
07D0:  BCF    0A.3
07D1:  BSF    0A.4
07D2:  GOTO   395 (RETURN)
.................... } 
....................  
.................... /* ======== -END- 7-SEGMENT DISPLAY -END- ======== */ 
....................  
....................  
.................... /* ===================== -BEGIN- EEPROM WRITE/READ -BEGIN- ===================== */ 
....................  
.................... void showSelectedPastProcessesOps(void){ 
....................  
....................    Read_EEPROM_OpsVal_from_EEPROMregs(); 
....................     
....................    display_Selected_EEPROM_OpsVal_OnLCD(); 
*
0B98:  BCF    0A.3
0B99:  BSF    0A.4
0B9A:  GOTO   1E3 (RETURN)
....................  
.................... } 
....................  
.................... void display_Selected_EEPROM_OpsVal_OnLCD(){ 
....................            
....................       printf(lcd_putc, "\f"); 
*
0AAA:  MOVLW  0C
0AAB:  BSF    03.5
0AAC:  MOVWF  4C
0AAD:  BCF    0A.3
0AAE:  BCF    03.5
0AAF:  CALL   2AD
0AB0:  BSF    0A.3
....................        
....................       lcd_gotoxy(1,1); 
0AB1:  MOVLW  01
0AB2:  BSF    03.5
0AB3:  MOVWF  4D
0AB4:  MOVWF  4E
0AB5:  BCF    0A.3
0AB6:  BCF    03.5
0AB7:  CALL   299
0AB8:  BSF    0A.3
....................       printf(lcd_putc, "F: %d TL",eeprom_foaming_read_cost);  
0AB9:  MOVLW  46
0ABA:  BSF    03.5
0ABB:  MOVWF  4C
0ABC:  BCF    0A.3
0ABD:  BCF    03.5
0ABE:  CALL   2AD
0ABF:  BSF    0A.3
0AC0:  MOVLW  3A
0AC1:  BSF    03.5
0AC2:  MOVWF  4C
0AC3:  BCF    0A.3
0AC4:  BCF    03.5
0AC5:  CALL   2AD
0AC6:  BSF    0A.3
0AC7:  MOVLW  20
0AC8:  BSF    03.5
0AC9:  MOVWF  4C
0ACA:  BCF    0A.3
0ACB:  BCF    03.5
0ACC:  CALL   2AD
0ACD:  BSF    0A.3
0ACE:  BSF    03.5
0ACF:  MOVF   37,W
0AD0:  MOVWF  42
0AD1:  MOVLW  18
0AD2:  MOVWF  43
0AD3:  BCF    0A.3
0AD4:  BCF    03.5
0AD5:  CALL   567
0AD6:  BSF    0A.3
0AD7:  MOVLW  20
0AD8:  BSF    03.5
0AD9:  MOVWF  4C
0ADA:  BCF    0A.3
0ADB:  BCF    03.5
0ADC:  CALL   2AD
0ADD:  BSF    0A.3
0ADE:  MOVLW  54
0ADF:  BSF    03.5
0AE0:  MOVWF  4C
0AE1:  BCF    0A.3
0AE2:  BCF    03.5
0AE3:  CALL   2AD
0AE4:  BSF    0A.3
0AE5:  MOVLW  4C
0AE6:  BSF    03.5
0AE7:  MOVWF  4C
0AE8:  BCF    0A.3
0AE9:  BCF    03.5
0AEA:  CALL   2AD
0AEB:  BSF    0A.3
....................       lcd_gotoxy(8,1); 
0AEC:  MOVLW  08
0AED:  BSF    03.5
0AEE:  MOVWF  4D
0AEF:  MOVLW  01
0AF0:  MOVWF  4E
0AF1:  BCF    0A.3
0AF2:  BCF    03.5
0AF3:  CALL   299
0AF4:  BSF    0A.3
....................       printf(lcd_putc, " W: %d TL",eeprom_washing_read_cost);  
0AF5:  MOVLW  70
0AF6:  BSF    03.6
0AF7:  MOVWF  0D
0AF8:  MOVLW  01
0AF9:  MOVWF  0F
0AFA:  BCF    03.0
0AFB:  MOVLW  04
0AFC:  BSF    03.5
0AFD:  BCF    03.6
0AFE:  MOVWF  43
0AFF:  BCF    0A.3
0B00:  BCF    03.5
0B01:  CALL   4D6
0B02:  BSF    0A.3
0B03:  BSF    03.5
0B04:  MOVF   38,W
0B05:  MOVWF  42
0B06:  MOVLW  18
0B07:  MOVWF  43
0B08:  BCF    0A.3
0B09:  BCF    03.5
0B0A:  CALL   567
0B0B:  BSF    0A.3
0B0C:  MOVLW  20
0B0D:  BSF    03.5
0B0E:  MOVWF  4C
0B0F:  BCF    0A.3
0B10:  BCF    03.5
0B11:  CALL   2AD
0B12:  BSF    0A.3
0B13:  MOVLW  54
0B14:  BSF    03.5
0B15:  MOVWF  4C
0B16:  BCF    0A.3
0B17:  BCF    03.5
0B18:  CALL   2AD
0B19:  BSF    0A.3
0B1A:  MOVLW  4C
0B1B:  BSF    03.5
0B1C:  MOVWF  4C
0B1D:  BCF    0A.3
0B1E:  BCF    03.5
0B1F:  CALL   2AD
0B20:  BSF    0A.3
....................       lcd_gotoxy(1,2); 
0B21:  MOVLW  01
0B22:  BSF    03.5
0B23:  MOVWF  4D
0B24:  MOVLW  02
0B25:  MOVWF  4E
0B26:  BCF    0A.3
0B27:  BCF    03.5
0B28:  CALL   299
0B29:  BSF    0A.3
....................       printf(lcd_putc, "V: %d TL",eeprom_ventilating_read_cost);  
0B2A:  MOVLW  56
0B2B:  BSF    03.5
0B2C:  MOVWF  4C
0B2D:  BCF    0A.3
0B2E:  BCF    03.5
0B2F:  CALL   2AD
0B30:  BSF    0A.3
0B31:  MOVLW  3A
0B32:  BSF    03.5
0B33:  MOVWF  4C
0B34:  BCF    0A.3
0B35:  BCF    03.5
0B36:  CALL   2AD
0B37:  BSF    0A.3
0B38:  MOVLW  20
0B39:  BSF    03.5
0B3A:  MOVWF  4C
0B3B:  BCF    0A.3
0B3C:  BCF    03.5
0B3D:  CALL   2AD
0B3E:  BSF    0A.3
0B3F:  BSF    03.5
0B40:  MOVF   39,W
0B41:  MOVWF  42
0B42:  MOVLW  18
0B43:  MOVWF  43
0B44:  BCF    0A.3
0B45:  BCF    03.5
0B46:  CALL   567
0B47:  BSF    0A.3
0B48:  MOVLW  20
0B49:  BSF    03.5
0B4A:  MOVWF  4C
0B4B:  BCF    0A.3
0B4C:  BCF    03.5
0B4D:  CALL   2AD
0B4E:  BSF    0A.3
0B4F:  MOVLW  54
0B50:  BSF    03.5
0B51:  MOVWF  4C
0B52:  BCF    0A.3
0B53:  BCF    03.5
0B54:  CALL   2AD
0B55:  BSF    0A.3
0B56:  MOVLW  4C
0B57:  BSF    03.5
0B58:  MOVWF  4C
0B59:  BCF    0A.3
0B5A:  BCF    03.5
0B5B:  CALL   2AD
0B5C:  BSF    0A.3
....................       lcd_gotoxy(8,8); 
0B5D:  MOVLW  08
0B5E:  BSF    03.5
0B5F:  MOVWF  4D
0B60:  MOVWF  4E
0B61:  BCF    0A.3
0B62:  BCF    03.5
0B63:  CALL   299
0B64:  BSF    0A.3
....................       printf(lcd_putc, " P: %d TL",eeprom_polishing_read_cost);  
0B65:  MOVLW  75
0B66:  BSF    03.6
0B67:  MOVWF  0D
0B68:  MOVLW  01
0B69:  MOVWF  0F
0B6A:  BCF    03.0
0B6B:  MOVLW  04
0B6C:  BSF    03.5
0B6D:  BCF    03.6
0B6E:  MOVWF  43
0B6F:  BCF    0A.3
0B70:  BCF    03.5
0B71:  CALL   4D6
0B72:  BSF    0A.3
0B73:  BSF    03.5
0B74:  MOVF   3A,W
0B75:  MOVWF  42
0B76:  MOVLW  18
0B77:  MOVWF  43
0B78:  BCF    0A.3
0B79:  BCF    03.5
0B7A:  CALL   567
0B7B:  BSF    0A.3
0B7C:  MOVLW  20
0B7D:  BSF    03.5
0B7E:  MOVWF  4C
0B7F:  BCF    0A.3
0B80:  BCF    03.5
0B81:  CALL   2AD
0B82:  BSF    0A.3
0B83:  MOVLW  54
0B84:  BSF    03.5
0B85:  MOVWF  4C
0B86:  BCF    0A.3
0B87:  BCF    03.5
0B88:  CALL   2AD
0B89:  BSF    0A.3
0B8A:  MOVLW  4C
0B8B:  BSF    03.5
0B8C:  MOVWF  4C
0B8D:  BCF    0A.3
0B8E:  BCF    03.5
0B8F:  CALL   2AD
0B90:  BSF    0A.3
....................       delay_ms(100); 
0B91:  MOVLW  64
0B92:  BSF    03.5
0B93:  MOVWF  4D
0B94:  BCF    0A.3
0B95:  BCF    03.5
0B96:  CALL   1A5
0B97:  BSF    0A.3
....................         
.................... } 
....................  
.................... void Read_EEPROM_OpsVal_from_EEPROMregs(){ 
....................      
....................     // NE ZAMAN NEXT BUTONUNA BASILIR O ZAMAN SEÇÝM YAPILIR 
....................     // IndexOfReadMemory butonun üzerinde bulunduðu yer(next demeden önce) 
....................      
....................         if(ClientNumber == 0) 
*
09ED:  MOVF   40,F
09EE:  BTFSS  03.2
09EF:  GOTO   24A
....................         { 
....................                    
....................             eeprom_foaming_read_cost     = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+4) );   
09F0:  MOVLW  01
09F1:  BSF    03.5
09F2:  SUBWF  3D,W
09F3:  MOVWF  77
09F4:  RLF    77,F
09F5:  RLF    77,F
09F6:  MOVLW  FC
09F7:  ANDWF  77,F
09F8:  MOVF   77,W
09F9:  ADDLW  04
09FA:  MOVWF  41
09FB:  MOVF   41,W
09FC:  BCF    03.5
09FD:  BSF    03.6
09FE:  MOVWF  0D
09FF:  BSF    03.5
0A00:  BCF    0C.7
0A01:  BSF    0C.0
0A02:  BCF    03.5
0A03:  MOVF   0C,W
0A04:  BSF    03.5
0A05:  BCF    03.6
0A06:  MOVWF  37
....................             eeprom_washing_read_cost     = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+5) ); 
0A07:  MOVLW  01
0A08:  SUBWF  3D,W
0A09:  MOVWF  77
0A0A:  RLF    77,F
0A0B:  RLF    77,F
0A0C:  MOVLW  FC
0A0D:  ANDWF  77,F
0A0E:  MOVF   77,W
0A0F:  ADDLW  05
0A10:  MOVWF  41
0A11:  MOVF   41,W
0A12:  BCF    03.5
0A13:  BSF    03.6
0A14:  MOVWF  0D
0A15:  BSF    03.5
0A16:  BCF    0C.7
0A17:  BSF    0C.0
0A18:  BCF    03.5
0A19:  MOVF   0C,W
0A1A:  BSF    03.5
0A1B:  BCF    03.6
0A1C:  MOVWF  38
....................             eeprom_ventilating_read_cost = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+6) ); 
0A1D:  MOVLW  01
0A1E:  SUBWF  3D,W
0A1F:  MOVWF  77
0A20:  RLF    77,F
0A21:  RLF    77,F
0A22:  MOVLW  FC
0A23:  ANDWF  77,F
0A24:  MOVF   77,W
0A25:  ADDLW  06
0A26:  MOVWF  41
0A27:  MOVF   41,W
0A28:  BCF    03.5
0A29:  BSF    03.6
0A2A:  MOVWF  0D
0A2B:  BSF    03.5
0A2C:  BCF    0C.7
0A2D:  BSF    0C.0
0A2E:  BCF    03.5
0A2F:  MOVF   0C,W
0A30:  BSF    03.5
0A31:  BCF    03.6
0A32:  MOVWF  39
....................             eeprom_polishing_read_cost   = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+7) ); 
0A33:  MOVLW  01
0A34:  SUBWF  3D,W
0A35:  MOVWF  77
0A36:  RLF    77,F
0A37:  RLF    77,F
0A38:  MOVLW  FC
0A39:  ANDWF  77,F
0A3A:  MOVF   77,W
0A3B:  ADDLW  07
0A3C:  MOVWF  41
0A3D:  MOVF   41,W
0A3E:  BCF    03.5
0A3F:  BSF    03.6
0A40:  MOVWF  0D
0A41:  BSF    03.5
0A42:  BCF    0C.7
0A43:  BSF    0C.0
0A44:  BCF    03.5
0A45:  MOVF   0C,W
0A46:  BSF    03.5
0A47:  BCF    03.6
0A48:  MOVWF  3A
0A49:  BCF    03.5
....................       
....................         } 
....................          
....................         if(ClientNumber == 1){ 
0A4A:  DECFSZ 40,W
0A4B:  GOTO   2AA
....................          
....................             eeprom_foaming_read_cost     = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+1) );   
0A4C:  MOVLW  01
0A4D:  BSF    03.5
0A4E:  SUBWF  3D,W
0A4F:  MOVWF  77
0A50:  RLF    77,F
0A51:  RLF    77,F
0A52:  MOVLW  FC
0A53:  ANDWF  77,F
0A54:  MOVF   77,W
0A55:  ADDLW  01
0A56:  ADDLW  82
0A57:  MOVWF  41
0A58:  MOVF   41,W
0A59:  BCF    03.5
0A5A:  BSF    03.6
0A5B:  MOVWF  0D
0A5C:  BSF    03.5
0A5D:  BCF    0C.7
0A5E:  BSF    0C.0
0A5F:  BCF    03.5
0A60:  MOVF   0C,W
0A61:  BSF    03.5
0A62:  BCF    03.6
0A63:  MOVWF  37
....................             eeprom_washing_read_cost     = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+2) ); 
0A64:  MOVLW  01
0A65:  SUBWF  3D,W
0A66:  MOVWF  77
0A67:  RLF    77,F
0A68:  RLF    77,F
0A69:  MOVLW  FC
0A6A:  ANDWF  77,F
0A6B:  MOVF   77,W
0A6C:  ADDLW  02
0A6D:  ADDLW  82
0A6E:  MOVWF  41
0A6F:  MOVF   41,W
0A70:  BCF    03.5
0A71:  BSF    03.6
0A72:  MOVWF  0D
0A73:  BSF    03.5
0A74:  BCF    0C.7
0A75:  BSF    0C.0
0A76:  BCF    03.5
0A77:  MOVF   0C,W
0A78:  BSF    03.5
0A79:  BCF    03.6
0A7A:  MOVWF  38
....................             eeprom_ventilating_read_cost = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+3) ); 
0A7B:  MOVLW  01
0A7C:  SUBWF  3D,W
0A7D:  MOVWF  77
0A7E:  RLF    77,F
0A7F:  RLF    77,F
0A80:  MOVLW  FC
0A81:  ANDWF  77,F
0A82:  MOVF   77,W
0A83:  ADDLW  03
0A84:  ADDLW  82
0A85:  MOVWF  41
0A86:  MOVF   41,W
0A87:  BCF    03.5
0A88:  BSF    03.6
0A89:  MOVWF  0D
0A8A:  BSF    03.5
0A8B:  BCF    0C.7
0A8C:  BSF    0C.0
0A8D:  BCF    03.5
0A8E:  MOVF   0C,W
0A8F:  BSF    03.5
0A90:  BCF    03.6
0A91:  MOVWF  39
....................             eeprom_polishing_read_cost   = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+4) ); 
0A92:  MOVLW  01
0A93:  SUBWF  3D,W
0A94:  MOVWF  77
0A95:  RLF    77,F
0A96:  RLF    77,F
0A97:  MOVLW  FC
0A98:  ANDWF  77,F
0A99:  MOVF   77,W
0A9A:  ADDLW  04
0A9B:  ADDLW  82
0A9C:  MOVWF  41
0A9D:  MOVF   41,W
0A9E:  BCF    03.5
0A9F:  BSF    03.6
0AA0:  MOVWF  0D
0AA1:  BSF    03.5
0AA2:  BCF    0C.7
0AA3:  BSF    0C.0
0AA4:  BCF    03.5
0AA5:  MOVF   0C,W
0AA6:  BSF    03.5
0AA7:  BCF    03.6
0AA8:  MOVWF  3A
0AA9:  BCF    03.5
....................          
....................         } 
....................  
.................... } 
....................  
....................  
....................  
.................... void displayProcessCompletionStatus(){ 
....................  
....................       printf(lcd_putc, "\f"); 
*
0CC7:  MOVLW  0C
0CC8:  BSF    03.5
0CC9:  MOVWF  4C
0CCA:  BCF    0A.3
0CCB:  BCF    03.5
0CCC:  CALL   2AD
0CCD:  BSF    0A.3
....................        
....................       lcd_gotoxy(2,1); 
0CCE:  MOVLW  02
0CCF:  BSF    03.5
0CD0:  MOVWF  4D
0CD1:  MOVLW  01
0CD2:  MOVWF  4E
0CD3:  BCF    0A.3
0CD4:  BCF    03.5
0CD5:  CALL   299
0CD6:  BSF    0A.3
....................       printf(lcd_putc, "Operasyon Sonu");    
0CD7:  MOVLW  7A
0CD8:  BSF    03.6
0CD9:  MOVWF  0D
0CDA:  MOVLW  01
0CDB:  MOVWF  0F
0CDC:  BCF    0A.3
0CDD:  BCF    03.6
0CDE:  CALL   2E7
0CDF:  BSF    0A.3
....................       delay_ms(2000); 
0CE0:  MOVLW  08
0CE1:  BSF    03.5
0CE2:  MOVWF  41
0CE3:  MOVLW  FA
0CE4:  MOVWF  4D
0CE5:  BCF    0A.3
0CE6:  BCF    03.5
0CE7:  CALL   1A5
0CE8:  BSF    0A.3
0CE9:  BSF    03.5
0CEA:  DECFSZ 41,F
0CEB:  GOTO   4E3
....................       printf(lcd_putc, "\f"); 
0CEC:  MOVLW  0C
0CED:  MOVWF  4C
0CEE:  BCF    0A.3
0CEF:  BCF    03.5
0CF0:  CALL   2AD
0CF1:  BSF    0A.3
....................       lcd_gotoxy(3,1); 
0CF2:  MOVLW  03
0CF3:  BSF    03.5
0CF4:  MOVWF  4D
0CF5:  MOVLW  01
0CF6:  MOVWF  4E
0CF7:  BCF    0A.3
0CF8:  BCF    03.5
0CF9:  CALL   299
0CFA:  BSF    0A.3
....................       printf(lcd_putc, "Islemleriniz");   
0CFB:  MOVLW  82
0CFC:  BSF    03.6
0CFD:  MOVWF  0D
0CFE:  MOVLW  01
0CFF:  MOVWF  0F
0D00:  BCF    0A.3
0D01:  BCF    03.6
0D02:  CALL   2E7
0D03:  BSF    0A.3
....................       lcd_gotoxy(3,2); 
0D04:  MOVLW  03
0D05:  BSF    03.5
0D06:  MOVWF  4D
0D07:  MOVLW  02
0D08:  MOVWF  4E
0D09:  BCF    0A.3
0D0A:  BCF    03.5
0D0B:  CALL   299
0D0C:  BSF    0A.3
....................       printf(lcd_putc, "Kaydediliyor"); 
0D0D:  MOVLW  89
0D0E:  BSF    03.6
0D0F:  MOVWF  0D
0D10:  MOVLW  01
0D11:  MOVWF  0F
0D12:  BCF    0A.3
0D13:  BCF    03.6
0D14:  CALL   2E7
0D15:  BSF    0A.3
....................        
....................       loadCostValuesToEEPROMVariables(); 
....................           
....................       delay_ms(1000); 
*
0F21:  MOVLW  04
0F22:  BSF    03.5
0F23:  MOVWF  41
0F24:  MOVLW  FA
0F25:  MOVWF  4D
0F26:  BCF    0A.3
0F27:  BCF    03.5
0F28:  CALL   1A5
0F29:  BSF    0A.3
0F2A:  BSF    03.5
0F2B:  DECFSZ 41,F
0F2C:  GOTO   724
....................        
....................       printf(lcd_putc, "\f"); 
0F2D:  MOVLW  0C
0F2E:  MOVWF  4C
0F2F:  BCF    0A.3
0F30:  BCF    03.5
0F31:  CALL   2AD
0F32:  BSF    0A.3
....................       lcd_gotoxy(5,1); 
0F33:  MOVLW  05
0F34:  BSF    03.5
0F35:  MOVWF  4D
0F36:  MOVLW  01
0F37:  MOVWF  4E
0F38:  BCF    0A.3
0F39:  BCF    03.5
0F3A:  CALL   299
0F3B:  BSF    0A.3
....................       printf(lcd_putc, "Kayitlar");   
0F3C:  MOVLW  90
0F3D:  BSF    03.6
0F3E:  MOVWF  0D
0F3F:  MOVLW  01
0F40:  MOVWF  0F
0F41:  BCF    0A.3
0F42:  BCF    03.6
0F43:  CALL   2E7
0F44:  BSF    0A.3
....................       lcd_gotoxy(4,2); 
0F45:  MOVLW  04
0F46:  BSF    03.5
0F47:  MOVWF  4D
0F48:  MOVLW  02
0F49:  MOVWF  4E
0F4A:  BCF    0A.3
0F4B:  BCF    03.5
0F4C:  CALL   299
0F4D:  BSF    0A.3
....................       printf(lcd_putc, "Tamamlandi"); 
0F4E:  MOVLW  95
0F4F:  BSF    03.6
0F50:  MOVWF  0D
0F51:  MOVLW  01
0F52:  MOVWF  0F
0F53:  BCF    0A.3
0F54:  BCF    03.6
0F55:  CALL   2E7
0F56:  BSF    0A.3
....................        
....................       delay_ms(1000); 
0F57:  MOVLW  04
0F58:  BSF    03.5
0F59:  MOVWF  41
0F5A:  MOVLW  FA
0F5B:  MOVWF  4D
0F5C:  BCF    0A.3
0F5D:  BCF    03.5
0F5E:  CALL   1A5
0F5F:  BSF    0A.3
0F60:  BSF    03.5
0F61:  DECFSZ 41,F
0F62:  GOTO   75A
....................        
....................       printf(lcd_putc, "\f"); 
0F63:  MOVLW  0C
0F64:  MOVWF  4C
0F65:  BCF    0A.3
0F66:  BCF    03.5
0F67:  CALL   2AD
0F68:  BSF    0A.3
....................       lcd_gotoxy(4,1); 
0F69:  MOVLW  04
0F6A:  BSF    03.5
0F6B:  MOVWF  4D
0F6C:  MOVLW  01
0F6D:  MOVWF  4E
0F6E:  BCF    0A.3
0F6F:  BCF    03.5
0F70:  CALL   299
0F71:  BSF    0A.3
....................       printf(lcd_putc, "Saglicakla");   
0F72:  MOVLW  9B
0F73:  BSF    03.6
0F74:  MOVWF  0D
0F75:  MOVLW  01
0F76:  MOVWF  0F
0F77:  BCF    0A.3
0F78:  BCF    03.6
0F79:  CALL   2E7
0F7A:  BSF    0A.3
....................       lcd_gotoxy(4,2); 
0F7B:  MOVLW  04
0F7C:  BSF    03.5
0F7D:  MOVWF  4D
0F7E:  MOVLW  02
0F7F:  MOVWF  4E
0F80:  BCF    0A.3
0F81:  BCF    03.5
0F82:  CALL   299
0F83:  BSF    0A.3
....................       printf(lcd_putc, "Kaliniz"); 
0F84:  MOVLW  A1
0F85:  BSF    03.6
0F86:  MOVWF  0D
0F87:  MOVLW  01
0F88:  MOVWF  0F
0F89:  BCF    0A.3
0F8A:  BCF    03.6
0F8B:  CALL   2E7
0F8C:  BSF    0A.3
....................        
....................       delay_ms(1000); 
0F8D:  MOVLW  04
0F8E:  BSF    03.5
0F8F:  MOVWF  41
0F90:  MOVLW  FA
0F91:  MOVWF  4D
0F92:  BCF    0A.3
0F93:  BCF    03.5
0F94:  CALL   1A5
0F95:  BSF    0A.3
0F96:  BSF    03.5
0F97:  DECFSZ 41,F
0F98:  GOTO   790
....................       printf(lcd_putc, "\f"); 
0F99:  MOVLW  0C
0F9A:  MOVWF  4C
0F9B:  BCF    0A.3
0F9C:  BCF    03.5
0F9D:  CALL   2AD
0F9E:  BSF    0A.3
0F9F:  BCF    0A.3
0FA0:  BSF    0A.4
0FA1:  GOTO   39F (RETURN)
....................        
.................... } 
....................  
....................  
....................  
....................  
.................... void write_EEPROMVariables_to_EEPROMregs(){ 
....................  
.................... // Operations will be performed for the relevant customer 
.................... // A new operation will be defined each time the system is activated 
.................... // Example usage: 
.................... // Main Menu -> Registration Process ->NextButton -> Operation 1 -> LCD display view: 
.................... //                                                                [F=32TL    W=12TL] F: foaming     , W: Water 
.................... //                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing 
.................... //                                   ->NextButton -> Operation 2 -> LCD display view: 
.................... //                                                                [F=32TL    W=12TL] F: foaming     , W: Water 
.................... //                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing 
....................  
....................    //Selcuk Bey's ID 
....................    if(ClientNumber == 0){ 
*
0DB3:  BCF    03.5
0DB4:  MOVF   40,F
0DB5:  BTFSS  03.2
0DB6:  GOTO   668
....................        
....................       //Pull the last address to keep going on 
....................       //The last cursor position address will always be written to the zero address, to ensure that new data does not overwrite previously written data 
....................       Client0_last_address = read_eeprom(eeprom_Client0_systemStartAddress); 
0DB7:  BSF    03.6
0DB8:  CLRF   0D
0DB9:  BSF    03.5
0DBA:  BCF    0C.7
0DBB:  BSF    0C.0
0DBC:  BCF    03.5
0DBD:  MOVF   0C,W
0DBE:  BSF    03.5
0DBF:  BCF    03.6
0DC0:  MOVWF  3B
....................        
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_foaming_written_cost)     ); Client0_last_address++; //Save foaming cost 
0DC1:  MOVLW  05
0DC2:  ADDWF  3B,W
0DC3:  MOVWF  41
0DC4:  BCF    03.5
0DC5:  MOVF   0B,W
0DC6:  MOVWF  77
0DC7:  BCF    0B.7
0DC8:  BSF    03.5
0DC9:  MOVF   41,W
0DCA:  BCF    03.5
0DCB:  BSF    03.6
0DCC:  MOVWF  0D
0DCD:  BSF    03.5
0DCE:  BCF    03.6
0DCF:  MOVF   33,W
0DD0:  BCF    03.5
0DD1:  BSF    03.6
0DD2:  MOVWF  0C
0DD3:  BSF    03.5
0DD4:  BCF    0C.7
0DD5:  BSF    0C.2
0DD6:  MOVLW  55
0DD7:  MOVWF  0D
0DD8:  MOVLW  AA
0DD9:  MOVWF  0D
0DDA:  BSF    0C.1
0DDB:  BTFSC  0C.1
0DDC:  GOTO   5DB
0DDD:  BCF    0C.2
0DDE:  MOVF   77,W
0DDF:  BCF    03.5
0DE0:  BCF    03.6
0DE1:  IORWF  0B,F
0DE2:  BSF    03.5
0DE3:  INCF   3B,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_washing_written_cost)     ); Client0_last_address++; //Save washing cost 
0DE4:  MOVLW  05
0DE5:  ADDWF  3B,W
0DE6:  MOVWF  41
0DE7:  BCF    03.5
0DE8:  MOVF   0B,W
0DE9:  MOVWF  77
0DEA:  BCF    0B.7
0DEB:  BSF    03.5
0DEC:  MOVF   41,W
0DED:  BCF    03.5
0DEE:  BSF    03.6
0DEF:  MOVWF  0D
0DF0:  BSF    03.5
0DF1:  BCF    03.6
0DF2:  MOVF   34,W
0DF3:  BCF    03.5
0DF4:  BSF    03.6
0DF5:  MOVWF  0C
0DF6:  BSF    03.5
0DF7:  BCF    0C.7
0DF8:  BSF    0C.2
0DF9:  MOVLW  55
0DFA:  MOVWF  0D
0DFB:  MOVLW  AA
0DFC:  MOVWF  0D
0DFD:  BSF    0C.1
0DFE:  BTFSC  0C.1
0DFF:  GOTO   5FE
0E00:  BCF    0C.2
0E01:  MOVF   77,W
0E02:  BCF    03.5
0E03:  BCF    03.6
0E04:  IORWF  0B,F
0E05:  BSF    03.5
0E06:  INCF   3B,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_ventilating_written_cost) ); Client0_last_address++; //Save Ventilating cost 
0E07:  MOVLW  05
0E08:  ADDWF  3B,W
0E09:  MOVWF  41
0E0A:  BCF    03.5
0E0B:  MOVF   0B,W
0E0C:  MOVWF  77
0E0D:  BCF    0B.7
0E0E:  BSF    03.5
0E0F:  MOVF   41,W
0E10:  BCF    03.5
0E11:  BSF    03.6
0E12:  MOVWF  0D
0E13:  BSF    03.5
0E14:  BCF    03.6
0E15:  MOVF   35,W
0E16:  BCF    03.5
0E17:  BSF    03.6
0E18:  MOVWF  0C
0E19:  BSF    03.5
0E1A:  BCF    0C.7
0E1B:  BSF    0C.2
0E1C:  MOVLW  55
0E1D:  MOVWF  0D
0E1E:  MOVLW  AA
0E1F:  MOVWF  0D
0E20:  BSF    0C.1
0E21:  BTFSC  0C.1
0E22:  GOTO   621
0E23:  BCF    0C.2
0E24:  MOVF   77,W
0E25:  BCF    03.5
0E26:  BCF    03.6
0E27:  IORWF  0B,F
0E28:  BSF    03.5
0E29:  INCF   3B,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_polishing_written_cost)   ); Client0_last_address++; //Save Polishing cost 
0E2A:  MOVLW  05
0E2B:  ADDWF  3B,W
0E2C:  MOVWF  41
0E2D:  BCF    03.5
0E2E:  MOVF   0B,W
0E2F:  MOVWF  77
0E30:  BCF    0B.7
0E31:  BSF    03.5
0E32:  MOVF   41,W
0E33:  BCF    03.5
0E34:  BSF    03.6
0E35:  MOVWF  0D
0E36:  BSF    03.5
0E37:  BCF    03.6
0E38:  MOVF   36,W
0E39:  BCF    03.5
0E3A:  BSF    03.6
0E3B:  MOVWF  0C
0E3C:  BSF    03.5
0E3D:  BCF    0C.7
0E3E:  BSF    0C.2
0E3F:  MOVLW  55
0E40:  MOVWF  0D
0E41:  MOVLW  AA
0E42:  MOVWF  0D
0E43:  BSF    0C.1
0E44:  BTFSC  0C.1
0E45:  GOTO   644
0E46:  BCF    0C.2
0E47:  MOVF   77,W
0E48:  BCF    03.5
0E49:  BCF    03.6
0E4A:  IORWF  0B,F
0E4B:  BSF    03.5
0E4C:  INCF   3B,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress                           ), ( Client0_last_address)           );                         //Save cursor location in the client0 start address 
0E4D:  BCF    03.5
0E4E:  MOVF   0B,W
0E4F:  MOVWF  77
0E50:  BCF    0B.7
0E51:  BSF    03.6
0E52:  CLRF   0D
0E53:  BSF    03.5
0E54:  BCF    03.6
0E55:  MOVF   3B,W
0E56:  BCF    03.5
0E57:  BSF    03.6
0E58:  MOVWF  0C
0E59:  BSF    03.5
0E5A:  BCF    0C.7
0E5B:  BSF    0C.2
0E5C:  MOVLW  55
0E5D:  MOVWF  0D
0E5E:  MOVLW  AA
0E5F:  MOVWF  0D
0E60:  BSF    0C.1
0E61:  BTFSC  0C.1
0E62:  GOTO   661
0E63:  BCF    0C.2
0E64:  MOVF   77,W
0E65:  BCF    03.5
0E66:  BCF    03.6
0E67:  IORWF  0B,F
....................    } 
....................     
....................    if(ClientNumber == 1){ 
0E68:  DECFSZ 40,W
0E69:  GOTO   721
....................        
....................       //Pull the last address to keep going on 
....................       //The last cursor position address will always be written to the zero address, to ensure that new data does not overwrite previously written data 
....................       Client1_last_address = read_eeprom(eeprom_Client1_systemStartAddress); 
0E6A:  MOVLW  82
0E6B:  BSF    03.6
0E6C:  MOVWF  0D
0E6D:  BSF    03.5
0E6E:  BCF    0C.7
0E6F:  BSF    0C.0
0E70:  BCF    03.5
0E71:  MOVF   0C,W
0E72:  BSF    03.5
0E73:  BCF    03.6
0E74:  MOVWF  3C
....................        
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_foaming_written_cost)     ); Client1_last_address++; //Save foaming cost 
0E75:  MOVLW  82
0E76:  ADDWF  3C,W
0E77:  ADDLW  01
0E78:  MOVWF  41
0E79:  BCF    03.5
0E7A:  MOVF   0B,W
0E7B:  MOVWF  77
0E7C:  BCF    0B.7
0E7D:  BSF    03.5
0E7E:  MOVF   41,W
0E7F:  BCF    03.5
0E80:  BSF    03.6
0E81:  MOVWF  0D
0E82:  BSF    03.5
0E83:  BCF    03.6
0E84:  MOVF   33,W
0E85:  BCF    03.5
0E86:  BSF    03.6
0E87:  MOVWF  0C
0E88:  BSF    03.5
0E89:  BCF    0C.7
0E8A:  BSF    0C.2
0E8B:  MOVLW  55
0E8C:  MOVWF  0D
0E8D:  MOVLW  AA
0E8E:  MOVWF  0D
0E8F:  BSF    0C.1
0E90:  BTFSC  0C.1
0E91:  GOTO   690
0E92:  BCF    0C.2
0E93:  MOVF   77,W
0E94:  BCF    03.5
0E95:  BCF    03.6
0E96:  IORWF  0B,F
0E97:  BSF    03.5
0E98:  INCF   3C,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_washing_written_cost)     ); Client1_last_address++; //Save washing cost 
0E99:  MOVLW  82
0E9A:  ADDWF  3C,W
0E9B:  ADDLW  01
0E9C:  MOVWF  41
0E9D:  BCF    03.5
0E9E:  MOVF   0B,W
0E9F:  MOVWF  77
0EA0:  BCF    0B.7
0EA1:  BSF    03.5
0EA2:  MOVF   41,W
0EA3:  BCF    03.5
0EA4:  BSF    03.6
0EA5:  MOVWF  0D
0EA6:  BSF    03.5
0EA7:  BCF    03.6
0EA8:  MOVF   34,W
0EA9:  BCF    03.5
0EAA:  BSF    03.6
0EAB:  MOVWF  0C
0EAC:  BSF    03.5
0EAD:  BCF    0C.7
0EAE:  BSF    0C.2
0EAF:  MOVLW  55
0EB0:  MOVWF  0D
0EB1:  MOVLW  AA
0EB2:  MOVWF  0D
0EB3:  BSF    0C.1
0EB4:  BTFSC  0C.1
0EB5:  GOTO   6B4
0EB6:  BCF    0C.2
0EB7:  MOVF   77,W
0EB8:  BCF    03.5
0EB9:  BCF    03.6
0EBA:  IORWF  0B,F
0EBB:  BSF    03.5
0EBC:  INCF   3C,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_ventilating_written_cost) ); Client1_last_address++; //Save Ventilating cost 
0EBD:  MOVLW  82
0EBE:  ADDWF  3C,W
0EBF:  ADDLW  01
0EC0:  MOVWF  41
0EC1:  BCF    03.5
0EC2:  MOVF   0B,W
0EC3:  MOVWF  77
0EC4:  BCF    0B.7
0EC5:  BSF    03.5
0EC6:  MOVF   41,W
0EC7:  BCF    03.5
0EC8:  BSF    03.6
0EC9:  MOVWF  0D
0ECA:  BSF    03.5
0ECB:  BCF    03.6
0ECC:  MOVF   35,W
0ECD:  BCF    03.5
0ECE:  BSF    03.6
0ECF:  MOVWF  0C
0ED0:  BSF    03.5
0ED1:  BCF    0C.7
0ED2:  BSF    0C.2
0ED3:  MOVLW  55
0ED4:  MOVWF  0D
0ED5:  MOVLW  AA
0ED6:  MOVWF  0D
0ED7:  BSF    0C.1
0ED8:  BTFSC  0C.1
0ED9:  GOTO   6D8
0EDA:  BCF    0C.2
0EDB:  MOVF   77,W
0EDC:  BCF    03.5
0EDD:  BCF    03.6
0EDE:  IORWF  0B,F
0EDF:  BSF    03.5
0EE0:  INCF   3C,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_polishing_written_cost)   ); Client1_last_address++; //Save Polishing cost 
0EE1:  MOVLW  82
0EE2:  ADDWF  3C,W
0EE3:  ADDLW  01
0EE4:  MOVWF  41
0EE5:  BCF    03.5
0EE6:  MOVF   0B,W
0EE7:  MOVWF  77
0EE8:  BCF    0B.7
0EE9:  BSF    03.5
0EEA:  MOVF   41,W
0EEB:  BCF    03.5
0EEC:  BSF    03.6
0EED:  MOVWF  0D
0EEE:  BSF    03.5
0EEF:  BCF    03.6
0EF0:  MOVF   36,W
0EF1:  BCF    03.5
0EF2:  BSF    03.6
0EF3:  MOVWF  0C
0EF4:  BSF    03.5
0EF5:  BCF    0C.7
0EF6:  BSF    0C.2
0EF7:  MOVLW  55
0EF8:  MOVWF  0D
0EF9:  MOVLW  AA
0EFA:  MOVWF  0D
0EFB:  BSF    0C.1
0EFC:  BTFSC  0C.1
0EFD:  GOTO   6FC
0EFE:  BCF    0C.2
0EFF:  MOVF   77,W
0F00:  BCF    03.5
0F01:  BCF    03.6
0F02:  IORWF  0B,F
0F03:  BSF    03.5
0F04:  INCF   3C,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress                           ), ( Client1_last_address)           );                         //Save cursor location in the client0 start address 
0F05:  BCF    03.5
0F06:  MOVF   0B,W
0F07:  MOVWF  77
0F08:  BCF    0B.7
0F09:  MOVLW  82
0F0A:  BSF    03.6
0F0B:  MOVWF  0D
0F0C:  BSF    03.5
0F0D:  BCF    03.6
0F0E:  MOVF   3C,W
0F0F:  BCF    03.5
0F10:  BSF    03.6
0F11:  MOVWF  0C
0F12:  BSF    03.5
0F13:  BCF    0C.7
0F14:  BSF    0C.2
0F15:  MOVLW  55
0F16:  MOVWF  0D
0F17:  MOVLW  AA
0F18:  MOVWF  0D
0F19:  BSF    0C.1
0F1A:  BTFSC  0C.1
0F1B:  GOTO   71A
0F1C:  BCF    0C.2
0F1D:  MOVF   77,W
0F1E:  BCF    03.5
0F1F:  BCF    03.6
0F20:  IORWF  0B,F
....................     
....................    } 
....................     
.................... } 
....................  
.................... //will be implemented 
.................... void loadCostValuesToEEPROMVariables(){ 
....................  
....................       //Cost values to be written 
....................       eeprom_foaming_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Foaming)/10)*2); 
*
0D16:  RLF    40,W
0D17:  MOVWF  77
0D18:  RLF    77,F
0D19:  RLF    77,F
0D1A:  MOVLW  F8
0D1B:  ANDWF  77,F
0D1C:  MOVF   77,W
0D1D:  ADDLW  30
0D1E:  MOVWF  04
0D1F:  BCF    03.7
0D20:  INCF   04,F
0D21:  MOVF   00,W
0D22:  BSF    03.5
0D23:  MOVWF  42
0D24:  DECF   04,F
0D25:  MOVF   00,W
0D26:  MOVWF  41
0D27:  MOVF   42,W
0D28:  MOVWF  44
0D29:  MOVF   41,W
0D2A:  MOVWF  43
0D2B:  CLRF   46
0D2C:  MOVLW  0A
0D2D:  MOVWF  45
0D2E:  BCF    0A.3
0D2F:  BCF    03.5
0D30:  CALL   41D
0D31:  BSF    0A.3
0D32:  MOVF   79,W
0D33:  BSF    03.5
0D34:  MOVWF  42
0D35:  MOVF   78,W
0D36:  MOVWF  41
0D37:  BCF    03.0
0D38:  RLF    41,W
0D39:  MOVWF  79
0D3A:  RLF    42,W
0D3B:  MOVWF  7A
0D3C:  MOVF   79,W
0D3D:  MOVWF  33
....................       eeprom_washing_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Washing)/10)*2); 
0D3E:  BCF    03.5
0D3F:  RLF    40,W
0D40:  MOVWF  77
0D41:  RLF    77,F
0D42:  RLF    77,F
0D43:  MOVLW  F8
0D44:  ANDWF  77,F
0D45:  MOVF   77,W
0D46:  ADDLW  02
0D47:  ADDLW  30
0D48:  MOVWF  04
0D49:  BCF    03.7
0D4A:  INCF   04,F
0D4B:  MOVF   00,W
0D4C:  BSF    03.5
0D4D:  MOVWF  42
0D4E:  DECF   04,F
0D4F:  MOVF   00,W
0D50:  MOVWF  41
0D51:  MOVF   42,W
0D52:  MOVWF  44
0D53:  MOVF   41,W
0D54:  MOVWF  43
0D55:  CLRF   46
0D56:  MOVLW  0A
0D57:  MOVWF  45
0D58:  BCF    0A.3
0D59:  BCF    03.5
0D5A:  CALL   41D
0D5B:  BSF    0A.3
0D5C:  MOVF   79,W
0D5D:  BSF    03.5
0D5E:  MOVWF  42
0D5F:  MOVF   78,W
0D60:  MOVWF  41
0D61:  BCF    03.0
0D62:  RLF    41,W
0D63:  MOVWF  79
0D64:  RLF    42,W
0D65:  MOVWF  7A
0D66:  MOVF   79,W
0D67:  MOVWF  34
....................       eeprom_ventilating_written_cost = (unsigned int8)(((MikroClient[ClientNumber].time_Ventilation)/10)*2); 
0D68:  BCF    03.5
0D69:  RLF    40,W
0D6A:  MOVWF  77
0D6B:  RLF    77,F
0D6C:  RLF    77,F
0D6D:  MOVLW  F8
0D6E:  ANDWF  77,F
0D6F:  MOVF   77,W
0D70:  ADDLW  04
0D71:  ADDLW  30
0D72:  MOVWF  04
0D73:  BCF    03.7
0D74:  INCF   04,F
0D75:  MOVF   00,W
0D76:  BSF    03.5
0D77:  MOVWF  42
0D78:  DECF   04,F
0D79:  MOVF   00,W
0D7A:  MOVWF  41
0D7B:  MOVF   42,W
0D7C:  MOVWF  44
0D7D:  MOVF   41,W
0D7E:  MOVWF  43
0D7F:  CLRF   46
0D80:  MOVLW  0A
0D81:  MOVWF  45
0D82:  BCF    0A.3
0D83:  BCF    03.5
0D84:  CALL   41D
0D85:  BSF    0A.3
0D86:  MOVF   79,W
0D87:  BSF    03.5
0D88:  MOVWF  42
0D89:  MOVF   78,W
0D8A:  MOVWF  41
0D8B:  BCF    03.0
0D8C:  RLF    41,W
0D8D:  MOVWF  79
0D8E:  RLF    42,W
0D8F:  MOVWF  7A
0D90:  MOVF   79,W
0D91:  MOVWF  35
....................       eeprom_polishing_written_cost   = (unsigned int8)((MikroClient[ClientNumber].mililitre_Polishing)*15); 
0D92:  BCF    03.5
0D93:  RLF    40,W
0D94:  MOVWF  77
0D95:  RLF    77,F
0D96:  RLF    77,F
0D97:  MOVLW  F8
0D98:  ANDWF  77,F
0D99:  MOVF   77,W
0D9A:  ADDLW  06
0D9B:  ADDLW  30
0D9C:  MOVWF  04
0D9D:  BCF    03.7
0D9E:  INCF   04,F
0D9F:  MOVF   00,W
0DA0:  BSF    03.5
0DA1:  MOVWF  42
0DA2:  DECF   04,F
0DA3:  MOVF   00,W
0DA4:  MOVWF  41
0DA5:  MOVF   42,W
0DA6:  MOVWF  46
0DA7:  MOVF   41,W
0DA8:  MOVWF  45
0DA9:  CLRF   48
0DAA:  MOVLW  0F
0DAB:  MOVWF  47
0DAC:  BCF    0A.3
0DAD:  BCF    03.5
0DAE:  CALL   406
0DAF:  BSF    0A.3
0DB0:  MOVF   78,W
0DB1:  BSF    03.5
0DB2:  MOVWF  36
....................       
....................       //Write data to the allocated space for the customer who is using it 
....................       write_EEPROMVariables_to_EEPROMregs(); 
.................... } 
....................  
....................  
....................  
....................  
.................... /* ===================== -END- EEPROM WRITE/READ -END- ===================== */ 
....................  
....................  
....................    
....................      
....................  
....................  
.................... /********************************************************************************************************************/ 
.................... /*                                MAIN CODE & SEQUENTIAL STEPS OF THE OPERATION                                     */ 
.................... /********************************************************************************************************************/ 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
