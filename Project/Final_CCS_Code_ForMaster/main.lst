CCS PCM C Compiler, Version 5.049, 5967               25-Ara-24 01:46

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Final_CCS_Code_ForMaster\main.lst

               ROM used:   2396 words (29%)
                           Largest free fragment is 2048
               RAM used:   85 (23%) at main() level
                           113 (31%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... //Ister bisiklet ol ister tir, ne olursan ol yine gel 
....................  
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
0055:  DATA 43,26
0056:  DATA CF,29
0057:  DATA 49,27
0058:  DATA 47,00
0059:  DATA CB,37
005A:  DATA F0,3A
005B:  DATA 6B,1D
005C:  DATA 25,36
005D:  DATA 64,00
005E:  DATA D3,3A
005F:  DATA 3A,1D
0060:  DATA 25,36
0061:  DATA 64,00
0062:  DATA C8,30
0063:  DATA F6,30
0064:  DATA BA,12
0065:  DATA 6C,32
0066:  DATA 00,01
0067:  DATA C3,34
0068:  DATA EC,30
0069:  DATA BA,12
006A:  DATA 6C,32
006B:  DATA 00,00
006C:  DATA CD,34
006D:  DATA 6B,39
006E:  DATA 6F,36
006F:  DATA E5,3A
0070:  DATA ED,13
0071:  DATA 61,00
0072:  DATA C8,37
0073:  DATA F3,33
0074:  DATA 65,36
0075:  DATA E4,34
0076:  DATA EE,34
0077:  DATA 7A,00
0078:  DATA CC,3A
0079:  DATA 74,33
007A:  DATA 65,37
007B:  DATA A0,24
007C:  DATA 44,10
007D:  DATA CB,30
007E:  DATA 72,3A
007F:  DATA 69,00
0080:  DATA C7,37
0081:  DATA 73,3A
0082:  DATA 65,39
0083:  DATA 69,37
0084:  DATA 69,3D
0085:  DATA 00,01
0086:  DATA B1,16
0087:  DATA CB,37
0088:  DATA F0,3A
0089:  DATA 6B,10
008A:  DATA C9,39
008B:  DATA EC,32
008C:  DATA 6D,10
008D:  DATA BC,16
008E:  DATA 00,01
008F:  DATA B2,16
0090:  DATA D3,3A
0091:  DATA A0,24
0092:  DATA 73,36
0093:  DATA E5,36
0094:  DATA 00,01
0095:  DATA B2,16
0096:  DATA D3,3A
0097:  DATA A0,24
0098:  DATA 73,36
0099:  DATA E5,36
009A:  DATA 20,1E
009B:  DATA 2D,00
009C:  DATA B3,16
009D:  DATA C8,30
009E:  DATA F6,30
009F:  DATA A0,24
00A0:  DATA 73,36
00A1:  DATA E5,36
00A2:  DATA 00,01
00A3:  DATA B3,16
00A4:  DATA C8,30
00A5:  DATA F6,30
00A6:  DATA A0,24
00A7:  DATA 73,36
00A8:  DATA E5,36
00A9:  DATA 20,1E
00AA:  DATA 2D,00
00AB:  DATA B4,16
00AC:  DATA C3,34
00AD:  DATA EC,30
00AE:  DATA A0,24
00AF:  DATA 73,36
00B0:  DATA E5,36
00B1:  DATA 00,01
00B2:  DATA B4,16
00B3:  DATA C3,34
00B4:  DATA EC,30
00B5:  DATA A0,24
00B6:  DATA 73,36
00B7:  DATA E5,36
00B8:  DATA 20,1E
00B9:  DATA 2D,00
00BA:  DATA B5,16
00BB:  DATA CB,30
00BC:  DATA F9,34
00BD:  DATA 74,10
00BE:  DATA C9,39
00BF:  DATA EC,32
00C0:  DATA 6D,00
00C1:  DATA B5,16
00C2:  DATA CB,30
00C3:  DATA F9,34
00C4:  DATA 74,10
00C5:  DATA C9,39
00C6:  DATA EC,32
00C7:  DATA 6D,10
00C8:  DATA BC,16
00C9:  DATA 00,00
00CA:  DATA D5,31
00CB:  DATA F2,32
00CC:  DATA 74,1D
00CD:  DATA 25,32
00CE:  DATA 20,3A
00CF:  DATA 6C,00
00D0:  DATA D3,3A
00D1:  DATA F2,32
00D2:  DATA BA,12
00D3:  DATA 6C,32
00D4:  DATA 00,01
00D5:  DATA D3,32
00D6:  DATA 63,1D
00D7:  DATA 00,01
00D8:  DATA D5,31
00D9:  DATA F2,32
00DA:  DATA 74,1D
00DB:  DATA 25,36
00DC:  DATA 64,10
00DD:  DATA 74,36
00DE:  DATA 00,01
00DF:  DATA D3,32
00E0:  DATA 63,1D
00E1:  DATA 00,01
00E2:  DATA C8,37
00E3:  DATA F3,33
00E4:  DATA 65,36
00E5:  DATA E4,34
00E6:  DATA EE,34
00E7:  DATA 7A,00
00E8:  DATA D3,32
00E9:  DATA EC,31
00EA:  DATA F5,35
00EB:  DATA 20,21
00EC:  DATA E5,3C
00ED:  DATA 00,01
00EE:  DATA C8,37
00EF:  DATA F3,33
00F0:  DATA 65,36
00F1:  DATA E4,34
00F2:  DATA EE,34
00F3:  DATA 7A,00
00F4:  DATA C5,36
00F5:  DATA F2,32
00F6:  DATA 20,21
00F7:  DATA E5,3C
00F8:  DATA 00,00
*
0228:  MOVF   0B,W
0229:  MOVWF  6F
022A:  BCF    0B.7
022B:  BSF    03.5
022C:  BSF    03.6
022D:  BSF    0C.7
022E:  BSF    0C.0
022F:  NOP
0230:  NOP
0231:  BCF    03.5
0232:  BCF    03.6
0233:  BTFSC  6F.7
0234:  BSF    0B.7
0235:  BSF    03.6
0236:  MOVF   0C,W
0237:  ANDLW  7F
0238:  BTFSC  03.2
0239:  GOTO   27B
023A:  BCF    03.6
023B:  MOVWF  6F
023C:  BSF    03.6
023D:  MOVF   0D,W
023E:  MOVWF  70
023F:  MOVF   0F,W
0240:  MOVWF  71
0241:  BCF    03.6
0242:  MOVF   6F,W
0243:  BSF    03.5
0244:  MOVWF  27
0245:  BCF    03.5
0246:  CALL   1EE
0247:  MOVF   70,W
0248:  BSF    03.6
0249:  MOVWF  0D
024A:  MOVF   71,W
024B:  MOVWF  0F
024C:  BCF    03.6
024D:  MOVF   0B,W
024E:  MOVWF  72
024F:  BCF    0B.7
0250:  BSF    03.5
0251:  BSF    03.6
0252:  BSF    0C.7
0253:  BSF    0C.0
0254:  NOP
0255:  NOP
0256:  BTFSS  72.7
0257:  GOTO   25D
0258:  BCF    03.5
0259:  BCF    03.6
025A:  BSF    0B.7
025B:  BSF    03.5
025C:  BSF    03.6
025D:  BCF    03.5
025E:  RLF    0C,W
025F:  RLF    0E,W
0260:  ANDLW  7F
0261:  BTFSC  03.2
0262:  GOTO   27B
0263:  BCF    03.6
0264:  MOVWF  6F
0265:  BSF    03.6
0266:  MOVF   0D,W
0267:  MOVWF  70
0268:  MOVF   0F,W
0269:  MOVWF  71
026A:  BCF    03.6
026B:  MOVF   6F,W
026C:  BSF    03.5
026D:  MOVWF  27
026E:  BCF    03.5
026F:  CALL   1EE
0270:  MOVF   70,W
0271:  BSF    03.6
0272:  MOVWF  0D
0273:  MOVF   71,W
0274:  MOVWF  0F
0275:  INCF   0D,F
0276:  BTFSC  03.2
0277:  INCF   0F,F
0278:  BCF    03.6
0279:  GOTO   228
027A:  BSF    03.6
027B:  BCF    03.6
027C:  RETURN
*
0328:  MOVLW  10
0329:  MOVWF  7B
032A:  CLRF   77
032B:  CLRF   7A
032C:  RRF    74,F
032D:  RRF    73,F
032E:  BTFSS  03.0
032F:  GOTO   336
0330:  MOVF   75,W
0331:  ADDWF  77,F
0332:  BTFSC  03.0
0333:  INCF   7A,F
0334:  MOVF   76,W
0335:  ADDWF  7A,F
0336:  RRF    7A,F
0337:  RRF    77,F
0338:  RRF    79,F
0339:  RRF    78,F
033A:  DECFSZ 7B,F
033B:  GOTO   32C
033C:  RETURN
033D:  CLRF   78
033E:  CLRF   79
033F:  CLRF   77
0340:  CLRF   7A
0341:  MOVF   74,W
0342:  BTFSS  03.2
0343:  GOTO   347
0344:  MOVF   73,W
0345:  BTFSC  03.2
0346:  GOTO   361
0347:  MOVLW  10
0348:  MOVWF  75
0349:  BCF    03.0
034A:  RLF    71,F
034B:  RLF    72,F
034C:  RLF    77,F
034D:  RLF    7A,F
034E:  MOVF   74,W
034F:  SUBWF  7A,W
0350:  BTFSS  03.2
0351:  GOTO   354
0352:  MOVF   73,W
0353:  SUBWF  77,W
0354:  BTFSS  03.0
0355:  GOTO   35D
0356:  MOVF   73,W
0357:  SUBWF  77,F
0358:  BTFSS  03.0
0359:  DECF   7A,F
035A:  MOVF   74,W
035B:  SUBWF  7A,F
035C:  BSF    03.0
035D:  RLF    78,F
035E:  RLF    79,F
035F:  DECFSZ 75,F
0360:  GOTO   349
0361:  RETURN
*
03F4:  MOVF   0B,W
03F5:  MOVWF  72
03F6:  BCF    0B.7
03F7:  BSF    03.5
03F8:  BSF    03.6
03F9:  BSF    0C.7
03FA:  BSF    0C.0
03FB:  NOP
03FC:  NOP
03FD:  BTFSS  72.7
03FE:  GOTO   404
03FF:  BCF    03.5
0400:  BCF    03.6
0401:  BSF    0B.7
0402:  BSF    03.5
0403:  BSF    03.6
0404:  BTFSC  03.0
0405:  GOTO   42D
0406:  BCF    03.5
0407:  MOVF   0C,W
0408:  ANDLW  7F
0409:  MOVWF  72
040A:  MOVF   0D,W
040B:  MOVWF  73
040C:  MOVF   0F,W
040D:  MOVWF  74
040E:  MOVF   72,W
040F:  BSF    03.5
0410:  BCF    03.6
0411:  MOVWF  27
0412:  BCF    03.5
0413:  CALL   1EE
0414:  MOVF   73,W
0415:  BSF    03.6
0416:  MOVWF  0D
0417:  MOVF   74,W
0418:  MOVWF  0F
0419:  BCF    03.6
041A:  MOVF   0B,W
041B:  MOVWF  75
041C:  BCF    0B.7
041D:  BSF    03.5
041E:  BSF    03.6
041F:  BSF    0C.7
0420:  BSF    0C.0
0421:  NOP
0422:  NOP
0423:  BTFSS  75.7
0424:  GOTO   42A
0425:  BCF    03.5
0426:  BCF    03.6
0427:  BSF    0B.7
0428:  BSF    03.5
0429:  BSF    03.6
042A:  DECFSZ 71,F
042B:  GOTO   42D
042C:  GOTO   44B
042D:  BCF    03.5
042E:  RLF    0C,W
042F:  RLF    0E,W
0430:  ANDLW  7F
0431:  MOVWF  72
0432:  MOVF   0D,W
0433:  MOVWF  73
0434:  MOVF   0F,W
0435:  MOVWF  74
0436:  MOVF   72,W
0437:  BSF    03.5
0438:  BCF    03.6
0439:  MOVWF  27
043A:  BCF    03.5
043B:  CALL   1EE
043C:  MOVF   73,W
043D:  BSF    03.6
043E:  MOVWF  0D
043F:  MOVF   74,W
0440:  MOVWF  0F
0441:  INCF   0D,F
0442:  BTFSC  03.2
0443:  INCF   0F,F
0444:  BCF    03.0
0445:  DECFSZ 71,F
0446:  GOTO   448
0447:  GOTO   44A
0448:  BCF    03.6
0449:  GOTO   3F4
044A:  BSF    03.5
044B:  BCF    03.5
044C:  BCF    03.6
044D:  RETURN
044E:  MOVF   7B,W
044F:  CLRF   78
0450:  SUBWF  76,W
0451:  BTFSC  03.0
0452:  GOTO   456
0453:  MOVF   76,W
0454:  MOVWF  77
0455:  GOTO   462
0456:  CLRF   77
0457:  MOVLW  08
0458:  MOVWF  7C
0459:  RLF    76,F
045A:  RLF    77,F
045B:  MOVF   7B,W
045C:  SUBWF  77,W
045D:  BTFSC  03.0
045E:  MOVWF  77
045F:  RLF    78,F
0460:  DECFSZ 7C,F
0461:  GOTO   459
0462:  RETURN
0463:  BSF    03.5
0464:  CLRF   26
0465:  MOVF   04,W
0466:  MOVWF  25
0467:  BCF    26.0
0468:  BTFSC  03.7
0469:  BSF    26.0
046A:  BTFSS  72.7
046B:  GOTO   474
046C:  BSF    25.7
046D:  BTFSS  25.4
046E:  INCF   25,F
046F:  COMF   71,F
0470:  COMF   72,F
0471:  INCF   71,F
0472:  BTFSC  03.2
0473:  INCF   72,F
0474:  SWAPF  72,W
0475:  IORLW  F0
0476:  MOVWF  21
0477:  ADDWF  21,F
0478:  ADDLW  E2
0479:  MOVWF  22
047A:  ADDLW  32
047B:  MOVWF  24
047C:  MOVF   72,W
047D:  ANDLW  0F
047E:  ADDWF  22,F
047F:  ADDWF  22,F
0480:  ADDWF  24,F
0481:  ADDLW  E9
0482:  MOVWF  23
0483:  ADDWF  23,F
0484:  ADDWF  23,F
0485:  SWAPF  71,W
0486:  ANDLW  0F
0487:  ADDWF  23,F
0488:  ADDWF  24,F
0489:  RLF    23,F
048A:  RLF    24,F
048B:  COMF   24,F
048C:  RLF    24,F
048D:  MOVF   71,W
048E:  ANDLW  0F
048F:  ADDWF  24,F
0490:  RLF    21,F
0491:  MOVLW  07
0492:  MOVWF  20
0493:  MOVLW  0A
0494:  ADDWF  24,F
0495:  DECF   23,F
0496:  BTFSS  03.0
0497:  GOTO   494
0498:  ADDWF  23,F
0499:  DECF   22,F
049A:  BTFSS  03.0
049B:  GOTO   498
049C:  ADDWF  22,F
049D:  DECF   21,F
049E:  BTFSS  03.0
049F:  GOTO   49C
04A0:  ADDWF  21,F
04A1:  DECF   20,F
04A2:  BTFSS  03.0
04A3:  GOTO   4A0
04A4:  MOVLW  A0
04A5:  MOVWF  04
04A6:  BCF    03.7
04A7:  MOVLW  07
04A8:  ANDWF  25,W
04A9:  BCF    25.6
04AA:  DECF   04,F
04AB:  ANDWF  25,W
04AC:  BTFSS  03.2
04AD:  GOTO   4B5
04AE:  BTFSC  25.4
04AF:  INCF   04,F
04B0:  BTFSC  25.4
04B1:  GOTO   4B5
04B2:  MOVLW  20
04B3:  MOVWF  77
04B4:  GOTO   4D2
04B5:  ADDWF  04,F
04B6:  MOVLW  A4
04B7:  SUBWF  04,W
04B8:  BTFSC  03.2
04B9:  BSF    25.6
04BA:  MOVF   00,W
04BB:  MOVWF  77
04BC:  BTFSS  03.2
04BD:  GOTO   4C6
04BE:  BTFSC  25.6
04BF:  GOTO   4C6
04C0:  BTFSC  25.4
04C1:  GOTO   4E2
04C2:  BTFSC  25.3
04C3:  GOTO   4C6
04C4:  MOVLW  20
04C5:  GOTO   4D1
04C6:  BTFSS  25.7
04C7:  GOTO   4CE
04C8:  MOVLW  2D
04C9:  MOVWF  77
04CA:  DECF   04,F
04CB:  BCF    25.6
04CC:  BCF    25.7
04CD:  GOTO   4D2
04CE:  BSF    25.3
04CF:  BCF    25.4
04D0:  MOVLW  30
04D1:  ADDWF  77,F
04D2:  CLRF   72
04D3:  MOVF   04,W
04D4:  MOVWF  71
04D5:  BCF    72.0
04D6:  BTFSC  03.7
04D7:  BSF    72.0
04D8:  MOVF   77,W
04D9:  MOVWF  27
04DA:  BCF    03.5
04DB:  CALL   1EE
04DC:  MOVF   71,W
04DD:  MOVWF  04
04DE:  BCF    03.7
04DF:  BTFSC  72.0
04E0:  BSF    03.7
04E1:  BSF    03.5
04E2:  INCF   04,F
04E3:  BTFSS  25.6
04E4:  GOTO   4B6
04E5:  BCF    03.5
04E6:  RETURN
*
0504:  MOVLW  20
0505:  BTFSS  71.4
0506:  MOVLW  30
0507:  MOVWF  72
0508:  MOVF   70,W
0509:  MOVWF  77
050A:  BTFSS  70.7
050B:  GOTO   514
050C:  COMF   77,F
050D:  INCF   77,F
050E:  MOVF   77,W
050F:  MOVWF  70
0510:  MOVLW  2D
0511:  MOVWF  72
0512:  BSF    71.7
0513:  BSF    71.0
0514:  MOVF   70,W
0515:  MOVWF  76
0516:  MOVLW  64
0517:  MOVWF  7B
0518:  CALL   44E
0519:  MOVF   77,W
051A:  MOVWF  70
051B:  MOVLW  30
051C:  ADDWF  78,W
051D:  MOVWF  73
051E:  MOVF   70,W
051F:  MOVWF  76
0520:  MOVLW  0A
0521:  MOVWF  7B
0522:  CALL   44E
0523:  MOVLW  30
0524:  ADDWF  77,W
0525:  MOVWF  75
0526:  MOVLW  30
0527:  ADDWF  78,W
0528:  MOVWF  74
0529:  MOVF   72,W
052A:  MOVWF  77
052B:  MOVLW  30
052C:  SUBWF  73,W
052D:  BTFSC  03.2
052E:  GOTO   533
052F:  BSF    71.1
0530:  BTFSC  71.7
0531:  BSF    71.2
0532:  GOTO   547
0533:  MOVF   72,W
0534:  MOVWF  73
0535:  MOVLW  20
0536:  MOVWF  72
0537:  MOVLW  30
0538:  SUBWF  74,W
0539:  BTFSC  03.2
053A:  GOTO   53F
053B:  BSF    71.0
053C:  BTFSC  71.7
053D:  BSF    71.1
053E:  GOTO   547
053F:  BTFSS  03.2
0540:  BSF    71.0
0541:  BTFSS  03.2
0542:  GOTO   547
0543:  MOVF   73,W
0544:  MOVWF  74
0545:  MOVLW  20
0546:  MOVWF  73
0547:  BTFSC  71.2
0548:  GOTO   54E
0549:  BTFSC  71.1
054A:  GOTO   553
054B:  BTFSC  71.0
054C:  GOTO   558
054D:  GOTO   55D
054E:  MOVF   72,W
054F:  BSF    03.5
0550:  MOVWF  27
0551:  BCF    03.5
0552:  CALL   1EE
0553:  MOVF   73,W
0554:  BSF    03.5
0555:  MOVWF  27
0556:  BCF    03.5
0557:  CALL   1EE
0558:  MOVF   74,W
0559:  BSF    03.5
055A:  MOVWF  27
055B:  BCF    03.5
055C:  CALL   1EE
055D:  MOVF   75,W
055E:  BSF    03.5
055F:  MOVWF  27
0560:  BCF    03.5
0561:  CALL   1EE
....................  
.................... #list 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEVICES                         */ 
.................... /********************************************************/ 
.................... #device ADC = 10 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM USES                            */ 
.................... /********************************************************/ 
.................... #use delay(clock=4M)  
*
00F9:  MOVLW  A8
00FA:  MOVWF  04
00FB:  BCF    03.7
00FC:  MOVF   00,W
00FD:  BTFSC  03.2
00FE:  GOTO   10D
00FF:  MOVLW  01
0100:  MOVWF  78
0101:  CLRF   77
0102:  DECFSZ 77,F
0103:  GOTO   102
0104:  DECFSZ 78,F
0105:  GOTO   101
0106:  MOVLW  4A
0107:  MOVWF  77
0108:  DECFSZ 77,F
0109:  GOTO   108
010A:  GOTO   10B
010B:  DECFSZ 00,F
010C:  GOTO   0FF
010D:  RETURN
.................... #use rs232(baud=9600,parity=N,uart1,bits=8) 
.................... #use fast_io(b) 
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INCLUDES                        */ 
.................... /********************************************************/ 
.................... #include <lcd.c>     
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0128:  MOVLW  0F
0129:  BSF    03.5
012A:  ANDWF  08,W
012B:  IORLW  F0
012C:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
012D:  BCF    03.5
012E:  BSF    08.2
....................    delay_cycles(1); 
012F:  NOP
....................    lcd_output_enable(1); 
0130:  BSF    08.0
....................    delay_cycles(1); 
0131:  NOP
....................    high = lcd_read_nibble(); 
0132:  CALL   11C
0133:  MOVF   78,W
0134:  BSF    03.5
0135:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0136:  BCF    03.5
0137:  BCF    08.0
....................    delay_cycles(1); 
0138:  NOP
....................    lcd_output_enable(1); 
0139:  BSF    08.0
....................    delay_us(1); 
013A:  NOP
....................    low = lcd_read_nibble(); 
013B:  CALL   11C
013C:  MOVF   78,W
013D:  BSF    03.5
013E:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
013F:  BCF    03.5
0140:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0141:  MOVLW  0F
0142:  BSF    03.5
0143:  ANDWF  08,W
0144:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0145:  SWAPF  2F,W
0146:  MOVWF  77
0147:  MOVLW  F0
0148:  ANDWF  77,F
0149:  MOVF   77,W
014A:  IORWF  2E,W
014B:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
011C:  MOVF   08,W
011D:  MOVWF  77
011E:  SWAPF  08,W
011F:  ANDLW  0F
0120:  MOVWF  78
....................   #endif 
0121:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
010E:  BSF    03.5
010F:  SWAPF  2F,W
0110:  ANDLW  F0
0111:  MOVWF  77
0112:  MOVLW  0F
0113:  BCF    03.5
0114:  ANDWF  08,W
0115:  IORWF  77,W
0116:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0117:  NOP
....................    lcd_output_enable(1); 
0118:  BSF    08.0
....................    delay_us(2); 
0119:  GOTO   11A
....................    lcd_output_enable(0); 
011A:  BCF    08.0
011B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0122:  BSF    03.5
0123:  BCF    08.0
....................    lcd_rs_tris(); 
0124:  BCF    08.1
....................    lcd_rw_tris(); 
0125:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0126:  BCF    03.5
0127:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
014C:  MOVF   78,W
014D:  MOVWF  2E
014E:  BTFSS  2E.7
014F:  GOTO   152
0150:  BCF    03.5
0151:  GOTO   128
....................    lcd_output_rs(address); 
0152:  BTFSC  2C.0
0153:  GOTO   157
0154:  BCF    03.5
0155:  BCF    08.1
0156:  BSF    03.5
0157:  BTFSS  2C.0
0158:  GOTO   15C
0159:  BCF    03.5
015A:  BSF    08.1
015B:  BSF    03.5
....................    delay_cycles(1); 
015C:  NOP
....................    lcd_output_rw(0); 
015D:  BCF    03.5
015E:  BCF    08.2
....................    delay_cycles(1); 
015F:  NOP
....................    lcd_output_enable(0); 
0160:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0161:  BSF    03.5
0162:  SWAPF  2D,W
0163:  MOVWF  2E
0164:  MOVLW  0F
0165:  ANDWF  2E,F
0166:  MOVF   2E,W
0167:  MOVWF  2F
0168:  BCF    03.5
0169:  CALL   10E
....................    lcd_send_nibble(n & 0xf); 
016A:  BSF    03.5
016B:  MOVF   2D,W
016C:  ANDLW  0F
016D:  MOVWF  2E
016E:  MOVWF  2F
016F:  BCF    03.5
0170:  CALL   10E
0171:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0172:  MOVLW  28
0173:  MOVWF  6F
0174:  MOVLW  0C
0175:  MOVWF  70
0176:  MOVLW  01
0177:  MOVWF  71
0178:  MOVLW  06
0179:  MOVWF  72
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
017A:  BCF    08.0
....................    lcd_output_rs(0); 
017B:  BCF    08.1
....................    lcd_output_rw(0); 
017C:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
017D:  MOVLW  0F
017E:  BSF    03.5
017F:  ANDWF  08,W
0180:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0181:  BCF    08.0
....................    lcd_rs_tris(); 
0182:  BCF    08.1
....................    lcd_rw_tris(); 
0183:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0184:  MOVLW  0F
0185:  MOVWF  28
0186:  BCF    03.5
0187:  CALL   0F9
....................    for(i=1;i<=3;++i) 
0188:  MOVLW  01
0189:  MOVWF  6E
018A:  MOVF   6E,W
018B:  SUBLW  03
018C:  BTFSS  03.0
018D:  GOTO   19A
....................    { 
....................        lcd_send_nibble(3); 
018E:  MOVLW  03
018F:  BSF    03.5
0190:  MOVWF  2F
0191:  BCF    03.5
0192:  CALL   10E
....................        delay_ms(5); 
0193:  MOVLW  05
0194:  BSF    03.5
0195:  MOVWF  28
0196:  BCF    03.5
0197:  CALL   0F9
0198:  INCF   6E,F
0199:  GOTO   18A
....................    } 
....................     
....................    lcd_send_nibble(2); 
019A:  MOVLW  02
019B:  BSF    03.5
019C:  MOVWF  2F
019D:  BCF    03.5
019E:  CALL   10E
....................    delay_ms(5); 
019F:  MOVLW  05
01A0:  BSF    03.5
01A1:  MOVWF  28
01A2:  BCF    03.5
01A3:  CALL   0F9
....................    for(i=0;i<=3;++i) 
01A4:  CLRF   6E
01A5:  MOVF   6E,W
01A6:  SUBLW  03
01A7:  BTFSS  03.0
01A8:  GOTO   1B7
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01A9:  MOVLW  6F
01AA:  ADDWF  6E,W
01AB:  MOVWF  04
01AC:  BCF    03.7
01AD:  MOVF   00,W
01AE:  MOVWF  73
01AF:  BSF    03.5
01B0:  CLRF   2C
01B1:  MOVF   73,W
01B2:  MOVWF  2D
01B3:  BCF    03.5
01B4:  CALL   122
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01B5:  INCF   6E,F
01B6:  GOTO   1A5
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01DA:  BSF    03.5
01DB:  DECFSZ 29,W
01DC:  GOTO   1DE
01DD:  GOTO   1E1
....................       address=LCD_LINE_TWO; 
01DE:  MOVLW  40
01DF:  MOVWF  2A
01E0:  GOTO   1E2
....................    else 
....................       address=0; 
01E1:  CLRF   2A
....................       
....................    address+=x-1; 
01E2:  MOVLW  01
01E3:  SUBWF  28,W
01E4:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
01E5:  MOVF   2A,W
01E6:  IORLW  80
01E7:  MOVWF  2B
01E8:  CLRF   2C
01E9:  MOVF   2B,W
01EA:  MOVWF  2D
01EB:  BCF    03.5
01EC:  CALL   122
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01ED:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01EE:  BSF    03.5
01EF:  MOVF   27,W
01F0:  XORLW  07
01F1:  BCF    03.5
01F2:  BTFSC  03.2
01F3:  GOTO   1FE
01F4:  XORLW  0B
01F5:  BTFSC  03.2
01F6:  GOTO   205
01F7:  XORLW  06
01F8:  BTFSC  03.2
01F9:  GOTO   211
01FA:  XORLW  02
01FB:  BTFSC  03.2
01FC:  GOTO   219
01FD:  GOTO   220
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01FE:  MOVLW  01
01FF:  BSF    03.5
0200:  MOVWF  28
0201:  MOVWF  29
0202:  BCF    03.5
0203:  CALL   1DA
0204:  GOTO   227
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0205:  BSF    03.5
0206:  CLRF   2C
0207:  MOVLW  01
0208:  MOVWF  2D
0209:  BCF    03.5
020A:  CALL   122
....................                      delay_ms(2); 
020B:  MOVLW  02
020C:  BSF    03.5
020D:  MOVWF  28
020E:  BCF    03.5
020F:  CALL   0F9
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0210:  GOTO   227
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0211:  MOVLW  01
0212:  BSF    03.5
0213:  MOVWF  28
0214:  MOVLW  02
0215:  MOVWF  29
0216:  BCF    03.5
0217:  CALL   1DA
0218:  GOTO   227
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0219:  BSF    03.5
021A:  CLRF   2C
021B:  MOVLW  10
021C:  MOVWF  2D
021D:  BCF    03.5
021E:  CALL   122
021F:  GOTO   227
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0220:  MOVLW  01
0221:  BSF    03.5
0222:  MOVWF  2C
0223:  MOVF   27,W
0224:  MOVWF  2D
0225:  BCF    03.5
0226:  CALL   122
....................      #endif 
....................    } 
0227:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <math.h>        
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... //#include <2408.c>    will be unlocked in soooon :)                                    
.................... /********************************************************/ 
.................... /*               SYSTEM FUSES                           */ 
.................... /********************************************************/                                          
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM REGISTER                        */ 
.................... /********************************************************/ 
.................... //!#byte my_TIM0_OPTION_REG = 0x81  
.................... //!#byte my_TIM0_MODULE_REG = 0x01  
.................... //!#byte my_INTCON_REG      = 0x0B 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM STRUCTS                         */ 
.................... /********************************************************/ 
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;       //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM VARIABLES                       */ 
.................... /********************************************************/ 
.................... //-VAR-->CRITICAL PART 
.................... char readed_ID;      //Coming data will be When came from slave PIC 
.................... int8 systemLock;     //If the ID is valid, system open. Otherwise it will remain locked 
.................... int8 OPS_Status;     //55 means ops will be canceled, otherwise ops will be going on 
.................... char SelectionState; //Put 'X' if button_Select is HIGH, put empty character if button_RemoveSelect is HIGH 
....................  
.................... //-VAR-->Keeps Clients 
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;   // Will be used as given on the right --> MikroClient[ClientNumber]                                         
....................  
.................... //-VAR-->POTENTIOMETERS 
.................... int Index_OptionMenu; 
.................... int Index_TimeMoneyPreference; 
.................... int Index_PolishMililitre; 
.................... unsigned long int val_ADC_Pot_Surf; 
.................... unsigned long int val_ADC_Pot_Timer; 
.................... unsigned long int val_ADC_Pot_Polish; 
....................  
.................... unsigned long int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};//Seconds 
*
0822:  MOVLW  14
0823:  BCF    03.6
0824:  MOVWF  49
0825:  CLRF   4A
0826:  MOVLW  28
0827:  MOVWF  4B
0828:  CLRF   4C
0829:  MOVLW  3C
082A:  MOVWF  4D
082B:  CLRF   4E
082C:  MOVLW  50
082D:  MOVWF  4F
082E:  CLRF   50
082F:  MOVLW  64
0830:  MOVWF  51
0831:  CLRF   52
0832:  MOVLW  78
0833:  MOVWF  53
0834:  CLRF   54
0835:  MOVLW  8C
0836:  MOVWF  55
0837:  CLRF   56
0838:  MOVLW  A0
0839:  MOVWF  57
083A:  CLRF   58
083B:  MOVLW  B4
083C:  MOVWF  59
083D:  CLRF   5A
083E:  MOVLW  C8
083F:  MOVWF  5B
0840:  CLRF   5C
0841:  MOVLW  DC
0842:  MOVWF  5D
0843:  CLRF   5E
0844:  MOVLW  F0
0845:  MOVWF  5F
0846:  CLRF   60
.................... unsigned long int mililitrePolish[5] = {1,2,3,4,5}; // 1x100ml , 2x100ml, ... 5x100ml 
0847:  MOVLW  01
0848:  MOVWF  61
0849:  CLRF   62
084A:  MOVLW  02
084B:  MOVWF  63
084C:  CLRF   64
084D:  MOVLW  03
084E:  MOVWF  65
084F:  CLRF   66
0850:  MOVLW  04
0851:  MOVWF  67
0852:  CLRF   68
0853:  MOVLW  05
0854:  MOVWF  69
0855:  CLRF   6A
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEFINATION                      */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM INPUT & OUTPUT ======== */ 
.................... #define button_NEXT           pin_A3 
.................... #define button_BACK           pin_A4 
.................... #define button_Select         pin_A5 
.................... #define button_RemoveSelect   pin_C0 
.................... #define button_OPS_START      pin_C1 
.................... #define button_OPS_CANCEL     pin_B0 
....................  
....................  
.................... /********************************************************/ 
.................... /*               FUNCTIONS PROTOTYPES                   */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM CONFIGURATION FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_Init(void); 
.................... void trisSetting_Init(void); 
.................... void interruptSetting_Init(void); 
.................... void adcSetting_Init(void); 
....................  
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_lcd_IdleStatus(void); 
.................... void NavigateOperationMenu(void); 
.................... void NavigateTimeMoneyPreferenceMenu(void); 
.................... void NavigatePolishingMenu(void); 
....................  
.................... /* ======== UART SERIAL COM. FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_uart_CheckTheMessage(void); 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM MACROS                          */ 
.................... /********************************************************/ 
.................... /* ======== -BEGIN- SYSTEM POTENTIOMETER INDEXER -BEGIN- ======== */ 
.................... #define ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf)        \ 
....................    do{                                        \ 
....................           Index_OptionMenu = ((val_ADC_Pot_Surf*5)/1020);  \ 
....................           if(Index_OptionMenu >= 5){                       \ 
....................             Index_OptionMenu = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer)              \ 
....................    do{                                                                \ 
....................           Index_TimeMoneyPreference = ((val_ADC_Pot_Timer*12)/1020);  \ 
....................           if(Index_TimeMoneyPreference >= 12){                        \ 
....................              Index_TimeMoneyPreference = 11;                          \ 
....................           }                                                           \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofPolish(val_ADC_Pot_Polish)        \ 
....................    do{                                        \ 
....................           Index_PolishMililitre = ((val_ADC_Pot_Polish*5)/1020);  \ 
....................           if(Index_PolishMililitre >= 5){                       \ 
....................             Index_PolishMililitre = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
....................     
.................... /* ======== -END- SYSTEM POTENTIOMETER INDEXER -END- ======== */    
....................  
.................... /* ======== -BEGIN- SYSTEM TIMER TIME CONFIG -BEGIN- ======== */ 
.................... /* ======== -END- SYSTEM TIMER TIME CONFIG -END- ======== */ 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INTERRUPTS                      */ 
.................... /********************************************************/ 
.................... /* ======== -BEGIN- EXTERNAL INTERRUPT -BEGIN- ======== */ 
.................... #int_EXT 
.................... void system_isr_OperationCANCEL(){ 
....................   OPS_Status = 55; 
*
004F:  MOVLW  37
0050:  MOVWF  2D
0051:  BCF    0B.1
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   02B
.................... } 
.................... /* ======== -END- EXTERNAL INTERRUPT -END- ======== */ 
....................  
.................... /* ======== -BEGIN- TIMER_0 INTERRUPT -BEGIN- ======== */ 
.................... /* ======== -END- TIMER_0 INTERRUPT -END- ======== */ 
....................  
....................  
....................  
.................... void main(void)  
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  BSF    03.5
0804:  BSF    03.6
0805:  BCF    07.3
0806:  MOVLW  19
0807:  BCF    03.6
0808:  MOVWF  19
0809:  MOVLW  A6
080A:  MOVWF  18
080B:  MOVLW  90
080C:  BCF    03.5
080D:  MOVWF  18
080E:  CLRF   6C
080F:  CLRF   6B
0810:  MOVLW  FF
0811:  MOVWF  6D
0812:  BSF    03.5
0813:  BSF    03.6
0814:  MOVF   09,W
0815:  ANDLW  C0
0816:  MOVWF  09
0817:  BCF    03.6
0818:  BCF    1F.4
0819:  BCF    1F.5
081A:  MOVLW  00
081B:  BSF    03.6
081C:  MOVWF  08
081D:  BCF    03.5
081E:  CLRF   07
081F:  CLRF   08
0820:  CLRF   09
0821:  BCF    03.7
.................... { 
....................    
....................    //-->System parameters will be initialized 
....................    SubSystem_Init(); 
*
0856:  BCF    0A.3
0857:  GOTO   172
0858:  BSF    0A.3
....................        
....................    //-->Wait until unlock the system 
....................    do{ 
....................            SubSystem_lcd_IdleStatus();   //Greeting the customer 
0859:  BCF    0A.3
085A:  GOTO   27D
085B:  BSF    0A.3
....................             
....................            if(kbhit()) 
085C:  BTFSS  0C.5
085D:  GOTO   065
....................            { 
....................               readed_ID = getc(); 
085E:  BTFSS  0C.5
085F:  GOTO   05E
0860:  MOVF   1A,W
0861:  MOVWF  2B
....................               SubSystem_uart_CheckTheMessage(); 
0862:  BCF    0A.3
0863:  GOTO   2D8
0864:  BSF    0A.3
....................            }       
....................          
....................     }while(systemLock!=1); 
0865:  DECFSZ 2C,W
0866:  GOTO   059
....................   
....................     delay_ms(1000); 
0867:  MOVLW  04
0868:  MOVWF  6F
0869:  MOVLW  FA
086A:  BSF    03.5
086B:  MOVWF  28
086C:  BCF    0A.3
086D:  BCF    03.5
086E:  CALL   0F9
086F:  BSF    0A.3
0870:  DECFSZ 6F,F
0871:  GOTO   069
....................    
....................       //Potansiyometreden deðerler okuyacak, opsiyonlarý gezmek için 
....................       //ileri butonuna basýlýnca pot hangi opsiyonda ise o opsiyona gidilecek 
....................       //geri butonuna basýlýnca pot ile tekrardan yukardan aþaðý gezilebilecek 
....................       //diyelim ki bir opsiyonun içine girdi, pot kullanarak zamanlama ayarlarý ile oynuyor,  
....................       //çift týk ile ilgili zaman ve ücreti seçebilecek, tek týk ile de bozabilecek 
....................       do{ 
....................              //Start Of Conversation for ADC_Surf 
....................              set_adc_channel(0); 
0872:  MOVLW  00
0873:  MOVWF  78
0874:  MOVF   1F,W
0875:  ANDLW  C3
0876:  IORWF  78,W
0877:  MOVWF  1F
....................               
....................              //Get Surf_Pot ADC value(0-1024) 
....................              val_ADC_Pot_Surf = read_adc();   
0878:  BSF    1F.1
0879:  BTFSC  1F.1
087A:  GOTO   079
087B:  BSF    03.5
087C:  MOVF   1E,W
087D:  BCF    03.5
087E:  MOVWF  43
087F:  MOVF   1E,W
0880:  MOVWF  44
....................               
....................              //Convert Surf_Pot ADC value into the option menu index 
....................              ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf); 
0881:  MOVF   44,W
0882:  MOVWF  74
0883:  MOVF   43,W
0884:  MOVWF  73
0885:  CLRF   76
0886:  MOVLW  05
0887:  MOVWF  75
0888:  BCF    0A.3
0889:  CALL   328
088A:  BSF    0A.3
088B:  MOVF   79,W
088C:  MOVWF  70
088D:  MOVF   78,W
088E:  MOVWF  6F
088F:  MOVF   70,W
0890:  MOVWF  72
0891:  MOVF   6F,W
0892:  MOVWF  71
0893:  MOVLW  03
0894:  MOVWF  74
0895:  MOVLW  FC
0896:  MOVWF  73
0897:  BCF    0A.3
0898:  CALL   33D
0899:  BSF    0A.3
089A:  MOVF   78,W
089B:  MOVWF  40
089C:  SUBLW  04
089D:  BTFSC  03.0
089E:  GOTO   0A1
089F:  MOVLW  04
08A0:  MOVWF  40
....................              
....................              //Use index value to show selected option and other one 
....................              NavigateOperationMenu(); 
08A1:  BCF    0A.3
08A2:  GOTO   362
08A3:  BSF    0A.3
....................               
....................              //Clear selection 
....................              SelectionState = ' '; 
08A4:  MOVLW  20
08A5:  MOVWF  2E
....................               
....................                 //The client wants to see the next section based on the selected option 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu <= 2)) 
08A6:  BSF    03.5
08A7:  BSF    05.3
08A8:  BCF    03.5
08A9:  BTFSS  05.3
08AA:  GOTO   0EA
08AB:  MOVF   40,W
08AC:  SUBLW  02
08AD:  BTFSS  03.0
08AE:  GOTO   0EA
....................                 { 
....................        
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
08AF:  MOVLW  04
08B0:  MOVWF  78
08B1:  MOVF   1F,W
08B2:  ANDLW  C3
08B3:  IORWF  78,W
08B4:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_Timer = read_adc();  
08B5:  BSF    1F.1
08B6:  BTFSC  1F.1
08B7:  GOTO   0B6
08B8:  BSF    03.5
08B9:  MOVF   1E,W
08BA:  BCF    03.5
08BB:  MOVWF  45
08BC:  MOVF   1E,W
08BD:  MOVWF  46
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer); 
08BE:  MOVF   46,W
08BF:  MOVWF  74
08C0:  MOVF   45,W
08C1:  MOVWF  73
08C2:  CLRF   76
08C3:  MOVLW  0C
08C4:  MOVWF  75
08C5:  BCF    0A.3
08C6:  CALL   328
08C7:  BSF    0A.3
08C8:  MOVF   79,W
08C9:  MOVWF  70
08CA:  MOVF   78,W
08CB:  MOVWF  6F
08CC:  MOVF   70,W
08CD:  MOVWF  72
08CE:  MOVF   6F,W
08CF:  MOVWF  71
08D0:  MOVLW  03
08D1:  MOVWF  74
08D2:  MOVLW  FC
08D3:  MOVWF  73
08D4:  BCF    0A.3
08D5:  CALL   33D
08D6:  BSF    0A.3
08D7:  MOVF   78,W
08D8:  MOVWF  41
08D9:  SUBLW  0B
08DA:  BTFSC  03.0
08DB:  GOTO   0DE
08DC:  MOVLW  0B
08DD:  MOVWF  41
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigateTimeMoneyPreferenceMenu(); 
08DE:  BCF    0A.3
08DF:  GOTO   4E7
08E0:  BSF    0A.3
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
08E1:  BSF    03.5
08E2:  BSF    05.4
08E3:  BCF    03.5
08E4:  BTFSC  05.4
....................                                  break; 
08E5:  GOTO   0EA
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
08E6:  MOVF   2D,W
08E7:  SUBLW  37
08E8:  BTFSS  03.2
08E9:  GOTO   0AF
....................                 } 
....................                  
....................                  
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu == 3)){ 
08EA:  BSF    03.5
08EB:  BSF    05.3
08EC:  BCF    03.5
08ED:  BTFSS  05.3
08EE:  GOTO   12E
08EF:  MOVF   40,W
08F0:  SUBLW  03
08F1:  BTFSS  03.2
08F2:  GOTO   12E
....................     
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
08F3:  MOVLW  04
08F4:  MOVWF  78
08F5:  MOVF   1F,W
08F6:  ANDLW  C3
08F7:  IORWF  78,W
08F8:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                                
....................                               val_ADC_Pot_Polish = read_adc();  
08F9:  BSF    1F.1
08FA:  BTFSC  1F.1
08FB:  GOTO   0FA
08FC:  BSF    03.5
08FD:  MOVF   1E,W
08FE:  BCF    03.5
08FF:  MOVWF  47
0900:  MOVF   1E,W
0901:  MOVWF  48
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofPolish(val_ADC_Pot_Polish); 
0902:  MOVF   48,W
0903:  MOVWF  74
0904:  MOVF   47,W
0905:  MOVWF  73
0906:  CLRF   76
0907:  MOVLW  05
0908:  MOVWF  75
0909:  BCF    0A.3
090A:  CALL   328
090B:  BSF    0A.3
090C:  MOVF   79,W
090D:  MOVWF  70
090E:  MOVF   78,W
090F:  MOVWF  6F
0910:  MOVF   70,W
0911:  MOVWF  72
0912:  MOVF   6F,W
0913:  MOVWF  71
0914:  MOVLW  03
0915:  MOVWF  74
0916:  MOVLW  FC
0917:  MOVWF  73
0918:  BCF    0A.3
0919:  CALL   33D
091A:  BSF    0A.3
091B:  MOVF   78,W
091C:  MOVWF  42
091D:  SUBLW  04
091E:  BTFSC  03.0
091F:  GOTO   122
0920:  MOVLW  04
0921:  MOVWF  42
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigatePolishingMenu(); 
0922:  BCF    0A.3
0923:  GOTO   63F
0924:  BSF    0A.3
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
0925:  BSF    03.5
0926:  BSF    05.4
0927:  BCF    03.5
0928:  BTFSC  05.4
....................                                  break; 
0929:  GOTO   12E
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
092A:  MOVF   2D,W
092B:  SUBLW  37
092C:  BTFSS  03.2
092D:  GOTO   0F3
....................                  
....................                 } 
....................                  
....................               
....................              delay_ms(100); 
092E:  MOVLW  64
092F:  BSF    03.5
0930:  MOVWF  28
0931:  BCF    0A.3
0932:  BCF    03.5
0933:  CALL   0F9
0934:  BSF    0A.3
....................    
....................       }while(OPS_Status!=55); 
0935:  MOVF   2D,W
0936:  SUBLW  37
0937:  BTFSS  03.2
0938:  GOTO   072
....................        
....................        
....................        
....................       printf(lcd_putc,"\f"); 
0939:  MOVLW  0C
093A:  BSF    03.5
093B:  MOVWF  27
093C:  BCF    0A.3
093D:  BCF    03.5
093E:  CALL   1EE
093F:  BSF    0A.3
....................       lcd_gotoxy(2,1); 
0940:  MOVLW  02
0941:  BSF    03.5
0942:  MOVWF  28
0943:  MOVLW  01
0944:  MOVWF  29
0945:  BCF    0A.3
0946:  BCF    03.5
0947:  CALL   1DA
0948:  BSF    0A.3
....................       printf(lcd_putc,"CLOSING"); 
0949:  MOVLW  55
094A:  BSF    03.6
094B:  MOVWF  0D
094C:  MOVLW  00
094D:  MOVWF  0F
094E:  BCF    0A.3
094F:  BCF    03.6
0950:  CALL   228
0951:  BSF    0A.3
....................       delay_ms(1000); 
0952:  MOVLW  04
0953:  MOVWF  6F
0954:  MOVLW  FA
0955:  BSF    03.5
0956:  MOVWF  28
0957:  BCF    0A.3
0958:  BCF    03.5
0959:  CALL   0F9
095A:  BSF    0A.3
095B:  DECFSZ 6F,F
095C:  GOTO   154
....................       printf(lcd_putc,"\f");   
095D:  MOVLW  0C
095E:  BSF    03.5
095F:  MOVWF  27
0960:  BCF    0A.3
0961:  BCF    03.5
0962:  CALL   1EE
0963:  BSF    0A.3
....................       lcd_gotoxy(1,1); 
0964:  MOVLW  01
0965:  BSF    03.5
0966:  MOVWF  28
0967:  MOVWF  29
0968:  BCF    0A.3
0969:  BCF    03.5
096A:  CALL   1DA
096B:  BSF    0A.3
....................       printf(lcd_putc, "Kopuk:%ld", MikroClient[ClientNumber].time_Foaming); 
096C:  RLF    3F,W
096D:  MOVWF  77
096E:  RLF    77,F
096F:  RLF    77,F
0970:  MOVLW  F8
0971:  ANDWF  77,F
0972:  MOVF   77,W
0973:  ADDLW  2F
0974:  MOVWF  04
0975:  BCF    03.7
0976:  INCF   04,F
0977:  MOVF   00,W
0978:  MOVWF  70
0979:  DECF   04,F
097A:  MOVF   00,W
097B:  MOVWF  6F
097C:  MOVLW  59
097D:  BSF    03.6
097E:  MOVWF  0D
097F:  MOVLW  00
0980:  MOVWF  0F
0981:  BCF    03.0
0982:  MOVLW  06
0983:  MOVWF  71
0984:  BCF    0A.3
0985:  BCF    03.6
0986:  CALL   3F4
0987:  BSF    0A.3
0988:  MOVLW  10
0989:  MOVWF  04
098A:  MOVF   70,W
098B:  MOVWF  72
098C:  MOVF   6F,W
098D:  MOVWF  71
098E:  BCF    0A.3
098F:  CALL   463
0990:  BSF    0A.3
....................       lcd_gotoxy(1,2); 
0991:  MOVLW  01
0992:  BSF    03.5
0993:  MOVWF  28
0994:  MOVLW  02
0995:  MOVWF  29
0996:  BCF    0A.3
0997:  BCF    03.5
0998:  CALL   1DA
0999:  BSF    0A.3
....................       printf(lcd_putc, "Su::%ld",MikroClient[ClientNumber].time_Washing); 
099A:  RLF    3F,W
099B:  MOVWF  77
099C:  RLF    77,F
099D:  RLF    77,F
099E:  MOVLW  F8
099F:  ANDWF  77,F
09A0:  MOVF   77,W
09A1:  ADDLW  02
09A2:  ADDLW  2F
09A3:  MOVWF  04
09A4:  BCF    03.7
09A5:  INCF   04,F
09A6:  MOVF   00,W
09A7:  MOVWF  70
09A8:  DECF   04,F
09A9:  MOVF   00,W
09AA:  MOVWF  6F
09AB:  MOVLW  5E
09AC:  BSF    03.6
09AD:  MOVWF  0D
09AE:  MOVLW  00
09AF:  MOVWF  0F
09B0:  BCF    03.0
09B1:  MOVLW  04
09B2:  MOVWF  71
09B3:  BCF    0A.3
09B4:  BCF    03.6
09B5:  CALL   3F4
09B6:  BSF    0A.3
09B7:  MOVLW  10
09B8:  MOVWF  04
09B9:  MOVF   70,W
09BA:  MOVWF  72
09BB:  MOVF   6F,W
09BC:  MOVWF  71
09BD:  BCF    0A.3
09BE:  CALL   463
09BF:  BSF    0A.3
....................       delay_ms(2000); 
09C0:  MOVLW  08
09C1:  MOVWF  6F
09C2:  MOVLW  FA
09C3:  BSF    03.5
09C4:  MOVWF  28
09C5:  BCF    0A.3
09C6:  BCF    03.5
09C7:  CALL   0F9
09C8:  BSF    0A.3
09C9:  DECFSZ 6F,F
09CA:  GOTO   1C2
....................       printf(lcd_putc,"\f");   
09CB:  MOVLW  0C
09CC:  BSF    03.5
09CD:  MOVWF  27
09CE:  BCF    0A.3
09CF:  BCF    03.5
09D0:  CALL   1EE
09D1:  BSF    0A.3
....................       lcd_gotoxy(1,1); 
09D2:  MOVLW  01
09D3:  BSF    03.5
09D4:  MOVWF  28
09D5:  MOVWF  29
09D6:  BCF    0A.3
09D7:  BCF    03.5
09D8:  CALL   1DA
09D9:  BSF    0A.3
....................       printf(lcd_putc, "Hava:%ld", MikroClient[ClientNumber].time_Ventilation); 
09DA:  RLF    3F,W
09DB:  MOVWF  77
09DC:  RLF    77,F
09DD:  RLF    77,F
09DE:  MOVLW  F8
09DF:  ANDWF  77,F
09E0:  MOVF   77,W
09E1:  ADDLW  04
09E2:  ADDLW  2F
09E3:  MOVWF  04
09E4:  BCF    03.7
09E5:  INCF   04,F
09E6:  MOVF   00,W
09E7:  MOVWF  70
09E8:  DECF   04,F
09E9:  MOVF   00,W
09EA:  MOVWF  6F
09EB:  MOVLW  62
09EC:  BSF    03.6
09ED:  MOVWF  0D
09EE:  MOVLW  00
09EF:  MOVWF  0F
09F0:  BCF    03.0
09F1:  MOVLW  05
09F2:  MOVWF  71
09F3:  BCF    0A.3
09F4:  BCF    03.6
09F5:  CALL   3F4
09F6:  BSF    0A.3
09F7:  MOVLW  10
09F8:  MOVWF  04
09F9:  MOVF   70,W
09FA:  MOVWF  72
09FB:  MOVF   6F,W
09FC:  MOVWF  71
09FD:  BCF    0A.3
09FE:  CALL   463
09FF:  BSF    0A.3
....................       lcd_gotoxy(1,2); 
0A00:  MOVLW  01
0A01:  BSF    03.5
0A02:  MOVWF  28
0A03:  MOVLW  02
0A04:  MOVWF  29
0A05:  BCF    0A.3
0A06:  BCF    03.5
0A07:  CALL   1DA
0A08:  BSF    0A.3
....................        printf(lcd_putc, "Cila:%ld", MikroClient[ClientNumber].mililitre_Polishing); 
0A09:  RLF    3F,W
0A0A:  MOVWF  77
0A0B:  RLF    77,F
0A0C:  RLF    77,F
0A0D:  MOVLW  F8
0A0E:  ANDWF  77,F
0A0F:  MOVF   77,W
0A10:  ADDLW  06
0A11:  ADDLW  2F
0A12:  MOVWF  04
0A13:  BCF    03.7
0A14:  INCF   04,F
0A15:  MOVF   00,W
0A16:  MOVWF  70
0A17:  DECF   04,F
0A18:  MOVF   00,W
0A19:  MOVWF  6F
0A1A:  MOVLW  67
0A1B:  BSF    03.6
0A1C:  MOVWF  0D
0A1D:  MOVLW  00
0A1E:  MOVWF  0F
0A1F:  BCF    03.0
0A20:  MOVLW  05
0A21:  MOVWF  71
0A22:  BCF    0A.3
0A23:  BCF    03.6
0A24:  CALL   3F4
0A25:  BSF    0A.3
0A26:  MOVLW  10
0A27:  MOVWF  04
0A28:  MOVF   70,W
0A29:  MOVWF  72
0A2A:  MOVF   6F,W
0A2B:  MOVWF  71
0A2C:  BCF    0A.3
0A2D:  CALL   463
0A2E:  BSF    0A.3
....................       delay_ms(2000); 
0A2F:  MOVLW  08
0A30:  MOVWF  6F
0A31:  MOVLW  FA
0A32:  BSF    03.5
0A33:  MOVWF  28
0A34:  BCF    0A.3
0A35:  BCF    03.5
0A36:  CALL   0F9
0A37:  BSF    0A.3
0A38:  DECFSZ 6F,F
0A39:  GOTO   231
....................        
....................     while(1) 
....................     { 
0A3A:  GOTO   23A
....................      
....................     
....................     
....................     } 
....................   
....................   
.................... } 
....................  
0A3B:  SLEEP
....................  
.................... /* ======== -BEGIN- SYSTEM CONFIGURATION FUNCTIONS -BEGIN- ======== */ 
.................... //Function-1 
.................... void SubSystem_Init(void){ 
....................  lcd_init(); 
....................  trisSetting_Init(); 
....................  interruptSetting_Init(); 
....................  adcSetting_Init(); 
*
01D7:  BSF    0A.3
01D8:  BCF    0A.4
01D9:  GOTO   058 (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void trisSetting_Init(){ 
....................    set_tris_b(0x01); 
*
01B7:  MOVLW  01
01B8:  BSF    03.5
01B9:  MOVWF  06
.................... } 
....................  
.................... //Function-3 
.................... void interruptSetting_Init(){ 
....................      //-CONFIG--> OPERATION CANCEL BUTTON  
....................        ext_int_edge(L_TO_H); //Harici kesme Lojik 0'dan 1'e geçerken 
01BA:  BSF    01.6
....................        enable_interrupts(INT_EXT); //Harici kesme aktif 
01BB:  BCF    03.5
01BC:  BSF    0B.4
....................        enable_interrupts(GLOBAL); //Aktif kesmeler için genel kesme yetkisi ver 
01BD:  MOVLW  C0
01BE:  IORWF  0B,F
....................      //-CONFIG--> TIMER0  
.................... } 
....................  
.................... //Function-4 
.................... void adcSetting_Init(){ 
....................      //-CONFIG--> Surfing Potentiometer 
....................         setup_adc_ports(sAN0|sAN1); 
01BF:  BSF    03.5
01C0:  BSF    03.6
01C1:  MOVF   09,W
01C2:  ANDLW  C0
01C3:  MOVWF  09
01C4:  BCF    03.6
01C5:  BCF    1F.4
01C6:  BCF    1F.5
01C7:  MOVLW  03
01C8:  BSF    03.6
01C9:  MOVWF  08
....................         setup_adc(adc_clock_div_32); 
01CA:  BCF    03.5
01CB:  BCF    03.6
01CC:  BCF    1F.6
01CD:  BSF    1F.7
01CE:  BSF    03.5
01CF:  BSF    1F.7
01D0:  BCF    03.5
01D1:  BSF    1F.0
....................         delay_us(200); 
01D2:  MOVLW  42
01D3:  MOVWF  77
01D4:  DECFSZ 77,F
01D5:  GOTO   1D4
01D6:  NOP
....................          
....................      //-CONFIG--> Timer Potentiometer 
....................      //-CONFIG--> Process Intensity Potentiometer 
.................... } 
....................  
.................... /* ======== -END- SYSTEM CONFIGURATION FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- LCD SCREEN FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief :It sequentially displays a welcome message and  
....................  *        prompts the user to present their ID card. 
....................  */ 
.................... void SubSystem_lcd_IdleStatus(void){ 
....................       printf(lcd_putc,"\f"); 
*
027D:  MOVLW  0C
027E:  BSF    03.5
027F:  MOVWF  27
0280:  BCF    03.5
0281:  CALL   1EE
....................       lcd_gotoxy(4,1); 
0282:  MOVLW  04
0283:  BSF    03.5
0284:  MOVWF  28
0285:  MOVLW  01
0286:  MOVWF  29
0287:  BCF    03.5
0288:  CALL   1DA
....................       printf(lcd_putc,"Mikroleum'a"); 
0289:  MOVLW  6C
028A:  BSF    03.6
028B:  MOVWF  0D
028C:  MOVLW  00
028D:  MOVWF  0F
028E:  BCF    03.6
028F:  CALL   228
....................       lcd_gotoxy(4,2); 
0290:  MOVLW  04
0291:  BSF    03.5
0292:  MOVWF  28
0293:  MOVLW  02
0294:  MOVWF  29
0295:  BCF    03.5
0296:  CALL   1DA
....................       printf(lcd_putc,"Hosgeldiniz"); 
0297:  MOVLW  72
0298:  BSF    03.6
0299:  MOVWF  0D
029A:  MOVLW  00
029B:  MOVWF  0F
029C:  BCF    03.6
029D:  CALL   228
....................       delay_ms(500); 
029E:  MOVLW  02
029F:  MOVWF  6F
02A0:  MOVLW  FA
02A1:  BSF    03.5
02A2:  MOVWF  28
02A3:  BCF    03.5
02A4:  CALL   0F9
02A5:  DECFSZ 6F,F
02A6:  GOTO   2A0
....................       printf(lcd_putc,"\f"); 
02A7:  MOVLW  0C
02A8:  BSF    03.5
02A9:  MOVWF  27
02AA:  BCF    03.5
02AB:  CALL   1EE
....................        
....................       lcd_gotoxy(1,1); 
02AC:  MOVLW  01
02AD:  BSF    03.5
02AE:  MOVWF  28
02AF:  MOVWF  29
02B0:  BCF    03.5
02B1:  CALL   1DA
....................       printf(lcd_putc,"Lutfen ID Karti"); 
02B2:  MOVLW  78
02B3:  BSF    03.6
02B4:  MOVWF  0D
02B5:  MOVLW  00
02B6:  MOVWF  0F
02B7:  BCF    03.6
02B8:  CALL   228
....................       lcd_gotoxy(4,2); 
02B9:  MOVLW  04
02BA:  BSF    03.5
02BB:  MOVWF  28
02BC:  MOVLW  02
02BD:  MOVWF  29
02BE:  BCF    03.5
02BF:  CALL   1DA
....................       printf(lcd_putc,"Gosteriniz"); 
02C0:  MOVLW  80
02C1:  BSF    03.6
02C2:  MOVWF  0D
02C3:  MOVLW  00
02C4:  MOVWF  0F
02C5:  BCF    03.6
02C6:  CALL   228
....................       delay_ms(500); 
02C7:  MOVLW  02
02C8:  MOVWF  6F
02C9:  MOVLW  FA
02CA:  BSF    03.5
02CB:  MOVWF  28
02CC:  BCF    03.5
02CD:  CALL   0F9
02CE:  DECFSZ 6F,F
02CF:  GOTO   2C9
....................       printf(lcd_putc,"\f"); 
02D0:  MOVLW  0C
02D1:  BSF    03.5
02D2:  MOVWF  27
02D3:  BCF    03.5
02D4:  CALL   1EE
02D5:  BSF    0A.3
02D6:  BCF    0A.4
02D7:  GOTO   05B (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void NavigateOperationMenu(void){ 
....................    printf(lcd_putc, "\f"); // LCD'yi temizle 
*
0362:  MOVLW  0C
0363:  BSF    03.5
0364:  MOVWF  27
0365:  BCF    03.5
0366:  CALL   1EE
....................  
....................     // 1. Seçenek 
....................     if (Index_OptionMenu == 0) { 
0367:  MOVF   40,F
0368:  BTFSS  03.2
0369:  GOTO   385
....................         lcd_gotoxy(1, 1); 
036A:  MOVLW  01
036B:  BSF    03.5
036C:  MOVWF  28
036D:  MOVWF  29
036E:  BCF    03.5
036F:  CALL   1DA
....................         printf(lcd_putc, "1-Kopuk Islem <-"); 
0370:  MOVLW  86
0371:  BSF    03.6
0372:  MOVWF  0D
0373:  MOVLW  00
0374:  MOVWF  0F
0375:  BCF    03.6
0376:  CALL   228
....................         lcd_gotoxy(1, 2); 
0377:  MOVLW  01
0378:  BSF    03.5
0379:  MOVWF  28
037A:  MOVLW  02
037B:  MOVWF  29
037C:  BCF    03.5
037D:  CALL   1DA
....................         printf(lcd_putc, "2-Su Islem");    
037E:  MOVLW  8F
037F:  BSF    03.6
0380:  MOVWF  0D
0381:  MOVLW  00
0382:  MOVWF  0F
0383:  BCF    03.6
0384:  CALL   228
....................     }  
....................  
....................     // 2. Seçenek 
....................     if (Index_OptionMenu == 1) { 
0385:  DECFSZ 40,W
0386:  GOTO   3A2
....................         lcd_gotoxy(1, 1); 
0387:  MOVLW  01
0388:  BSF    03.5
0389:  MOVWF  28
038A:  MOVWF  29
038B:  BCF    03.5
038C:  CALL   1DA
....................         printf(lcd_putc, "2-Su Islem <-"); 
038D:  MOVLW  95
038E:  BSF    03.6
038F:  MOVWF  0D
0390:  MOVLW  00
0391:  MOVWF  0F
0392:  BCF    03.6
0393:  CALL   228
....................         lcd_gotoxy(1, 2); 
0394:  MOVLW  01
0395:  BSF    03.5
0396:  MOVWF  28
0397:  MOVLW  02
0398:  MOVWF  29
0399:  BCF    03.5
039A:  CALL   1DA
....................         printf(lcd_putc, "3-Hava Islem");        
039B:  MOVLW  9C
039C:  BSF    03.6
039D:  MOVWF  0D
039E:  MOVLW  00
039F:  MOVWF  0F
03A0:  BCF    03.6
03A1:  CALL   228
....................     } 
....................      
....................     // 3. Seçenek 
....................         if (Index_OptionMenu == 2) { 
03A2:  MOVF   40,W
03A3:  SUBLW  02
03A4:  BTFSS  03.2
03A5:  GOTO   3C1
....................         lcd_gotoxy(1, 1); 
03A6:  MOVLW  01
03A7:  BSF    03.5
03A8:  MOVWF  28
03A9:  MOVWF  29
03AA:  BCF    03.5
03AB:  CALL   1DA
....................         printf(lcd_putc, "3-Hava Islem <-"); 
03AC:  MOVLW  A3
03AD:  BSF    03.6
03AE:  MOVWF  0D
03AF:  MOVLW  00
03B0:  MOVWF  0F
03B1:  BCF    03.6
03B2:  CALL   228
....................         lcd_gotoxy(1, 2); 
03B3:  MOVLW  01
03B4:  BSF    03.5
03B5:  MOVWF  28
03B6:  MOVLW  02
03B7:  MOVWF  29
03B8:  BCF    03.5
03B9:  CALL   1DA
....................         printf(lcd_putc, "4-Cila Islem");    
03BA:  MOVLW  AB
03BB:  BSF    03.6
03BC:  MOVWF  0D
03BD:  MOVLW  00
03BE:  MOVWF  0F
03BF:  BCF    03.6
03C0:  CALL   228
....................     }  
....................  
....................     // 4. Seçenek 
....................     if (Index_OptionMenu == 3) { 
03C1:  MOVF   40,W
03C2:  SUBLW  03
03C3:  BTFSS  03.2
03C4:  GOTO   3E0
....................         lcd_gotoxy(1, 1); 
03C5:  MOVLW  01
03C6:  BSF    03.5
03C7:  MOVWF  28
03C8:  MOVWF  29
03C9:  BCF    03.5
03CA:  CALL   1DA
....................         printf(lcd_putc, "4-Cila Islem <-"); 
03CB:  MOVLW  B2
03CC:  BSF    03.6
03CD:  MOVWF  0D
03CE:  MOVLW  00
03CF:  MOVWF  0F
03D0:  BCF    03.6
03D1:  CALL   228
....................         lcd_gotoxy(1, 2); 
03D2:  MOVLW  01
03D3:  BSF    03.5
03D4:  MOVWF  28
03D5:  MOVLW  02
03D6:  MOVWF  29
03D7:  BCF    03.5
03D8:  CALL   1DA
....................         printf(lcd_putc, "5-Kayit Islem");     
03D9:  MOVLW  BA
03DA:  BSF    03.6
03DB:  MOVWF  0D
03DC:  MOVLW  00
03DD:  MOVWF  0F
03DE:  BCF    03.6
03DF:  CALL   228
....................     } 
....................      
....................     // 5. Seçenek 
....................     if (Index_OptionMenu == 4) { 
03E0:  MOVF   40,W
03E1:  SUBLW  04
03E2:  BTFSS  03.2
03E3:  GOTO   3F1
....................         lcd_gotoxy(1, 1); 
03E4:  MOVLW  01
03E5:  BSF    03.5
03E6:  MOVWF  28
03E7:  MOVWF  29
03E8:  BCF    03.5
03E9:  CALL   1DA
....................         printf(lcd_putc, "5-Kayit Islem <-");  
03EA:  MOVLW  C1
03EB:  BSF    03.6
03EC:  MOVWF  0D
03ED:  MOVLW  00
03EE:  MOVWF  0F
03EF:  BCF    03.6
03F0:  CALL   228
....................     } 
03F1:  BSF    0A.3
03F2:  BCF    0A.4
03F3:  GOTO   0A3 (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Function-3 
.................... void NavigateTimeMoneyPreferenceMenu(void){ 
....................     
....................    printf(lcd_putc, "\f");  
*
04E7:  MOVLW  0C
04E8:  BSF    03.5
04E9:  MOVWF  27
04EA:  BCF    03.5
04EB:  CALL   1EE
....................    lcd_gotoxy(1,1); 
04EC:  MOVLW  01
04ED:  BSF    03.5
04EE:  MOVWF  28
04EF:  MOVWF  29
04F0:  BCF    03.5
04F1:  CALL   1DA
....................    printf(lcd_putc, "Ucret:%d tl",Index_TimeMoneyPreference*2+2); 
04F2:  BCF    03.0
04F3:  RLF    41,W
04F4:  ADDLW  02
04F5:  MOVWF  6F
04F6:  MOVLW  CA
04F7:  BSF    03.6
04F8:  MOVWF  0D
04F9:  MOVLW  00
04FA:  MOVWF  0F
04FB:  BCF    03.0
04FC:  MOVLW  06
04FD:  MOVWF  71
04FE:  BCF    03.6
04FF:  CALL   3F4
0500:  MOVF   6F,W
0501:  MOVWF  70
0502:  MOVLW  18
0503:  MOVWF  71
*
0562:  MOVLW  20
0563:  BSF    03.5
0564:  MOVWF  27
0565:  BCF    03.5
0566:  CALL   1EE
0567:  MOVLW  74
0568:  BSF    03.5
0569:  MOVWF  27
056A:  BCF    03.5
056B:  CALL   1EE
056C:  MOVLW  6C
056D:  BSF    03.5
056E:  MOVWF  27
056F:  BCF    03.5
0570:  CALL   1EE
....................    lcd_gotoxy(1,2); 
0571:  MOVLW  01
0572:  BSF    03.5
0573:  MOVWF  28
0574:  MOVLW  02
0575:  MOVWF  29
0576:  BCF    03.5
0577:  CALL   1DA
....................    printf(lcd_putc, "Sure:%ld",time_arr[Index_TimeMoneyPreference]); 
0578:  BCF    03.0
0579:  RLF    41,W
057A:  ADDLW  49
057B:  MOVWF  04
057C:  BCF    03.7
057D:  INCF   04,F
057E:  MOVF   00,W
057F:  MOVWF  70
0580:  DECF   04,F
0581:  MOVF   00,W
0582:  MOVWF  6F
0583:  MOVLW  D0
0584:  BSF    03.6
0585:  MOVWF  0D
0586:  MOVLW  00
0587:  MOVWF  0F
0588:  BCF    03.0
0589:  MOVLW  05
058A:  MOVWF  71
058B:  BCF    03.6
058C:  CALL   3F4
058D:  MOVLW  10
058E:  MOVWF  04
058F:  MOVF   70,W
0590:  MOVWF  72
0591:  MOVF   6F,W
0592:  MOVWF  71
0593:  CALL   463
....................    lcd_gotoxy(10,2); 
0594:  MOVLW  0A
0595:  BSF    03.5
0596:  MOVWF  28
0597:  MOVLW  02
0598:  MOVWF  29
0599:  BCF    03.5
059A:  CALL   1DA
....................    printf(lcd_putc, "Sec:"); 
059B:  MOVLW  D5
059C:  BSF    03.6
059D:  MOVWF  0D
059E:  MOVLW  00
059F:  MOVWF  0F
05A0:  BCF    03.6
05A1:  CALL   228
....................    lcd_gotoxy(14,2); 
05A2:  MOVLW  0E
05A3:  BSF    03.5
05A4:  MOVWF  28
05A5:  MOVLW  02
05A6:  MOVWF  29
05A7:  BCF    03.5
05A8:  CALL   1DA
....................    printf(lcd_putc, "%c",SelectionState); 
05A9:  MOVF   2E,W
05AA:  BSF    03.5
05AB:  MOVWF  27
05AC:  BCF    03.5
05AD:  CALL   1EE
....................     
....................     
....................    if(input(button_Select) == 1){ 
05AE:  BSF    03.5
05AF:  BSF    05.5
05B0:  BCF    03.5
05B1:  BTFSS  05.5
05B2:  GOTO   62E
....................       SelectionState = 'X'; 
05B3:  MOVLW  58
05B4:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 0){ 
05B5:  MOVF   40,F
05B6:  BTFSS  03.2
05B7:  GOTO   5DD
....................          MikroClient[ClientNumber].time_Foaming = time_arr[Index_TimeMoneyPreference]; 
05B8:  RLF    3F,W
05B9:  MOVWF  77
05BA:  RLF    77,F
05BB:  RLF    77,F
05BC:  MOVLW  F8
05BD:  ANDWF  77,F
05BE:  MOVF   77,W
05BF:  ADDLW  2F
05C0:  MOVWF  78
05C1:  CLRF   7A
05C2:  BTFSC  03.0
05C3:  INCF   7A,F
05C4:  MOVF   7A,W
05C5:  MOVWF  70
05C6:  BCF    03.0
05C7:  RLF    41,W
05C8:  ADDLW  49
05C9:  MOVWF  04
05CA:  BCF    03.7
05CB:  INCF   04,F
05CC:  MOVF   00,W
05CD:  MOVWF  7A
05CE:  DECF   04,F
05CF:  MOVF   00,W
05D0:  MOVWF  71
05D1:  MOVF   78,W
05D2:  MOVWF  04
05D3:  BCF    03.7
05D4:  BTFSC  70.0
05D5:  BSF    03.7
05D6:  INCF   04,F
05D7:  MOVF   7A,W
05D8:  MOVWF  00
05D9:  DECF   04,F
05DA:  MOVF   71,W
05DB:  MOVWF  00
....................       } 
05DC:  GOTO   62E
....................       else if(Index_OptionMenu == 1){ 
05DD:  DECFSZ 40,W
05DE:  GOTO   605
....................          MikroClient[ClientNumber].time_Washing = time_arr[Index_TimeMoneyPreference]; 
05DF:  RLF    3F,W
05E0:  MOVWF  77
05E1:  RLF    77,F
05E2:  RLF    77,F
05E3:  MOVLW  F8
05E4:  ANDWF  77,F
05E5:  MOVF   77,W
05E6:  ADDLW  02
05E7:  ADDLW  2F
05E8:  MOVWF  78
05E9:  CLRF   7A
05EA:  BTFSC  03.0
05EB:  INCF   7A,F
05EC:  MOVF   7A,W
05ED:  MOVWF  70
05EE:  BCF    03.0
05EF:  RLF    41,W
05F0:  ADDLW  49
05F1:  MOVWF  04
05F2:  BCF    03.7
05F3:  INCF   04,F
05F4:  MOVF   00,W
05F5:  MOVWF  7A
05F6:  DECF   04,F
05F7:  MOVF   00,W
05F8:  MOVWF  71
05F9:  MOVF   78,W
05FA:  MOVWF  04
05FB:  BCF    03.7
05FC:  BTFSC  70.0
05FD:  BSF    03.7
05FE:  INCF   04,F
05FF:  MOVF   7A,W
0600:  MOVWF  00
0601:  DECF   04,F
0602:  MOVF   71,W
0603:  MOVWF  00
....................       } 
0604:  GOTO   62E
....................       else if(Index_OptionMenu == 2){ 
0605:  MOVF   40,W
0606:  SUBLW  02
0607:  BTFSS  03.2
0608:  GOTO   62E
....................          MikroClient[ClientNumber].time_Ventilation = time_arr[Index_TimeMoneyPreference]; 
0609:  RLF    3F,W
060A:  MOVWF  77
060B:  RLF    77,F
060C:  RLF    77,F
060D:  MOVLW  F8
060E:  ANDWF  77,F
060F:  MOVF   77,W
0610:  ADDLW  04
0611:  ADDLW  2F
0612:  MOVWF  78
0613:  CLRF   7A
0614:  BTFSC  03.0
0615:  INCF   7A,F
0616:  MOVF   7A,W
0617:  MOVWF  70
0618:  BCF    03.0
0619:  RLF    41,W
061A:  ADDLW  49
061B:  MOVWF  04
061C:  BCF    03.7
061D:  INCF   04,F
061E:  MOVF   00,W
061F:  MOVWF  7A
0620:  DECF   04,F
0621:  MOVF   00,W
0622:  MOVWF  71
0623:  MOVF   78,W
0624:  MOVWF  04
0625:  BCF    03.7
0626:  BTFSC  70.0
0627:  BSF    03.7
0628:  INCF   04,F
0629:  MOVF   7A,W
062A:  MOVWF  00
062B:  DECF   04,F
062C:  MOVF   71,W
062D:  MOVWF  00
....................       } 
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
062E:  BSF    6D.0
062F:  MOVF   6D,W
0630:  BSF    03.5
0631:  MOVWF  07
0632:  BCF    03.5
0633:  BTFSS  07.0
0634:  GOTO   637
....................       SelectionState = ' '; 
0635:  MOVLW  20
0636:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
0637:  MOVLW  50
0638:  BSF    03.5
0639:  MOVWF  28
063A:  BCF    03.5
063B:  CALL   0F9
063C:  BSF    0A.3
063D:  BCF    0A.4
063E:  GOTO   0E0 (RETURN)
.................... } 
....................  
.................... //Function-4 
.................... void NavigatePolishingMenu(){ 
....................    printf(lcd_putc, "\f");  
063F:  MOVLW  0C
0640:  BSF    03.5
0641:  MOVWF  27
0642:  BCF    03.5
0643:  CALL   1EE
....................    lcd_gotoxy(1,1); 
0644:  MOVLW  01
0645:  BSF    03.5
0646:  MOVWF  28
0647:  MOVWF  29
0648:  BCF    03.5
0649:  CALL   1DA
....................    printf(lcd_putc, "Ucret:%ld tl",(35*mililitrePolish[Index_PolishMililitre])); 
064A:  BCF    03.0
064B:  RLF    42,W
064C:  ADDLW  61
064D:  MOVWF  04
064E:  BCF    03.7
064F:  INCF   04,F
0650:  MOVF   00,W
0651:  MOVWF  7A
0652:  DECF   04,F
0653:  MOVF   00,W
0654:  MOVWF  6F
0655:  MOVF   7A,W
0656:  MOVWF  70
0657:  CLRF   74
0658:  MOVLW  23
0659:  MOVWF  73
065A:  MOVF   7A,W
065B:  MOVWF  76
065C:  MOVF   6F,W
065D:  MOVWF  75
065E:  CALL   328
065F:  MOVF   79,W
0660:  MOVWF  70
0661:  MOVF   78,W
0662:  MOVWF  6F
0663:  MOVLW  D8
0664:  BSF    03.6
0665:  MOVWF  0D
0666:  MOVLW  00
0667:  MOVWF  0F
0668:  BCF    03.0
0669:  MOVLW  06
066A:  MOVWF  71
066B:  BCF    03.6
066C:  CALL   3F4
066D:  MOVLW  10
066E:  MOVWF  04
066F:  MOVF   70,W
0670:  MOVWF  72
0671:  MOVF   6F,W
0672:  MOVWF  71
0673:  CALL   463
0674:  MOVLW  20
0675:  BSF    03.5
0676:  MOVWF  27
0677:  BCF    03.5
0678:  CALL   1EE
0679:  MOVLW  74
067A:  BSF    03.5
067B:  MOVWF  27
067C:  BCF    03.5
067D:  CALL   1EE
067E:  MOVLW  6C
067F:  BSF    03.5
0680:  MOVWF  27
0681:  BCF    03.5
0682:  CALL   1EE
....................    lcd_gotoxy(1,2); 
0683:  MOVLW  01
0684:  BSF    03.5
0685:  MOVWF  28
0686:  MOVLW  02
0687:  MOVWF  29
0688:  BCF    03.5
0689:  CALL   1DA
....................    printf(lcd_putc, "Ml:%ld",(unsigned long int)(100*mililitrePolish[Index_PolishMililitre])); 
068A:  BCF    03.0
068B:  RLF    42,W
068C:  ADDLW  61
068D:  MOVWF  04
068E:  BCF    03.7
068F:  INCF   04,F
0690:  MOVF   00,W
0691:  MOVWF  7A
0692:  DECF   04,F
0693:  MOVF   00,W
0694:  MOVWF  6F
0695:  MOVF   7A,W
0696:  MOVWF  70
0697:  CLRF   74
0698:  MOVLW  64
0699:  MOVWF  73
069A:  MOVF   7A,W
069B:  MOVWF  76
069C:  MOVF   6F,W
069D:  MOVWF  75
069E:  CALL   328
069F:  MOVF   79,W
06A0:  MOVWF  70
06A1:  MOVF   78,W
06A2:  MOVWF  6F
06A3:  MOVLW  4D
06A4:  BSF    03.5
06A5:  MOVWF  27
06A6:  BCF    03.5
06A7:  CALL   1EE
06A8:  MOVLW  6C
06A9:  BSF    03.5
06AA:  MOVWF  27
06AB:  BCF    03.5
06AC:  CALL   1EE
06AD:  MOVLW  3A
06AE:  BSF    03.5
06AF:  MOVWF  27
06B0:  BCF    03.5
06B1:  CALL   1EE
06B2:  MOVLW  10
06B3:  MOVWF  04
06B4:  MOVF   70,W
06B5:  MOVWF  72
06B6:  MOVF   6F,W
06B7:  MOVWF  71
06B8:  CALL   463
....................    lcd_gotoxy(10,2); 
06B9:  MOVLW  0A
06BA:  BSF    03.5
06BB:  MOVWF  28
06BC:  MOVLW  02
06BD:  MOVWF  29
06BE:  BCF    03.5
06BF:  CALL   1DA
....................    printf(lcd_putc, "Sec:"); 
06C0:  MOVLW  DF
06C1:  BSF    03.6
06C2:  MOVWF  0D
06C3:  MOVLW  00
06C4:  MOVWF  0F
06C5:  BCF    03.6
06C6:  CALL   228
....................    lcd_gotoxy(14,2); 
06C7:  MOVLW  0E
06C8:  BSF    03.5
06C9:  MOVWF  28
06CA:  MOVLW  02
06CB:  MOVWF  29
06CC:  BCF    03.5
06CD:  CALL   1DA
....................    printf(lcd_putc, "%c",SelectionState); 
06CE:  MOVF   2E,W
06CF:  BSF    03.5
06D0:  MOVWF  27
06D1:  BCF    03.5
06D2:  CALL   1EE
....................     
....................     
....................    if(input(button_Select) == 1){ 
06D3:  BSF    03.5
06D4:  BSF    05.5
06D5:  BCF    03.5
06D6:  BTFSS  05.5
06D7:  GOTO   70F
....................       SelectionState = 'X'; 
06D8:  MOVLW  58
06D9:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 3){ 
06DA:  MOVF   40,W
06DB:  SUBLW  03
06DC:  BTFSS  03.2
06DD:  GOTO   70F
....................          MikroClient[ClientNumber].mililitre_Polishing = (100*mililitrePolish[Index_PolishMililitre]);  
06DE:  RLF    3F,W
06DF:  MOVWF  77
06E0:  RLF    77,F
06E1:  RLF    77,F
06E2:  MOVLW  F8
06E3:  ANDWF  77,F
06E4:  MOVF   77,W
06E5:  ADDLW  06
06E6:  ADDLW  2F
06E7:  MOVWF  78
06E8:  CLRF   7A
06E9:  BTFSC  03.0
06EA:  INCF   7A,F
06EB:  MOVF   78,W
06EC:  MOVWF  6F
06ED:  MOVF   7A,W
06EE:  MOVWF  70
06EF:  BCF    03.0
06F0:  RLF    42,W
06F1:  ADDLW  61
06F2:  MOVWF  04
06F3:  BCF    03.7
06F4:  INCF   04,F
06F5:  MOVF   00,W
06F6:  MOVWF  7A
06F7:  DECF   04,F
06F8:  MOVF   00,W
06F9:  MOVWF  71
06FA:  MOVF   7A,W
06FB:  MOVWF  72
06FC:  CLRF   74
06FD:  MOVLW  64
06FE:  MOVWF  73
06FF:  MOVF   7A,W
0700:  MOVWF  76
0701:  MOVF   71,W
0702:  MOVWF  75
0703:  CALL   328
0704:  MOVF   6F,W
0705:  MOVWF  04
0706:  BCF    03.7
0707:  BTFSC  70.0
0708:  BSF    03.7
0709:  INCF   04,F
070A:  MOVF   79,W
070B:  MOVWF  00
070C:  DECF   04,F
070D:  MOVF   78,W
070E:  MOVWF  00
....................       } 
....................        
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
070F:  BSF    6D.0
0710:  MOVF   6D,W
0711:  BSF    03.5
0712:  MOVWF  07
0713:  BCF    03.5
0714:  BTFSS  07.0
0715:  GOTO   718
....................       SelectionState = ' '; 
0716:  MOVLW  20
0717:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
0718:  MOVLW  50
0719:  BSF    03.5
071A:  MOVWF  28
071B:  BCF    03.5
071C:  CALL   0F9
071D:  BSF    0A.3
071E:  BCF    0A.4
071F:  GOTO   124 (RETURN)
.................... } 
.................... /* ======== -END- LCD SCREEN FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- UART PROTOCOL FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief : This function checks the `readed_ID` variable to determine  
....................  *         the action to take based on predefined identifiers. Depending on the identifier, 
....................  *         it displays a welcome message for specific users or sets the system to an idle state. 
....................  */ 
.................... void SubSystem_uart_CheckTheMessage(void){ 
....................     
....................    if(readed_ID == '+'){      //Mr. Selçuk's ID 
*
02D8:  MOVF   2B,W
02D9:  SUBLW  2B
02DA:  BTFSS  03.2
02DB:  GOTO   2FC
....................       ClientNumber = 0;       //System works for Mr. Selcuk 
02DC:  CLRF   3F
....................       lcd_gotoxy(4,1); 
02DD:  MOVLW  04
02DE:  BSF    03.5
02DF:  MOVWF  28
02E0:  MOVLW  01
02E1:  MOVWF  29
02E2:  BCF    03.5
02E3:  CALL   1DA
....................       printf(lcd_putc,"Hosgeldiniz"); 
02E4:  MOVLW  E2
02E5:  BSF    03.6
02E6:  MOVWF  0D
02E7:  MOVLW  00
02E8:  MOVWF  0F
02E9:  BCF    03.6
02EA:  CALL   228
....................       lcd_gotoxy(4,2); 
02EB:  MOVLW  04
02EC:  BSF    03.5
02ED:  MOVWF  28
02EE:  MOVLW  02
02EF:  MOVWF  29
02F0:  BCF    03.5
02F1:  CALL   1DA
....................       printf(lcd_putc,"Selcuk Bey"); 
02F2:  MOVLW  E8
02F3:  BSF    03.6
02F4:  MOVWF  0D
02F5:  MOVLW  00
02F6:  MOVWF  0F
02F7:  BCF    03.6
02F8:  CALL   228
....................       systemLock = 1; 
02F9:  MOVLW  01
02FA:  MOVWF  2C
....................    } 
02FB:  GOTO   325
....................    else if(readed_ID == '*'){ //Mr. Emre's ID 
02FC:  MOVF   2B,W
02FD:  SUBLW  2A
02FE:  BTFSS  03.2
02FF:  GOTO   321
....................       ClientNumber = 1;       //System works for Mr. Emre 
0300:  MOVLW  01
0301:  MOVWF  3F
....................       lcd_gotoxy(4,1); 
0302:  MOVLW  04
0303:  BSF    03.5
0304:  MOVWF  28
0305:  MOVLW  01
0306:  MOVWF  29
0307:  BCF    03.5
0308:  CALL   1DA
....................       printf(lcd_putc,"Hosgeldiniz"); 
0309:  MOVLW  EE
030A:  BSF    03.6
030B:  MOVWF  0D
030C:  MOVLW  00
030D:  MOVWF  0F
030E:  BCF    03.6
030F:  CALL   228
....................       lcd_gotoxy(4,2); 
0310:  MOVLW  04
0311:  BSF    03.5
0312:  MOVWF  28
0313:  MOVLW  02
0314:  MOVWF  29
0315:  BCF    03.5
0316:  CALL   1DA
....................       printf(lcd_putc,"Emre Bey"); 
0317:  MOVLW  F4
0318:  BSF    03.6
0319:  MOVWF  0D
031A:  MOVLW  00
031B:  MOVWF  0F
031C:  BCF    03.6
031D:  CALL   228
....................       systemLock = 1; 
031E:  MOVLW  01
031F:  MOVWF  2C
....................    } 
0320:  GOTO   325
....................    else if(readed_ID == '.'){ //Slave pic is idle status 
0321:  MOVF   2B,W
0322:  SUBLW  2E
0323:  BTFSC  03.2
....................        systemLock = 0; 
0324:  CLRF   2C
....................    } 
0325:  BSF    0A.3
0326:  BCF    0A.4
0327:  GOTO   064 (RETURN)
....................  
.................... } 
.................... /* ======== -END- UART PROTOCOL FUNCTIONS -END- ======== */ 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
