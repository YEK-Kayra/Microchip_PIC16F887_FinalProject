CCS PCM C Compiler, Version 5.049, 5967               23-Ara-24 00:36

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Final_CCS_Code_ForMaster\main.lst

               ROM used:   1015 words (12%)
                           Largest free fragment is 2048
               RAM used:   37 (10%) at main() level
                           55 (15%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   379
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   04F
.................... //Ister bisiklet ol ister tir, ne olursan ol yine gel 
....................  
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
0055:  DATA CD,34
0056:  DATA 6B,39
0057:  DATA 6F,36
0058:  DATA E5,3A
0059:  DATA ED,13
005A:  DATA 61,00
005B:  DATA C8,37
005C:  DATA F3,33
005D:  DATA 65,36
005E:  DATA E4,34
005F:  DATA EE,34
0060:  DATA 7A,00
0061:  DATA CC,3A
0062:  DATA 74,33
0063:  DATA 65,37
0064:  DATA A0,24
0065:  DATA 44,10
0066:  DATA CB,30
0067:  DATA 72,3A
0068:  DATA 69,00
0069:  DATA C7,37
006A:  DATA 73,3A
006B:  DATA 65,39
006C:  DATA 69,37
006D:  DATA 69,3D
006E:  DATA 00,01
006F:  DATA B1,16
0070:  DATA CB,37
0071:  DATA F0,3A
0072:  DATA 6B,10
0073:  DATA C9,39
0074:  DATA EC,32
0075:  DATA 6D,10
0076:  DATA BC,16
0077:  DATA 00,01
0078:  DATA B2,16
0079:  DATA D3,3A
007A:  DATA A0,24
007B:  DATA 73,36
007C:  DATA E5,36
007D:  DATA 00,01
007E:  DATA B2,16
007F:  DATA D3,3A
0080:  DATA A0,24
0081:  DATA 73,36
0082:  DATA E5,36
0083:  DATA 20,1E
0084:  DATA 2D,00
0085:  DATA B3,16
0086:  DATA C8,30
0087:  DATA F6,30
0088:  DATA A0,24
0089:  DATA 73,36
008A:  DATA E5,36
008B:  DATA 00,01
008C:  DATA B3,16
008D:  DATA C8,30
008E:  DATA F6,30
008F:  DATA A0,24
0090:  DATA 73,36
0091:  DATA E5,36
0092:  DATA 20,1E
0093:  DATA 2D,00
0094:  DATA B4,16
0095:  DATA C3,34
0096:  DATA EC,30
0097:  DATA A0,24
0098:  DATA 73,36
0099:  DATA E5,36
009A:  DATA 00,01
009B:  DATA B4,16
009C:  DATA C3,34
009D:  DATA EC,30
009E:  DATA A0,24
009F:  DATA 73,36
00A0:  DATA E5,36
00A1:  DATA 20,1E
00A2:  DATA 2D,00
00A3:  DATA B5,16
00A4:  DATA CB,30
00A5:  DATA F9,34
00A6:  DATA 74,10
00A7:  DATA C9,39
00A8:  DATA EC,32
00A9:  DATA 6D,00
00AA:  DATA B5,16
00AB:  DATA CB,30
00AC:  DATA F9,34
00AD:  DATA 74,10
00AE:  DATA C9,39
00AF:  DATA EC,32
00B0:  DATA 6D,10
00B1:  DATA BC,16
00B2:  DATA 00,00
00B3:  DATA C8,37
00B4:  DATA F3,33
00B5:  DATA 65,36
00B6:  DATA E4,34
00B7:  DATA EE,34
00B8:  DATA 7A,00
00B9:  DATA D3,32
00BA:  DATA EC,31
00BB:  DATA F5,35
00BC:  DATA 20,21
00BD:  DATA E5,3C
00BE:  DATA 00,01
00BF:  DATA C8,37
00C0:  DATA F3,33
00C1:  DATA 65,36
00C2:  DATA E4,34
00C3:  DATA EE,34
00C4:  DATA 7A,00
00C5:  DATA C5,36
00C6:  DATA F2,32
00C7:  DATA 20,21
00C8:  DATA E5,3C
00C9:  DATA 00,00
*
01D3:  MOVF   0B,W
01D4:  MOVWF  3E
01D5:  BCF    0B.7
01D6:  BSF    03.5
01D7:  BSF    03.6
01D8:  BSF    0C.7
01D9:  BSF    0C.0
01DA:  NOP
01DB:  NOP
01DC:  BCF    03.5
01DD:  BCF    03.6
01DE:  BTFSC  3E.7
01DF:  BSF    0B.7
01E0:  BSF    03.6
01E1:  MOVF   0C,W
01E2:  ANDLW  7F
01E3:  BTFSC  03.2
01E4:  GOTO   227
01E5:  BCF    03.6
01E6:  MOVWF  3E
01E7:  BSF    03.6
01E8:  MOVF   0D,W
01E9:  BCF    03.6
01EA:  MOVWF  3F
01EB:  BSF    03.6
01EC:  MOVF   0F,W
01ED:  BCF    03.6
01EE:  MOVWF  40
01EF:  MOVF   3E,W
01F0:  MOVWF  41
01F1:  CALL   1A7
01F2:  MOVF   3F,W
01F3:  BSF    03.6
01F4:  MOVWF  0D
01F5:  BCF    03.6
01F6:  MOVF   40,W
01F7:  BSF    03.6
01F8:  MOVWF  0F
01F9:  BCF    03.6
01FA:  MOVF   0B,W
01FB:  MOVWF  41
01FC:  BCF    0B.7
01FD:  BSF    03.5
01FE:  BSF    03.6
01FF:  BSF    0C.7
0200:  BSF    0C.0
0201:  NOP
0202:  NOP
0203:  BCF    03.5
0204:  BCF    03.6
0205:  BTFSC  41.7
0206:  BSF    0B.7
0207:  BSF    03.6
0208:  RLF    0C,W
0209:  RLF    0E,W
020A:  ANDLW  7F
020B:  BTFSC  03.2
020C:  GOTO   227
020D:  BCF    03.6
020E:  MOVWF  3E
020F:  BSF    03.6
0210:  MOVF   0D,W
0211:  BCF    03.6
0212:  MOVWF  3F
0213:  BSF    03.6
0214:  MOVF   0F,W
0215:  BCF    03.6
0216:  MOVWF  40
0217:  MOVF   3E,W
0218:  MOVWF  41
0219:  CALL   1A7
021A:  MOVF   3F,W
021B:  BSF    03.6
021C:  MOVWF  0D
021D:  BCF    03.6
021E:  MOVF   40,W
021F:  BSF    03.6
0220:  MOVWF  0F
0221:  INCF   0D,F
0222:  BTFSC  03.2
0223:  INCF   0F,F
0224:  BCF    03.6
0225:  GOTO   1D3
0226:  BSF    03.6
0227:  BCF    03.6
0228:  RETURN
*
02BA:  MOVLW  10
02BB:  MOVWF  42
02BC:  CLRF   77
02BD:  CLRF   7A
02BE:  RRF    3F,F
02BF:  RRF    3E,F
02C0:  BTFSS  03.0
02C1:  GOTO   2C8
02C2:  MOVF   40,W
02C3:  ADDWF  77,F
02C4:  BTFSC  03.0
02C5:  INCF   7A,F
02C6:  MOVF   41,W
02C7:  ADDWF  7A,F
02C8:  RRF    7A,F
02C9:  RRF    77,F
02CA:  RRF    79,F
02CB:  RRF    78,F
02CC:  DECFSZ 42,F
02CD:  GOTO   2BE
02CE:  BCF    0A.3
02CF:  BCF    0A.4
02D0:  GOTO   3BD (RETURN)
02D1:  CLRF   78
02D2:  CLRF   79
02D3:  CLRF   77
02D4:  CLRF   7A
02D5:  MOVF   43,W
02D6:  BTFSS  03.2
02D7:  GOTO   2DB
02D8:  MOVF   42,W
02D9:  BTFSC  03.2
02DA:  GOTO   2F5
02DB:  MOVLW  10
02DC:  MOVWF  44
02DD:  BCF    03.0
02DE:  RLF    40,F
02DF:  RLF    41,F
02E0:  RLF    77,F
02E1:  RLF    7A,F
02E2:  MOVF   43,W
02E3:  SUBWF  7A,W
02E4:  BTFSS  03.2
02E5:  GOTO   2E8
02E6:  MOVF   42,W
02E7:  SUBWF  77,W
02E8:  BTFSS  03.0
02E9:  GOTO   2F1
02EA:  MOVF   42,W
02EB:  SUBWF  77,F
02EC:  BTFSS  03.0
02ED:  DECF   7A,F
02EE:  MOVF   43,W
02EF:  SUBWF  7A,F
02F0:  BSF    03.0
02F1:  RLF    78,F
02F2:  RLF    79,F
02F3:  DECFSZ 44,F
02F4:  GOTO   2DD
02F5:  BCF    0A.3
02F6:  BCF    0A.4
02F7:  GOTO   3CA (RETURN)
....................  
.................... #list 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEVICES                         */ 
.................... /********************************************************/ 
.................... #device ADC = 10 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM USES                            */ 
.................... /********************************************************/ 
.................... #use delay(clock=4M)  
*
00CA:  MOVLW  43
00CB:  MOVWF  04
00CC:  BCF    03.7
00CD:  MOVF   00,W
00CE:  BTFSC  03.2
00CF:  GOTO   0DE
00D0:  MOVLW  01
00D1:  MOVWF  78
00D2:  CLRF   77
00D3:  DECFSZ 77,F
00D4:  GOTO   0D3
00D5:  DECFSZ 78,F
00D6:  GOTO   0D2
00D7:  MOVLW  4A
00D8:  MOVWF  77
00D9:  DECFSZ 77,F
00DA:  GOTO   0D9
00DB:  GOTO   0DC
00DC:  DECFSZ 00,F
00DD:  GOTO   0D0
00DE:  RETURN
.................... #use rs232(baud=9600,parity=N,uart1,bits=8) 
.................... #use fast_io(b) 
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INCLUDES                        */ 
.................... /********************************************************/ 
.................... #include <lcd.c>     
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00F7:  MOVLW  0F
00F8:  BSF    03.5
00F9:  ANDWF  08,W
00FA:  IORLW  F0
00FB:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00FC:  BCF    03.5
00FD:  BSF    08.2
....................    delay_cycles(1); 
00FE:  NOP
....................    lcd_output_enable(1); 
00FF:  BSF    08.0
....................    delay_cycles(1); 
0100:  NOP
....................    high = lcd_read_nibble(); 
0101:  CALL   0EB
0102:  MOVF   78,W
0103:  MOVWF  49
....................        
....................    lcd_output_enable(0); 
0104:  BCF    08.0
....................    delay_cycles(1); 
0105:  NOP
....................    lcd_output_enable(1); 
0106:  BSF    08.0
....................    delay_us(1); 
0107:  NOP
....................    low = lcd_read_nibble(); 
0108:  CALL   0EB
0109:  MOVF   78,W
010A:  MOVWF  48
....................        
....................    lcd_output_enable(0); 
010B:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
010C:  MOVLW  0F
010D:  BSF    03.5
010E:  ANDWF  08,W
010F:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0110:  BCF    03.5
0111:  SWAPF  49,W
0112:  MOVWF  77
0113:  MOVLW  F0
0114:  ANDWF  77,F
0115:  MOVF   77,W
0116:  IORWF  48,W
0117:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00EB:  MOVF   08,W
00EC:  MOVWF  77
00ED:  SWAPF  08,W
00EE:  ANDLW  0F
00EF:  MOVWF  78
....................   #endif 
00F0:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
00DF:  SWAPF  49,W
00E0:  ANDLW  F0
00E1:  MOVWF  77
00E2:  MOVLW  0F
00E3:  ANDWF  08,W
00E4:  IORWF  77,W
00E5:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
00E6:  NOP
....................    lcd_output_enable(1); 
00E7:  BSF    08.0
....................    delay_us(2); 
00E8:  GOTO   0E9
....................    lcd_output_enable(0); 
00E9:  BCF    08.0
00EA:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00F1:  BSF    03.5
00F2:  BCF    08.0
....................    lcd_rs_tris(); 
00F3:  BCF    08.1
....................    lcd_rw_tris(); 
00F4:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00F5:  BCF    03.5
00F6:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0118:  MOVF   78,W
0119:  MOVWF  48
011A:  BTFSC  48.7
011B:  GOTO   0F7
....................    lcd_output_rs(address); 
011C:  BTFSS  46.0
011D:  BCF    08.1
011E:  BTFSC  46.0
011F:  BSF    08.1
....................    delay_cycles(1); 
0120:  NOP
....................    lcd_output_rw(0); 
0121:  BCF    08.2
....................    delay_cycles(1); 
0122:  NOP
....................    lcd_output_enable(0); 
0123:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0124:  SWAPF  47,W
0125:  MOVWF  48
0126:  MOVLW  0F
0127:  ANDWF  48,F
0128:  MOVF   48,W
0129:  MOVWF  49
012A:  CALL   0DF
....................    lcd_send_nibble(n & 0xf); 
012B:  MOVF   47,W
012C:  ANDLW  0F
012D:  MOVWF  48
012E:  MOVWF  49
012F:  CALL   0DF
0130:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0131:  MOVLW  28
0132:  MOVWF  3F
0133:  MOVLW  0C
0134:  MOVWF  40
0135:  MOVLW  01
0136:  MOVWF  41
0137:  MOVLW  06
0138:  MOVWF  42
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0139:  BCF    08.0
....................    lcd_output_rs(0); 
013A:  BCF    08.1
....................    lcd_output_rw(0); 
013B:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
013C:  MOVLW  0F
013D:  BSF    03.5
013E:  ANDWF  08,W
013F:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0140:  BCF    08.0
....................    lcd_rs_tris(); 
0141:  BCF    08.1
....................    lcd_rw_tris(); 
0142:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0143:  MOVLW  0F
0144:  BCF    03.5
0145:  MOVWF  43
0146:  CALL   0CA
....................    for(i=1;i<=3;++i) 
0147:  MOVLW  01
0148:  MOVWF  3E
0149:  MOVF   3E,W
014A:  SUBLW  03
014B:  BTFSS  03.0
014C:  GOTO   155
....................    { 
....................        lcd_send_nibble(3); 
014D:  MOVLW  03
014E:  MOVWF  49
014F:  CALL   0DF
....................        delay_ms(5); 
0150:  MOVLW  05
0151:  MOVWF  43
0152:  CALL   0CA
0153:  INCF   3E,F
0154:  GOTO   149
....................    } 
....................     
....................    lcd_send_nibble(2); 
0155:  MOVLW  02
0156:  MOVWF  49
0157:  CALL   0DF
....................    delay_ms(5); 
0158:  MOVLW  05
0159:  MOVWF  43
015A:  CALL   0CA
....................    for(i=0;i<=3;++i) 
015B:  CLRF   3E
015C:  MOVF   3E,W
015D:  SUBLW  03
015E:  BTFSS  03.0
015F:  GOTO   16C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0160:  MOVLW  3F
0161:  ADDWF  3E,W
0162:  MOVWF  04
0163:  BCF    03.7
0164:  MOVF   00,W
0165:  MOVWF  43
0166:  CLRF   46
0167:  MOVF   43,W
0168:  MOVWF  47
0169:  CALL   0F1
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
016A:  INCF   3E,F
016B:  GOTO   15C
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0195:  DECFSZ 43,W
0196:  GOTO   198
0197:  GOTO   19B
....................       address=LCD_LINE_TWO; 
0198:  MOVLW  40
0199:  MOVWF  44
019A:  GOTO   19C
....................    else 
....................       address=0; 
019B:  CLRF   44
....................       
....................    address+=x-1; 
019C:  MOVLW  01
019D:  SUBWF  42,W
019E:  ADDWF  44,F
....................    lcd_send_byte(0,0x80|address); 
019F:  MOVF   44,W
01A0:  IORLW  80
01A1:  MOVWF  45
01A2:  CLRF   46
01A3:  MOVF   45,W
01A4:  MOVWF  47
01A5:  CALL   0F1
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01A6:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01A7:  MOVF   41,W
01A8:  XORLW  07
01A9:  BTFSC  03.2
01AA:  GOTO   1B5
01AB:  XORLW  0B
01AC:  BTFSC  03.2
01AD:  GOTO   1BA
01AE:  XORLW  06
01AF:  BTFSC  03.2
01B0:  GOTO   1C2
01B1:  XORLW  02
01B2:  BTFSC  03.2
01B3:  GOTO   1C8
01B4:  GOTO   1CD
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01B5:  MOVLW  01
01B6:  MOVWF  42
01B7:  MOVWF  43
01B8:  CALL   195
01B9:  GOTO   1D2
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01BA:  CLRF   46
01BB:  MOVLW  01
01BC:  MOVWF  47
01BD:  CALL   0F1
....................                      delay_ms(2); 
01BE:  MOVLW  02
01BF:  MOVWF  43
01C0:  CALL   0CA
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01C1:  GOTO   1D2
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01C2:  MOVLW  01
01C3:  MOVWF  42
01C4:  MOVLW  02
01C5:  MOVWF  43
01C6:  CALL   195
01C7:  GOTO   1D2
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01C8:  CLRF   46
01C9:  MOVLW  10
01CA:  MOVWF  47
01CB:  CALL   0F1
01CC:  GOTO   1D2
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01CD:  MOVLW  01
01CE:  MOVWF  46
01CF:  MOVF   41,W
01D0:  MOVWF  47
01D1:  CALL   0F1
....................      #endif 
....................    } 
01D2:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <math.h>        
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................                                         
.................... /********************************************************/ 
.................... /*               SYSTEM FUSES                           */ 
.................... /********************************************************/                                          
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM REGISTER                        */ 
.................... /********************************************************/ 
.................... //!#byte my_TIM0_OPTION_REG = 0x81  
.................... //!#byte my_TIM0_MODULE_REG = 0x01  
.................... //!#byte my_INTCON_REG      = 0x0B 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM STRUCTS                         */ 
.................... /********************************************************/ 
.................... typedef struct{ 
....................  
....................    unsigned int8 time_Foaming; 
....................    unsigned int8 time_Washing; 
....................    unsigned int8 time_Ventilation; 
....................    unsigned int8 time_Polishing; 
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM VARIABLES                       */ 
.................... /********************************************************/ 
.................... //-VAR-->CRITICAL PART 
.................... char readed_ID;   //Coming data will be When came from slave PIC 
.................... int8 systemLock;  //If the ID is valid, system open. Otherwise it will remain locked 
.................... int8 OPS_Status;  //55 means ops will be canceled, otherwise ops will be going on 
....................  
.................... //-VAR-->Keeps Clients 
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;// Will be used as given on the right --> MikroClient[ClientNumber]                                         
....................  
.................... //-VAR-->POTENTIOMETERS 
.................... int Index_OptionMenu; 
.................... unsigned long int val_ADC_Pot_Surf; 
.................... unsigned long int val_ADC_Pot_Timer; 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEFINATION                      */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM INPUT & OUTPUT ======== */ 
.................... #define button_NEXT           pin_A3 
.................... #define button_BACK           pin_A4 
.................... #define button_Select         pin_A5 
.................... #define button_RemoveSelect   pin_C0 
.................... #define button_OPS_START      pin_C1 
.................... #define button_OPS_CANCEL     pin_B0 
....................  
....................  
.................... /********************************************************/ 
.................... /*               FUNCTIONS PROTOTYPES                   */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM CONFIGURATION FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_Init(void); 
.................... void trisSetting_Init(void); 
.................... void interruptSetting_Init(void); 
.................... void adcSetting_Init(void); 
....................  
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_lcd_IdleStatus(void); 
.................... void NavigateOperationMenu(void); 
.................... void NavigateTimeMoneyPreferenceMenu(void); 
....................  
.................... /* ======== UART SERIAL COM. FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_uart_CheckTheMessage(void); 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM MACROS                          */ 
.................... /********************************************************/ 
.................... #define ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf) \ 
....................    do{                                        \ 
....................           Index_OptionMenu = ((val_ADC_Pot_Surf*5)/1020);  \ 
....................           if(Index_OptionMenu >= 5){ \ 
....................             Index_OptionMenu = 4;    \ 
....................           }                            \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer) \ 
....................    do{ \ 
....................             \ 
....................    }while(0) 
....................     
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INTERRUPTS                      */ 
.................... /********************************************************/ 
.................... #int_EXT 
.................... void system_isr_OperationCANCEL(){ 
....................   OPS_Status = 55; 
*
004F:  MOVLW  37
0050:  MOVWF  2D
0051:  BCF    0B.1
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   02B
.................... } 
.................... //Timer kesmleri 
....................  
....................  
....................  
.................... void main(void)  
*
0379:  MOVF   03,W
037A:  ANDLW  1F
037B:  MOVWF  03
037C:  BSF    03.5
037D:  BSF    03.6
037E:  BCF    07.3
037F:  MOVLW  19
0380:  BCF    03.6
0381:  MOVWF  19
0382:  MOVLW  A6
0383:  MOVWF  18
0384:  MOVLW  90
0385:  BCF    03.5
0386:  MOVWF  18
0387:  CLRF   3D
0388:  CLRF   3C
0389:  BSF    03.5
038A:  BSF    03.6
038B:  MOVF   09,W
038C:  ANDLW  C0
038D:  MOVWF  09
038E:  BCF    03.6
038F:  BCF    1F.4
0390:  BCF    1F.5
0391:  MOVLW  00
0392:  BSF    03.6
0393:  MOVWF  08
0394:  BCF    03.5
0395:  CLRF   07
0396:  CLRF   08
0397:  CLRF   09
0398:  BCF    03.7
.................... { 
....................    
....................    //-->System parameters will be initialized 
....................    SubSystem_Init(); 
0399:  BCF    03.6
039A:  GOTO   131
....................        
....................    //-->Wait until unlock the system 
....................    do{ 
....................         SubSystem_lcd_IdleStatus();   //Greeting the customer 
039B:  GOTO   229
....................          
....................         if(kbhit()) 
039C:  BTFSS  0C.5
039D:  GOTO   3A3
....................         { 
....................            readed_ID = getc(); 
039E:  BTFSS  0C.5
039F:  GOTO   39E
03A0:  MOVF   1A,W
03A1:  MOVWF  2B
....................            SubSystem_uart_CheckTheMessage(); 
03A2:  GOTO   272
....................         }       
....................          
....................     }while(systemLock!=1); 
03A3:  DECFSZ 2C,W
03A4:  GOTO   39B
....................   
....................     delay_ms(3000); 
03A5:  MOVLW  0C
03A6:  MOVWF  3E
03A7:  MOVLW  FA
03A8:  MOVWF  43
03A9:  CALL   0CA
03AA:  DECFSZ 3E,F
03AB:  GOTO   3A7
....................    
....................       //Potansiyometreden deðerler okuyacak, opsiyonlarý gezmek için 
....................       //ileri butonuna basýlýnca pot hangi opsiyonda ise o opsiyona gidilecek 
....................       //geri butonuna basýlýnca pot ile tekrardan yukardan aþaðý gezilebilecek 
....................       //diyelim ki bir opsiyonun içine girdi, pot kullanarak zamanlama ayarlarý ile oynuyor,  
....................       //çift týk ile ilgili zaman ve ücreti seçebilecek, tek týk ile de bozabilecek 
....................       do{ 
....................        
....................        //Get Surf_Pot ADC value(0-1024) 
....................        val_ADC_Pot_Surf = read_adc();   
03AC:  BSF    1F.1
03AD:  BTFSC  1F.1
03AE:  GOTO   3AD
03AF:  BSF    03.5
03B0:  MOVF   1E,W
03B1:  BCF    03.5
03B2:  MOVWF  38
03B3:  MOVF   1E,W
03B4:  MOVWF  39
....................         
....................        //Convert Surf_Pot ADC value into the option menu index 
....................        ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf); 
03B5:  MOVF   39,W
03B6:  MOVWF  3F
03B7:  MOVF   38,W
03B8:  MOVWF  3E
03B9:  CLRF   41
03BA:  MOVLW  05
03BB:  MOVWF  40
03BC:  GOTO   2BA
03BD:  MOVF   79,W
03BE:  MOVWF  3F
03BF:  MOVF   78,W
03C0:  MOVWF  3E
03C1:  MOVF   79,W
03C2:  MOVWF  41
03C3:  MOVF   78,W
03C4:  MOVWF  40
03C5:  MOVLW  03
03C6:  MOVWF  43
03C7:  MOVLW  FC
03C8:  MOVWF  42
03C9:  GOTO   2D1
03CA:  MOVF   78,W
03CB:  MOVWF  37
03CC:  SUBLW  04
03CD:  BTFSC  03.0
03CE:  GOTO   3D1
03CF:  MOVLW  04
03D0:  MOVWF  37
....................        
....................        //Use index value to show selected option and other one 
....................        NavigateOperationMenu(); 
03D1:  GOTO   2F8
....................            
....................           //The client wants to see the next section based on the selected option 
....................           if(input(button_NEXT) == 1) 
03D2:  BSF    03.5
03D3:  BSF    05.3
03D4:  BCF    03.5
03D5:  BTFSS  05.3
03D6:  GOTO   3EA
....................           { 
....................  
....................                   do{ 
....................                   //Get Timer_Pot ADC value(0-1024) 
....................                   val_ADC_Pot_Timer = read_adc();  
03D7:  BSF    1F.1
03D8:  BTFSC  1F.1
03D9:  GOTO   3D8
03DA:  BSF    03.5
03DB:  MOVF   1E,W
03DC:  BCF    03.5
03DD:  MOVWF  3A
03DE:  MOVF   1E,W
03DF:  MOVWF  3B
....................                    
....................                   //Convert Surf_Pot ADC value into the option menu index 
....................                   ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer); 
....................                    
....................                   //Shows time & money 
....................                   NavigateTimeMoneyPreferenceMenu(); 
03E0:  GOTO   376
....................                    
....................                      //Break the while condation 
....................                      if(input(button_BACK) == 1){ 
03E1:  BSF    03.5
03E2:  BSF    05.4
03E3:  BCF    03.5
03E4:  BTFSC  05.4
....................                         break; 
03E5:  GOTO   3EA
....................                      } 
....................                    
....................                   }while(OPS_Status!=55);  
03E6:  MOVF   2D,W
03E7:  SUBLW  37
03E8:  BTFSS  03.2
03E9:  GOTO   3D7
....................           } 
....................         
....................        delay_ms(500); 
03EA:  MOVLW  02
03EB:  MOVWF  3E
03EC:  MOVLW  FA
03ED:  MOVWF  43
03EE:  CALL   0CA
03EF:  DECFSZ 3E,F
03F0:  GOTO   3EC
....................    
....................       }while(OPS_Status!=55); 
03F1:  MOVF   2D,W
03F2:  SUBLW  37
03F3:  BTFSS  03.2
03F4:  GOTO   3AC
....................          
....................         
....................     while(1) 
....................     { 
03F5:  GOTO   3F5
....................      
....................     
....................     
....................     } 
....................   
....................   
.................... } 
....................  
03F6:  SLEEP
....................  
.................... /* ======== -BEGIN- SYSTEM CONFIGURATION FUNCTIONS -BEGIN- ======== */ 
.................... //Function-1 
.................... void SubSystem_Init(void){ 
....................  lcd_init(); 
....................  trisSetting_Init(); 
....................  interruptSetting_Init(); 
....................  adcSetting_Init(); 
*
0192:  BCF    0A.3
0193:  BCF    0A.4
0194:  GOTO   39B (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void trisSetting_Init(){ 
....................    set_tris_b(0x01); 
*
016C:  MOVLW  01
016D:  BSF    03.5
016E:  MOVWF  06
.................... } 
....................  
.................... //Function-3 
.................... void interruptSetting_Init(){ 
....................      //-CONFIG--> OPERATION CANCEL BUTTON  
....................        ext_int_edge(L_TO_H); //Harici kesme Lojik 0'dan 1'e geçerken 
016F:  BSF    01.6
....................        enable_interrupts(INT_EXT); //Harici kesme aktif 
0170:  BCF    03.5
0171:  BSF    0B.4
....................        enable_interrupts(GLOBAL); //Aktif kesmeler için genel kesme yetkisi ver 
0172:  MOVLW  C0
0173:  IORWF  0B,F
....................      //-CONFIG--> TIMER0  
.................... } 
....................  
.................... //Function-4 
.................... void adcSetting_Init(){ 
....................      //-CONFIG--> Surfing Potentiometer 
....................         setup_adc(adc_clock_div_32);  
0174:  BCF    1F.6
0175:  BSF    1F.7
0176:  BSF    03.5
0177:  BSF    1F.7
0178:  BCF    03.5
0179:  BSF    1F.0
....................         setup_adc_ports(sAN0); 
017A:  BSF    03.5
017B:  BSF    03.6
017C:  MOVF   09,W
017D:  ANDLW  C0
017E:  MOVWF  09
017F:  BCF    03.6
0180:  BCF    1F.4
0181:  BCF    1F.5
0182:  MOVLW  01
0183:  BSF    03.6
0184:  MOVWF  08
....................         set_adc_channel(0);  
0185:  MOVLW  00
0186:  MOVWF  78
0187:  BCF    03.5
0188:  BCF    03.6
0189:  MOVF   1F,W
018A:  ANDLW  C3
018B:  IORWF  78,W
018C:  MOVWF  1F
....................         delay_us(200); 
018D:  MOVLW  42
018E:  MOVWF  77
018F:  DECFSZ 77,F
0190:  GOTO   18F
0191:  NOP
....................          
....................      //-CONFIG--> Timer Potentiometer 
....................      //-CONFIG--> Process Intensity Potentiometer 
.................... } 
....................  
.................... /* ======== -END- SYSTEM CONFIGURATION FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- LCD SCREEN FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief :It sequentially displays a welcome message and  
....................  *        prompts the user to present their ID card. 
....................  */ 
.................... void SubSystem_lcd_IdleStatus(void){ 
....................       printf(lcd_putc,"\f"); 
*
0229:  MOVLW  0C
022A:  MOVWF  41
022B:  CALL   1A7
....................       lcd_gotoxy(4,1); 
022C:  MOVLW  04
022D:  MOVWF  42
022E:  MOVLW  01
022F:  MOVWF  43
0230:  CALL   195
....................       printf(lcd_putc,"Mikroleum'a"); 
0231:  MOVLW  55
0232:  BSF    03.6
0233:  MOVWF  0D
0234:  MOVLW  00
0235:  MOVWF  0F
0236:  BCF    03.6
0237:  CALL   1D3
....................       lcd_gotoxy(4,2); 
0238:  MOVLW  04
0239:  MOVWF  42
023A:  MOVLW  02
023B:  MOVWF  43
023C:  CALL   195
....................       printf(lcd_putc,"Hosgeldiniz"); 
023D:  MOVLW  5B
023E:  BSF    03.6
023F:  MOVWF  0D
0240:  MOVLW  00
0241:  MOVWF  0F
0242:  BCF    03.6
0243:  CALL   1D3
....................       delay_ms(500); 
0244:  MOVLW  02
0245:  MOVWF  3E
0246:  MOVLW  FA
0247:  MOVWF  43
0248:  CALL   0CA
0249:  DECFSZ 3E,F
024A:  GOTO   246
....................       printf(lcd_putc,"\f"); 
024B:  MOVLW  0C
024C:  MOVWF  41
024D:  CALL   1A7
....................        
....................       lcd_gotoxy(1,1); 
024E:  MOVLW  01
024F:  MOVWF  42
0250:  MOVWF  43
0251:  CALL   195
....................       printf(lcd_putc,"Lutfen ID Karti"); 
0252:  MOVLW  61
0253:  BSF    03.6
0254:  MOVWF  0D
0255:  MOVLW  00
0256:  MOVWF  0F
0257:  BCF    03.6
0258:  CALL   1D3
....................       lcd_gotoxy(4,2); 
0259:  MOVLW  04
025A:  MOVWF  42
025B:  MOVLW  02
025C:  MOVWF  43
025D:  CALL   195
....................       printf(lcd_putc,"Gosteriniz"); 
025E:  MOVLW  69
025F:  BSF    03.6
0260:  MOVWF  0D
0261:  MOVLW  00
0262:  MOVWF  0F
0263:  BCF    03.6
0264:  CALL   1D3
....................       delay_ms(500); 
0265:  MOVLW  02
0266:  MOVWF  3E
0267:  MOVLW  FA
0268:  MOVWF  43
0269:  CALL   0CA
026A:  DECFSZ 3E,F
026B:  GOTO   267
....................       printf(lcd_putc,"\f"); 
026C:  MOVLW  0C
026D:  MOVWF  41
026E:  CALL   1A7
026F:  BCF    0A.3
0270:  BCF    0A.4
0271:  GOTO   39C (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void NavigateOperationMenu(void){ 
.................... printf(lcd_putc, "\f"); // LCD'yi temizle 
*
02F8:  MOVLW  0C
02F9:  MOVWF  41
02FA:  CALL   1A7
....................  
....................     // 1. Seçenek 
....................     if (Index_OptionMenu == 0) { 
02FB:  MOVF   37,F
02FC:  BTFSS  03.2
02FD:  GOTO   315
....................         lcd_gotoxy(1, 1); 
02FE:  MOVLW  01
02FF:  MOVWF  42
0300:  MOVWF  43
0301:  CALL   195
....................         printf(lcd_putc, "1-Kopuk Islem <-"); 
0302:  MOVLW  6F
0303:  BSF    03.6
0304:  MOVWF  0D
0305:  MOVLW  00
0306:  MOVWF  0F
0307:  BCF    03.6
0308:  CALL   1D3
....................         lcd_gotoxy(1, 2); 
0309:  MOVLW  01
030A:  MOVWF  42
030B:  MOVLW  02
030C:  MOVWF  43
030D:  CALL   195
....................         printf(lcd_putc, "2-Su Islem");    
030E:  MOVLW  78
030F:  BSF    03.6
0310:  MOVWF  0D
0311:  MOVLW  00
0312:  MOVWF  0F
0313:  BCF    03.6
0314:  CALL   1D3
....................     }  
....................  
....................     // 2. Seçenek 
....................     if (Index_OptionMenu == 1) { 
0315:  DECFSZ 37,W
0316:  GOTO   32E
....................         lcd_gotoxy(1, 1); 
0317:  MOVLW  01
0318:  MOVWF  42
0319:  MOVWF  43
031A:  CALL   195
....................         printf(lcd_putc, "2-Su Islem <-"); 
031B:  MOVLW  7E
031C:  BSF    03.6
031D:  MOVWF  0D
031E:  MOVLW  00
031F:  MOVWF  0F
0320:  BCF    03.6
0321:  CALL   1D3
....................         lcd_gotoxy(1, 2); 
0322:  MOVLW  01
0323:  MOVWF  42
0324:  MOVLW  02
0325:  MOVWF  43
0326:  CALL   195
....................         printf(lcd_putc, "3-Hava Islem");        
0327:  MOVLW  85
0328:  BSF    03.6
0329:  MOVWF  0D
032A:  MOVLW  00
032B:  MOVWF  0F
032C:  BCF    03.6
032D:  CALL   1D3
....................     } 
....................      
....................     // 3. Seçenek 
....................         if (Index_OptionMenu == 2) { 
032E:  MOVF   37,W
032F:  SUBLW  02
0330:  BTFSS  03.2
0331:  GOTO   349
....................         lcd_gotoxy(1, 1); 
0332:  MOVLW  01
0333:  MOVWF  42
0334:  MOVWF  43
0335:  CALL   195
....................         printf(lcd_putc, "3-Hava Islem <-"); 
0336:  MOVLW  8C
0337:  BSF    03.6
0338:  MOVWF  0D
0339:  MOVLW  00
033A:  MOVWF  0F
033B:  BCF    03.6
033C:  CALL   1D3
....................         lcd_gotoxy(1, 2); 
033D:  MOVLW  01
033E:  MOVWF  42
033F:  MOVLW  02
0340:  MOVWF  43
0341:  CALL   195
....................         printf(lcd_putc, "4-Cila Islem");    
0342:  MOVLW  94
0343:  BSF    03.6
0344:  MOVWF  0D
0345:  MOVLW  00
0346:  MOVWF  0F
0347:  BCF    03.6
0348:  CALL   1D3
....................     }  
....................  
....................     // 4. Seçenek 
....................     if (Index_OptionMenu == 3) { 
0349:  MOVF   37,W
034A:  SUBLW  03
034B:  BTFSS  03.2
034C:  GOTO   364
....................         lcd_gotoxy(1, 1); 
034D:  MOVLW  01
034E:  MOVWF  42
034F:  MOVWF  43
0350:  CALL   195
....................         printf(lcd_putc, "4-Cila Islem <-"); 
0351:  MOVLW  9B
0352:  BSF    03.6
0353:  MOVWF  0D
0354:  MOVLW  00
0355:  MOVWF  0F
0356:  BCF    03.6
0357:  CALL   1D3
....................         lcd_gotoxy(1, 2); 
0358:  MOVLW  01
0359:  MOVWF  42
035A:  MOVLW  02
035B:  MOVWF  43
035C:  CALL   195
....................         printf(lcd_putc, "5-Kayit Islem");     
035D:  MOVLW  A3
035E:  BSF    03.6
035F:  MOVWF  0D
0360:  MOVLW  00
0361:  MOVWF  0F
0362:  BCF    03.6
0363:  CALL   1D3
....................     } 
....................      
....................     // 5. Seçenek 
....................     if (Index_OptionMenu == 4) { 
0364:  MOVF   37,W
0365:  SUBLW  04
0366:  BTFSS  03.2
0367:  GOTO   373
....................         lcd_gotoxy(1, 1); 
0368:  MOVLW  01
0369:  MOVWF  42
036A:  MOVWF  43
036B:  CALL   195
....................         printf(lcd_putc, "5-Kayit Islem <-");  
036C:  MOVLW  AA
036D:  BSF    03.6
036E:  MOVWF  0D
036F:  MOVLW  00
0370:  MOVWF  0F
0371:  BCF    03.6
0372:  CALL   1D3
....................     } 
0373:  BCF    0A.3
0374:  BCF    0A.4
0375:  GOTO   3D2 (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Function-3 
.................... void NavigateTimeMoneyPreferenceMenu(void){ 
0376:  BCF    0A.3
0377:  BCF    0A.4
0378:  GOTO   3E1 (RETURN)
.................... } 
....................  
.................... /* ======== -END- LCD SCREEN FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- UART PROTOCOL FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief : This function checks the `readed_ID` variable to determine  
....................  *         the action to take based on predefined identifiers. Depending on the identifier, 
....................  *         it displays a welcome message for specific users or sets the system to an idle state. 
....................  */ 
.................... void SubSystem_uart_CheckTheMessage(void){ 
....................     
....................    if(readed_ID == '+'){      //Mr. Selçuk's ID 
*
0272:  MOVF   2B,W
0273:  SUBLW  2B
0274:  BTFSS  03.2
0275:  GOTO   292
....................       ClientNumber = 0;       //System works for Mr. Selcuk 
0276:  CLRF   36
....................       lcd_gotoxy(4,1); 
0277:  MOVLW  04
0278:  MOVWF  42
0279:  MOVLW  01
027A:  MOVWF  43
027B:  CALL   195
....................       printf(lcd_putc,"Hosgeldiniz"); 
027C:  MOVLW  B3
027D:  BSF    03.6
027E:  MOVWF  0D
027F:  MOVLW  00
0280:  MOVWF  0F
0281:  BCF    03.6
0282:  CALL   1D3
....................       lcd_gotoxy(4,2); 
0283:  MOVLW  04
0284:  MOVWF  42
0285:  MOVLW  02
0286:  MOVWF  43
0287:  CALL   195
....................       printf(lcd_putc,"Selcuk Bey"); 
0288:  MOVLW  B9
0289:  BSF    03.6
028A:  MOVWF  0D
028B:  MOVLW  00
028C:  MOVWF  0F
028D:  BCF    03.6
028E:  CALL   1D3
....................       systemLock = 1; 
028F:  MOVLW  01
0290:  MOVWF  2C
....................    } 
0291:  GOTO   2B7
....................    else if(readed_ID == '*'){ //Mr. Emre's ID 
0292:  MOVF   2B,W
0293:  SUBLW  2A
0294:  BTFSS  03.2
0295:  GOTO   2B3
....................       ClientNumber = 1;       //System works for Mr. Emre 
0296:  MOVLW  01
0297:  MOVWF  36
....................       lcd_gotoxy(4,1); 
0298:  MOVLW  04
0299:  MOVWF  42
029A:  MOVLW  01
029B:  MOVWF  43
029C:  CALL   195
....................       printf(lcd_putc,"Hosgeldiniz"); 
029D:  MOVLW  BF
029E:  BSF    03.6
029F:  MOVWF  0D
02A0:  MOVLW  00
02A1:  MOVWF  0F
02A2:  BCF    03.6
02A3:  CALL   1D3
....................       lcd_gotoxy(4,2); 
02A4:  MOVLW  04
02A5:  MOVWF  42
02A6:  MOVLW  02
02A7:  MOVWF  43
02A8:  CALL   195
....................       printf(lcd_putc,"Emre Bey"); 
02A9:  MOVLW  C5
02AA:  BSF    03.6
02AB:  MOVWF  0D
02AC:  MOVLW  00
02AD:  MOVWF  0F
02AE:  BCF    03.6
02AF:  CALL   1D3
....................       systemLock = 1; 
02B0:  MOVLW  01
02B1:  MOVWF  2C
....................    } 
02B2:  GOTO   2B7
....................    else if(readed_ID == '.'){ //Slave pic is idle status 
02B3:  MOVF   2B,W
02B4:  SUBLW  2E
02B5:  BTFSC  03.2
....................     
....................        systemLock = 0; 
02B6:  CLRF   2C
....................    } 
02B7:  BCF    0A.3
02B8:  BCF    0A.4
02B9:  GOTO   3A3 (RETURN)
....................  
.................... } 
.................... /* ======== -END- UART PROTOCOL FUNCTIONS -END- ======== */ 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
