CCS PCM C Compiler, Version 5.049, 5967               26-Ara-24 00:24

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Final_CCS_Code_ForMaster\main.lst

               ROM used:   2451 words (30%)
                           Largest free fragment is 2048
               RAM used:   89 (24%) at main() level
                           113 (31%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   050
002B:  BTFSS  0B.5
002C:  GOTO   02F
002D:  BTFSC  0B.2
002E:  GOTO   053
002F:  MOVF   22,W
0030:  MOVWF  04
0031:  MOVF   23,W
0032:  MOVWF  77
0033:  MOVF   24,W
0034:  MOVWF  78
0035:  MOVF   25,W
0036:  MOVWF  79
0037:  MOVF   26,W
0038:  MOVWF  7A
0039:  MOVF   27,W
003A:  BSF    03.6
003B:  MOVWF  0D
003C:  BCF    03.6
003D:  MOVF   28,W
003E:  BSF    03.6
003F:  MOVWF  0F
0040:  BCF    03.6
0041:  MOVF   29,W
0042:  BSF    03.6
0043:  MOVWF  0C
0044:  BCF    03.6
0045:  MOVF   2A,W
0046:  BSF    03.6
0047:  MOVWF  0E
0048:  BCF    03.6
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   056
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   05D
.................... //Ister bisiklet ol ister tir, ne olursan ol yine gel 
....................  
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
0070:  DATA 43,26
0071:  DATA CF,29
0072:  DATA 49,27
0073:  DATA 47,00
0074:  DATA CB,37
0075:  DATA F0,3A
0076:  DATA 6B,1D
0077:  DATA 25,36
0078:  DATA 64,00
0079:  DATA D3,3A
007A:  DATA 3A,1D
007B:  DATA 25,36
007C:  DATA 64,00
007D:  DATA C8,30
007E:  DATA F6,30
007F:  DATA BA,12
0080:  DATA 6C,32
0081:  DATA 00,01
0082:  DATA C3,34
0083:  DATA EC,30
0084:  DATA BA,12
0085:  DATA 6C,32
0086:  DATA 00,00
0087:  DATA CD,34
0088:  DATA 6B,39
0089:  DATA 6F,36
008A:  DATA E5,3A
008B:  DATA ED,13
008C:  DATA 61,00
008D:  DATA C8,37
008E:  DATA F3,33
008F:  DATA 65,36
0090:  DATA E4,34
0091:  DATA EE,34
0092:  DATA 7A,00
0093:  DATA CC,3A
0094:  DATA 74,33
0095:  DATA 65,37
0096:  DATA A0,24
0097:  DATA 44,10
0098:  DATA CB,30
0099:  DATA 72,3A
009A:  DATA 69,00
009B:  DATA C7,37
009C:  DATA 73,3A
009D:  DATA 65,39
009E:  DATA 69,37
009F:  DATA 69,3D
00A0:  DATA 00,01
00A1:  DATA B1,16
00A2:  DATA CB,37
00A3:  DATA F0,3A
00A4:  DATA 6B,10
00A5:  DATA C9,39
00A6:  DATA EC,32
00A7:  DATA 6D,10
00A8:  DATA BC,16
00A9:  DATA 00,01
00AA:  DATA B2,16
00AB:  DATA D3,3A
00AC:  DATA A0,24
00AD:  DATA 73,36
00AE:  DATA E5,36
00AF:  DATA 00,01
00B0:  DATA B2,16
00B1:  DATA D3,3A
00B2:  DATA A0,24
00B3:  DATA 73,36
00B4:  DATA E5,36
00B5:  DATA 20,1E
00B6:  DATA 2D,00
00B7:  DATA B3,16
00B8:  DATA C8,30
00B9:  DATA F6,30
00BA:  DATA A0,24
00BB:  DATA 73,36
00BC:  DATA E5,36
00BD:  DATA 00,01
00BE:  DATA B3,16
00BF:  DATA C8,30
00C0:  DATA F6,30
00C1:  DATA A0,24
00C2:  DATA 73,36
00C3:  DATA E5,36
00C4:  DATA 20,1E
00C5:  DATA 2D,00
00C6:  DATA B4,16
00C7:  DATA C3,34
00C8:  DATA EC,30
00C9:  DATA A0,24
00CA:  DATA 73,36
00CB:  DATA E5,36
00CC:  DATA 00,01
00CD:  DATA B4,16
00CE:  DATA C3,34
00CF:  DATA EC,30
00D0:  DATA A0,24
00D1:  DATA 73,36
00D2:  DATA E5,36
00D3:  DATA 20,1E
00D4:  DATA 2D,00
00D5:  DATA B5,16
00D6:  DATA CB,30
00D7:  DATA F9,34
00D8:  DATA 74,10
00D9:  DATA C9,39
00DA:  DATA EC,32
00DB:  DATA 6D,00
00DC:  DATA B5,16
00DD:  DATA CB,30
00DE:  DATA F9,34
00DF:  DATA 74,10
00E0:  DATA C9,39
00E1:  DATA EC,32
00E2:  DATA 6D,10
00E3:  DATA BC,16
00E4:  DATA 00,00
00E5:  DATA D5,31
00E6:  DATA F2,32
00E7:  DATA 74,1D
00E8:  DATA 25,32
00E9:  DATA 20,3A
00EA:  DATA 6C,00
00EB:  DATA D3,3A
00EC:  DATA F2,32
00ED:  DATA BA,12
00EE:  DATA 6C,32
00EF:  DATA 00,01
00F0:  DATA D3,32
00F1:  DATA 63,1D
00F2:  DATA 00,01
00F3:  DATA D5,31
00F4:  DATA F2,32
00F5:  DATA 74,1D
00F6:  DATA 25,36
00F7:  DATA 64,10
00F8:  DATA 74,36
00F9:  DATA 00,01
00FA:  DATA D3,32
00FB:  DATA 63,1D
00FC:  DATA 00,01
00FD:  DATA C8,37
00FE:  DATA F3,33
00FF:  DATA 65,36
0100:  DATA E4,34
0101:  DATA EE,34
0102:  DATA 7A,00
0103:  DATA D3,32
0104:  DATA EC,31
0105:  DATA F5,35
0106:  DATA 20,21
0107:  DATA E5,3C
0108:  DATA 00,01
0109:  DATA C8,37
010A:  DATA F3,33
010B:  DATA 65,36
010C:  DATA E4,34
010D:  DATA EE,34
010E:  DATA 7A,00
010F:  DATA C5,36
0110:  DATA F2,32
0111:  DATA 20,21
0112:  DATA E5,3C
0113:  DATA 00,00
*
024A:  MOVF   0B,W
024B:  MOVWF  73
024C:  BCF    0B.7
024D:  BSF    03.5
024E:  BSF    03.6
024F:  BSF    0C.7
0250:  BSF    0C.0
0251:  NOP
0252:  NOP
0253:  BTFSS  73.7
0254:  GOTO   25A
0255:  BCF    03.5
0256:  BCF    03.6
0257:  BSF    0B.7
0258:  BSF    03.5
0259:  BSF    03.6
025A:  BCF    03.5
025B:  MOVF   0C,W
025C:  ANDLW  7F
025D:  BTFSC  03.2
025E:  GOTO   29C
025F:  MOVWF  73
0260:  MOVF   0D,W
0261:  MOVWF  74
0262:  MOVF   0F,W
0263:  MOVWF  75
0264:  MOVF   73,W
0265:  BSF    03.5
0266:  BCF    03.6
0267:  MOVWF  27
0268:  BCF    03.5
0269:  CALL   210
026A:  MOVF   74,W
026B:  BSF    03.6
026C:  MOVWF  0D
026D:  MOVF   75,W
026E:  MOVWF  0F
026F:  BCF    03.6
0270:  MOVF   0B,W
0271:  MOVWF  76
0272:  BCF    0B.7
0273:  BSF    03.5
0274:  BSF    03.6
0275:  BSF    0C.7
0276:  BSF    0C.0
0277:  NOP
0278:  NOP
0279:  BTFSS  76.7
027A:  GOTO   280
027B:  BCF    03.5
027C:  BCF    03.6
027D:  BSF    0B.7
027E:  BSF    03.5
027F:  BSF    03.6
0280:  BCF    03.5
0281:  RLF    0C,W
0282:  RLF    0E,W
0283:  ANDLW  7F
0284:  BTFSC  03.2
0285:  GOTO   29C
0286:  MOVWF  73
0287:  MOVF   0D,W
0288:  MOVWF  74
0289:  MOVF   0F,W
028A:  MOVWF  75
028B:  MOVF   73,W
028C:  BSF    03.5
028D:  BCF    03.6
028E:  MOVWF  27
028F:  BCF    03.5
0290:  CALL   210
0291:  MOVF   74,W
0292:  BSF    03.6
0293:  MOVWF  0D
0294:  MOVF   75,W
0295:  MOVWF  0F
0296:  INCF   0D,F
0297:  BTFSC  03.2
0298:  INCF   0F,F
0299:  BCF    03.6
029A:  GOTO   24A
029B:  BSF    03.6
029C:  BCF    03.6
029D:  RETURN
*
0349:  MOVLW  10
034A:  BSF    03.5
034B:  MOVWF  20
034C:  CLRF   77
034D:  CLRF   7A
034E:  RRF    7C,F
034F:  RRF    7B,F
0350:  BTFSS  03.0
0351:  GOTO   358
0352:  MOVF   7D,W
0353:  ADDWF  77,F
0354:  BTFSC  03.0
0355:  INCF   7A,F
0356:  MOVF   7E,W
0357:  ADDWF  7A,F
0358:  RRF    7A,F
0359:  RRF    77,F
035A:  RRF    79,F
035B:  RRF    78,F
035C:  DECFSZ 20,F
035D:  GOTO   34E
035E:  BCF    03.5
035F:  RETURN
0360:  CLRF   78
0361:  CLRF   79
0362:  CLRF   77
0363:  CLRF   7A
0364:  MOVF   7C,W
0365:  BTFSS  03.2
0366:  GOTO   36A
0367:  MOVF   7B,W
0368:  BTFSC  03.2
0369:  GOTO   384
036A:  MOVLW  10
036B:  MOVWF  7D
036C:  BCF    03.0
036D:  RLF    75,F
036E:  RLF    76,F
036F:  RLF    77,F
0370:  RLF    7A,F
0371:  MOVF   7C,W
0372:  SUBWF  7A,W
0373:  BTFSS  03.2
0374:  GOTO   377
0375:  MOVF   7B,W
0376:  SUBWF  77,W
0377:  BTFSS  03.0
0378:  GOTO   380
0379:  MOVF   7B,W
037A:  SUBWF  77,F
037B:  BTFSS  03.0
037C:  DECF   7A,F
037D:  MOVF   7C,W
037E:  SUBWF  7A,F
037F:  BSF    03.0
0380:  RLF    78,F
0381:  RLF    79,F
0382:  DECFSZ 7D,F
0383:  GOTO   36C
0384:  RETURN
*
0417:  MOVF   0B,W
0418:  MOVWF  7B
0419:  BCF    0B.7
041A:  BSF    03.5
041B:  BSF    03.6
041C:  BSF    0C.7
041D:  BSF    0C.0
041E:  NOP
041F:  NOP
0420:  BTFSS  7B.7
0421:  GOTO   427
0422:  BCF    03.5
0423:  BCF    03.6
0424:  BSF    0B.7
0425:  BSF    03.5
0426:  BSF    03.6
0427:  BTFSC  03.0
0428:  GOTO   450
0429:  BCF    03.5
042A:  MOVF   0C,W
042B:  ANDLW  7F
042C:  MOVWF  7B
042D:  MOVF   0D,W
042E:  MOVWF  7C
042F:  MOVF   0F,W
0430:  MOVWF  7D
0431:  MOVF   7B,W
0432:  BSF    03.5
0433:  BCF    03.6
0434:  MOVWF  27
0435:  BCF    03.5
0436:  CALL   210
0437:  MOVF   7C,W
0438:  BSF    03.6
0439:  MOVWF  0D
043A:  MOVF   7D,W
043B:  MOVWF  0F
043C:  BCF    03.6
043D:  MOVF   0B,W
043E:  MOVWF  7E
043F:  BCF    0B.7
0440:  BSF    03.5
0441:  BSF    03.6
0442:  BSF    0C.7
0443:  BSF    0C.0
0444:  NOP
0445:  NOP
0446:  BTFSS  7E.7
0447:  GOTO   44D
0448:  BCF    03.5
0449:  BCF    03.6
044A:  BSF    0B.7
044B:  BSF    03.5
044C:  BSF    03.6
044D:  DECFSZ 75,F
044E:  GOTO   450
044F:  GOTO   46E
0450:  BCF    03.5
0451:  RLF    0C,W
0452:  RLF    0E,W
0453:  ANDLW  7F
0454:  MOVWF  7B
0455:  MOVF   0D,W
0456:  MOVWF  7C
0457:  MOVF   0F,W
0458:  MOVWF  7D
0459:  MOVF   7B,W
045A:  BSF    03.5
045B:  BCF    03.6
045C:  MOVWF  27
045D:  BCF    03.5
045E:  CALL   210
045F:  MOVF   7C,W
0460:  BSF    03.6
0461:  MOVWF  0D
0462:  MOVF   7D,W
0463:  MOVWF  0F
0464:  INCF   0D,F
0465:  BTFSC  03.2
0466:  INCF   0F,F
0467:  BCF    03.0
0468:  DECFSZ 75,F
0469:  GOTO   46B
046A:  GOTO   46D
046B:  BCF    03.6
046C:  GOTO   417
046D:  BSF    03.5
046E:  BCF    03.5
046F:  BCF    03.6
0470:  RETURN
0471:  BSF    03.5
0472:  MOVF   21,W
0473:  CLRF   78
0474:  SUBWF  20,W
0475:  BTFSC  03.0
0476:  GOTO   47A
0477:  MOVF   20,W
0478:  MOVWF  77
0479:  GOTO   486
047A:  CLRF   77
047B:  MOVLW  08
047C:  MOVWF  22
047D:  RLF    20,F
047E:  RLF    77,F
047F:  MOVF   21,W
0480:  SUBWF  77,W
0481:  BTFSC  03.0
0482:  MOVWF  77
0483:  RLF    78,F
0484:  DECFSZ 22,F
0485:  GOTO   47D
0486:  BCF    03.5
0487:  RETURN
0488:  BSF    03.5
0489:  CLRF   26
048A:  MOVF   04,W
048B:  MOVWF  25
048C:  BCF    26.0
048D:  BTFSC  03.7
048E:  BSF    26.0
048F:  BTFSS  76.7
0490:  GOTO   499
0491:  BSF    25.7
0492:  BTFSS  25.4
0493:  INCF   25,F
0494:  COMF   75,F
0495:  COMF   76,F
0496:  INCF   75,F
0497:  BTFSC  03.2
0498:  INCF   76,F
0499:  SWAPF  76,W
049A:  IORLW  F0
049B:  MOVWF  21
049C:  ADDWF  21,F
049D:  ADDLW  E2
049E:  MOVWF  22
049F:  ADDLW  32
04A0:  MOVWF  24
04A1:  MOVF   76,W
04A2:  ANDLW  0F
04A3:  ADDWF  22,F
04A4:  ADDWF  22,F
04A5:  ADDWF  24,F
04A6:  ADDLW  E9
04A7:  MOVWF  23
04A8:  ADDWF  23,F
04A9:  ADDWF  23,F
04AA:  SWAPF  75,W
04AB:  ANDLW  0F
04AC:  ADDWF  23,F
04AD:  ADDWF  24,F
04AE:  RLF    23,F
04AF:  RLF    24,F
04B0:  COMF   24,F
04B1:  RLF    24,F
04B2:  MOVF   75,W
04B3:  ANDLW  0F
04B4:  ADDWF  24,F
04B5:  RLF    21,F
04B6:  MOVLW  07
04B7:  MOVWF  20
04B8:  MOVLW  0A
04B9:  ADDWF  24,F
04BA:  DECF   23,F
04BB:  BTFSS  03.0
04BC:  GOTO   4B9
04BD:  ADDWF  23,F
04BE:  DECF   22,F
04BF:  BTFSS  03.0
04C0:  GOTO   4BD
04C1:  ADDWF  22,F
04C2:  DECF   21,F
04C3:  BTFSS  03.0
04C4:  GOTO   4C1
04C5:  ADDWF  21,F
04C6:  DECF   20,F
04C7:  BTFSS  03.0
04C8:  GOTO   4C5
04C9:  MOVLW  A0
04CA:  MOVWF  04
04CB:  BCF    03.7
04CC:  MOVLW  07
04CD:  ANDWF  25,W
04CE:  BCF    25.6
04CF:  DECF   04,F
04D0:  ANDWF  25,W
04D1:  BTFSS  03.2
04D2:  GOTO   4DA
04D3:  BTFSC  25.4
04D4:  INCF   04,F
04D5:  BTFSC  25.4
04D6:  GOTO   4DA
04D7:  MOVLW  20
04D8:  MOVWF  77
04D9:  GOTO   4F7
04DA:  ADDWF  04,F
04DB:  MOVLW  A4
04DC:  SUBWF  04,W
04DD:  BTFSC  03.2
04DE:  BSF    25.6
04DF:  MOVF   00,W
04E0:  MOVWF  77
04E1:  BTFSS  03.2
04E2:  GOTO   4EB
04E3:  BTFSC  25.6
04E4:  GOTO   4EB
04E5:  BTFSC  25.4
04E6:  GOTO   507
04E7:  BTFSC  25.3
04E8:  GOTO   4EB
04E9:  MOVLW  20
04EA:  GOTO   4F6
04EB:  BTFSS  25.7
04EC:  GOTO   4F3
04ED:  MOVLW  2D
04EE:  MOVWF  77
04EF:  DECF   04,F
04F0:  BCF    25.6
04F1:  BCF    25.7
04F2:  GOTO   4F7
04F3:  BSF    25.3
04F4:  BCF    25.4
04F5:  MOVLW  30
04F6:  ADDWF  77,F
04F7:  CLRF   76
04F8:  MOVF   04,W
04F9:  MOVWF  75
04FA:  BCF    76.0
04FB:  BTFSC  03.7
04FC:  BSF    76.0
04FD:  MOVF   77,W
04FE:  MOVWF  27
04FF:  BCF    03.5
0500:  CALL   210
0501:  MOVF   75,W
0502:  MOVWF  04
0503:  BCF    03.7
0504:  BTFSC  76.0
0505:  BSF    03.7
0506:  BSF    03.5
0507:  INCF   04,F
0508:  BTFSS  25.6
0509:  GOTO   4DB
050A:  BCF    03.5
050B:  RETURN
*
0529:  MOVLW  20
052A:  BTFSS  75.4
052B:  MOVLW  30
052C:  MOVWF  7B
052D:  MOVF   74,W
052E:  MOVWF  77
052F:  BTFSS  74.7
0530:  GOTO   539
0531:  COMF   77,F
0532:  INCF   77,F
0533:  MOVF   77,W
0534:  MOVWF  74
0535:  MOVLW  2D
0536:  MOVWF  7B
0537:  BSF    75.7
0538:  BSF    75.0
0539:  MOVF   74,W
053A:  BSF    03.5
053B:  MOVWF  20
053C:  MOVLW  64
053D:  MOVWF  21
053E:  BCF    03.5
053F:  CALL   471
0540:  MOVF   77,W
0541:  MOVWF  74
0542:  MOVLW  30
0543:  ADDWF  78,W
0544:  MOVWF  7C
0545:  MOVF   74,W
0546:  BSF    03.5
0547:  MOVWF  20
0548:  MOVLW  0A
0549:  MOVWF  21
054A:  BCF    03.5
054B:  CALL   471
054C:  MOVLW  30
054D:  ADDWF  77,W
054E:  MOVWF  7E
054F:  MOVLW  30
0550:  ADDWF  78,W
0551:  MOVWF  7D
0552:  MOVF   7B,W
0553:  MOVWF  77
0554:  MOVLW  30
0555:  SUBWF  7C,W
0556:  BTFSC  03.2
0557:  GOTO   55C
0558:  BSF    75.1
0559:  BTFSC  75.7
055A:  BSF    75.2
055B:  GOTO   570
055C:  MOVF   7B,W
055D:  MOVWF  7C
055E:  MOVLW  20
055F:  MOVWF  7B
0560:  MOVLW  30
0561:  SUBWF  7D,W
0562:  BTFSC  03.2
0563:  GOTO   568
0564:  BSF    75.0
0565:  BTFSC  75.7
0566:  BSF    75.1
0567:  GOTO   570
0568:  BTFSS  03.2
0569:  BSF    75.0
056A:  BTFSS  03.2
056B:  GOTO   570
056C:  MOVF   7C,W
056D:  MOVWF  7D
056E:  MOVLW  20
056F:  MOVWF  7C
0570:  BTFSC  75.2
0571:  GOTO   577
0572:  BTFSC  75.1
0573:  GOTO   57C
0574:  BTFSC  75.0
0575:  GOTO   581
0576:  GOTO   586
0577:  MOVF   7B,W
0578:  BSF    03.5
0579:  MOVWF  27
057A:  BCF    03.5
057B:  CALL   210
057C:  MOVF   7C,W
057D:  BSF    03.5
057E:  MOVWF  27
057F:  BCF    03.5
0580:  CALL   210
0581:  MOVF   7D,W
0582:  BSF    03.5
0583:  MOVWF  27
0584:  BCF    03.5
0585:  CALL   210
0586:  MOVF   7E,W
0587:  BSF    03.5
0588:  MOVWF  27
0589:  BCF    03.5
058A:  CALL   210
....................  
.................... #list 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEVICES                         */ 
.................... /********************************************************/ 
.................... #device ADC = 10 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM USES                            */ 
.................... /********************************************************/ 
.................... #use delay(clock=4M)  
*
0114:  MOVLW  A8
0115:  MOVWF  04
0116:  BCF    03.7
0117:  MOVF   00,W
0118:  BTFSC  03.2
0119:  GOTO   128
011A:  MOVLW  01
011B:  MOVWF  78
011C:  CLRF   77
011D:  DECFSZ 77,F
011E:  GOTO   11D
011F:  DECFSZ 78,F
0120:  GOTO   11C
0121:  MOVLW  4A
0122:  MOVWF  77
0123:  DECFSZ 77,F
0124:  GOTO   123
0125:  GOTO   126
0126:  DECFSZ 00,F
0127:  GOTO   11A
0128:  RETURN
.................... #use rs232(baud=9600,parity=N,uart1,bits=8) 
.................... #use fast_io(b) 
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INCLUDES                        */ 
.................... /********************************************************/ 
.................... #include <lcd.c>     
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0143:  MOVLW  0F
0144:  BSF    03.5
0145:  ANDWF  08,W
0146:  IORLW  F0
0147:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0148:  BCF    03.5
0149:  BSF    08.2
....................    delay_cycles(1); 
014A:  NOP
....................    lcd_output_enable(1); 
014B:  BSF    08.0
....................    delay_cycles(1); 
014C:  NOP
....................    high = lcd_read_nibble(); 
014D:  CALL   137
014E:  MOVF   78,W
014F:  BSF    03.5
0150:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0151:  BCF    03.5
0152:  BCF    08.0
....................    delay_cycles(1); 
0153:  NOP
....................    lcd_output_enable(1); 
0154:  BSF    08.0
....................    delay_us(1); 
0155:  NOP
....................    low = lcd_read_nibble(); 
0156:  CALL   137
0157:  MOVF   78,W
0158:  BSF    03.5
0159:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
015A:  BCF    03.5
015B:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
015C:  MOVLW  0F
015D:  BSF    03.5
015E:  ANDWF  08,W
015F:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0160:  SWAPF  2F,W
0161:  MOVWF  77
0162:  MOVLW  F0
0163:  ANDWF  77,F
0164:  MOVF   77,W
0165:  IORWF  2E,W
0166:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0137:  MOVF   08,W
0138:  MOVWF  77
0139:  SWAPF  08,W
013A:  ANDLW  0F
013B:  MOVWF  78
....................   #endif 
013C:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0129:  BSF    03.5
012A:  SWAPF  2F,W
012B:  ANDLW  F0
012C:  MOVWF  77
012D:  MOVLW  0F
012E:  BCF    03.5
012F:  ANDWF  08,W
0130:  IORWF  77,W
0131:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0132:  NOP
....................    lcd_output_enable(1); 
0133:  BSF    08.0
....................    delay_us(2); 
0134:  GOTO   135
....................    lcd_output_enable(0); 
0135:  BCF    08.0
0136:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
013D:  BSF    03.5
013E:  BCF    08.0
....................    lcd_rs_tris(); 
013F:  BCF    08.1
....................    lcd_rw_tris(); 
0140:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0141:  BCF    03.5
0142:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0167:  MOVF   78,W
0168:  MOVWF  2E
0169:  BTFSS  2E.7
016A:  GOTO   16D
016B:  BCF    03.5
016C:  GOTO   143
....................    lcd_output_rs(address); 
016D:  BTFSC  2C.0
016E:  GOTO   172
016F:  BCF    03.5
0170:  BCF    08.1
0171:  BSF    03.5
0172:  BTFSS  2C.0
0173:  GOTO   177
0174:  BCF    03.5
0175:  BSF    08.1
0176:  BSF    03.5
....................    delay_cycles(1); 
0177:  NOP
....................    lcd_output_rw(0); 
0178:  BCF    03.5
0179:  BCF    08.2
....................    delay_cycles(1); 
017A:  NOP
....................    lcd_output_enable(0); 
017B:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
017C:  BSF    03.5
017D:  SWAPF  2D,W
017E:  MOVWF  2E
017F:  MOVLW  0F
0180:  ANDWF  2E,F
0181:  MOVF   2E,W
0182:  MOVWF  2F
0183:  BCF    03.5
0184:  CALL   129
....................    lcd_send_nibble(n & 0xf); 
0185:  BSF    03.5
0186:  MOVF   2D,W
0187:  ANDLW  0F
0188:  MOVWF  2E
0189:  MOVWF  2F
018A:  BCF    03.5
018B:  CALL   129
018C:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
018D:  MOVLW  28
018E:  MOVWF  73
018F:  MOVLW  0C
0190:  MOVWF  74
0191:  MOVLW  01
0192:  MOVWF  75
0193:  MOVLW  06
0194:  MOVWF  76
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0195:  BCF    08.0
....................    lcd_output_rs(0); 
0196:  BCF    08.1
....................    lcd_output_rw(0); 
0197:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0198:  MOVLW  0F
0199:  BSF    03.5
019A:  ANDWF  08,W
019B:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
019C:  BCF    08.0
....................    lcd_rs_tris(); 
019D:  BCF    08.1
....................    lcd_rw_tris(); 
019E:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
019F:  MOVLW  0F
01A0:  MOVWF  28
01A1:  BCF    03.5
01A2:  CALL   114
....................    for(i=1;i<=3;++i) 
01A3:  MOVLW  01
01A4:  MOVWF  72
01A5:  MOVF   72,W
01A6:  SUBLW  03
01A7:  BTFSS  03.0
01A8:  GOTO   1B5
....................    { 
....................        lcd_send_nibble(3); 
01A9:  MOVLW  03
01AA:  BSF    03.5
01AB:  MOVWF  2F
01AC:  BCF    03.5
01AD:  CALL   129
....................        delay_ms(5); 
01AE:  MOVLW  05
01AF:  BSF    03.5
01B0:  MOVWF  28
01B1:  BCF    03.5
01B2:  CALL   114
01B3:  INCF   72,F
01B4:  GOTO   1A5
....................    } 
....................     
....................    lcd_send_nibble(2); 
01B5:  MOVLW  02
01B6:  BSF    03.5
01B7:  MOVWF  2F
01B8:  BCF    03.5
01B9:  CALL   129
....................    delay_ms(5); 
01BA:  MOVLW  05
01BB:  BSF    03.5
01BC:  MOVWF  28
01BD:  BCF    03.5
01BE:  CALL   114
....................    for(i=0;i<=3;++i) 
01BF:  CLRF   72
01C0:  MOVF   72,W
01C1:  SUBLW  03
01C2:  BTFSS  03.0
01C3:  GOTO   1D2
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01C4:  MOVLW  73
01C5:  ADDWF  72,W
01C6:  MOVWF  04
01C7:  BCF    03.7
01C8:  MOVF   00,W
01C9:  MOVWF  7B
01CA:  BSF    03.5
01CB:  CLRF   2C
01CC:  MOVF   7B,W
01CD:  MOVWF  2D
01CE:  BCF    03.5
01CF:  CALL   13D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01D0:  INCF   72,F
01D1:  GOTO   1C0
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
01FC:  BSF    03.5
01FD:  DECFSZ 29,W
01FE:  GOTO   200
01FF:  GOTO   203
....................       address=LCD_LINE_TWO; 
0200:  MOVLW  40
0201:  MOVWF  2A
0202:  GOTO   204
....................    else 
....................       address=0; 
0203:  CLRF   2A
....................       
....................    address+=x-1; 
0204:  MOVLW  01
0205:  SUBWF  28,W
0206:  ADDWF  2A,F
....................    lcd_send_byte(0,0x80|address); 
0207:  MOVF   2A,W
0208:  IORLW  80
0209:  MOVWF  2B
020A:  CLRF   2C
020B:  MOVF   2B,W
020C:  MOVWF  2D
020D:  BCF    03.5
020E:  CALL   13D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
020F:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0210:  BSF    03.5
0211:  MOVF   27,W
0212:  XORLW  07
0213:  BCF    03.5
0214:  BTFSC  03.2
0215:  GOTO   220
0216:  XORLW  0B
0217:  BTFSC  03.2
0218:  GOTO   227
0219:  XORLW  06
021A:  BTFSC  03.2
021B:  GOTO   233
021C:  XORLW  02
021D:  BTFSC  03.2
021E:  GOTO   23B
021F:  GOTO   242
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0220:  MOVLW  01
0221:  BSF    03.5
0222:  MOVWF  28
0223:  MOVWF  29
0224:  BCF    03.5
0225:  CALL   1FC
0226:  GOTO   249
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0227:  BSF    03.5
0228:  CLRF   2C
0229:  MOVLW  01
022A:  MOVWF  2D
022B:  BCF    03.5
022C:  CALL   13D
....................                      delay_ms(2); 
022D:  MOVLW  02
022E:  BSF    03.5
022F:  MOVWF  28
0230:  BCF    03.5
0231:  CALL   114
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0232:  GOTO   249
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0233:  MOVLW  01
0234:  BSF    03.5
0235:  MOVWF  28
0236:  MOVLW  02
0237:  MOVWF  29
0238:  BCF    03.5
0239:  CALL   1FC
023A:  GOTO   249
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
023B:  BSF    03.5
023C:  CLRF   2C
023D:  MOVLW  10
023E:  MOVWF  2D
023F:  BCF    03.5
0240:  CALL   13D
0241:  GOTO   249
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0242:  MOVLW  01
0243:  BSF    03.5
0244:  MOVWF  2C
0245:  MOVF   27,W
0246:  MOVWF  2D
0247:  BCF    03.5
0248:  CALL   13D
....................      #endif 
....................    } 
0249:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <math.h>        
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... //#include <2408.c>    will be unlocked in soooon :)                                    
.................... /********************************************************/ 
.................... /*               SYSTEM FUSES                           */ 
.................... /********************************************************/                                          
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM REGISTER                        */ 
.................... /********************************************************/ 
.................... #byte my_TIM0_OPTION_REG = 0x81  //Config register 
.................... #byte my_TIM0_MODULE_REG = 0x01  //8 bit timer value storage register 
.................... #byte my_INTCON_REG      = 0x0B  //General purpose interrupt register 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM STRUCTS                         */ 
.................... /********************************************************/ 
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;       //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM VARIABLES                       */ 
.................... /********************************************************/ 
.................... //-VAR-->CRITICAL PART 
.................... char readed_ID;      //Coming data will be When came from slave PIC 
.................... int8 systemLock;     //If the ID is valid, system open. Otherwise it will remain locked 
.................... int8 OPS_Status;     //55 means ops will be canceled, otherwise ops will be going on 
.................... char SelectionState; //Put 'X' if button_Select is HIGH, put empty character if button_RemoveSelect is HIGH 
....................  
.................... //-VAR-->Keeps Clients 
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;   // Will be used as given on the right --> MikroClient[ClientNumber]                                         
....................  
.................... //-VAR-->POTENTIOMETERS 
.................... int Index_OptionMenu; 
.................... int Index_TimeMoneyPreference; 
.................... int Index_PolishMililitre; 
.................... unsigned long int val_ADC_Pot_Surf; 
.................... unsigned long int val_ADC_Pot_Timer; 
.................... unsigned long int val_ADC_Pot_Polish; 
....................  
.................... //-VAR-->TIMER & ARRAYS 
.................... unsigned long int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};//Seconds 
*
0826:  MOVLW  14
0827:  BCF    03.6
0828:  MOVWF  49
0829:  CLRF   4A
082A:  MOVLW  28
082B:  MOVWF  4B
082C:  CLRF   4C
082D:  MOVLW  3C
082E:  MOVWF  4D
082F:  CLRF   4E
0830:  MOVLW  50
0831:  MOVWF  4F
0832:  CLRF   50
0833:  MOVLW  64
0834:  MOVWF  51
0835:  CLRF   52
0836:  MOVLW  78
0837:  MOVWF  53
0838:  CLRF   54
0839:  MOVLW  8C
083A:  MOVWF  55
083B:  CLRF   56
083C:  MOVLW  A0
083D:  MOVWF  57
083E:  CLRF   58
083F:  MOVLW  B4
0840:  MOVWF  59
0841:  CLRF   5A
0842:  MOVLW  C8
0843:  MOVWF  5B
0844:  CLRF   5C
0845:  MOVLW  DC
0846:  MOVWF  5D
0847:  CLRF   5E
0848:  MOVLW  F0
0849:  MOVWF  5F
084A:  CLRF   60
.................... unsigned long int timer0_isr_counter=0; 
.................... unsigned long int desired_value=0.0; 
.................... unsigned long int mililitrePolish[5] = {1,2,3,4,5}; // 1x100ml , 2x100ml, ... 5x100ml 
084B:  MOVLW  01
084C:  MOVWF  65
084D:  CLRF   66
084E:  MOVLW  02
084F:  MOVWF  67
0850:  CLRF   68
0851:  MOVLW  03
0852:  MOVWF  69
0853:  CLRF   6A
0854:  MOVLW  04
0855:  MOVWF  6B
0856:  CLRF   6C
0857:  MOVLW  05
0858:  MOVWF  6D
0859:  CLRF   6E
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEFINATION                      */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM INPUT & OUTPUT ======== */ 
.................... #define button_NEXT           pin_A3 
.................... #define button_BACK           pin_A4 
.................... #define button_Select         pin_A5 
.................... #define button_RemoveSelect   pin_C0 
.................... #define button_OPS_START      pin_C1 
.................... #define button_OPS_CANCEL     pin_B0 
....................  
....................  
.................... /********************************************************/ 
.................... /*               FUNCTIONS PROTOTYPES                   */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM CONFIGURATION FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_Init(void); 
.................... void trisSetting_Init(void); 
.................... void interruptSetting_Init(void); 
.................... void adcSetting_Init(void); 
....................  
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_lcd_IdleStatus(void); 
.................... void NavigateOperationMenu(void); 
.................... void NavigateTimeMoneyPreferenceMenu(void); 
.................... void NavigatePolishingMenu(void); 
....................  
.................... /* ======== UART SERIAL COM. FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_uart_CheckTheMessage(void); 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM MACROS                          */ 
.................... /********************************************************/ 
.................... /* ======== -BEGIN- SYSTEM POTENTIOMETER INDEXER -BEGIN- ======== */ 
.................... #define ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf)        \ 
....................    do{                                        \ 
....................           Index_OptionMenu = ((val_ADC_Pot_Surf*5)/1020);  \ 
....................           if(Index_OptionMenu >= 5){                       \ 
....................             Index_OptionMenu = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer)              \ 
....................    do{                                                                \ 
....................           Index_TimeMoneyPreference = ((val_ADC_Pot_Timer*12)/1020);  \ 
....................           if(Index_TimeMoneyPreference >= 12){                        \ 
....................              Index_TimeMoneyPreference = 11;                          \ 
....................           }                                                           \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofPolish(val_ADC_Pot_Polish)        \ 
....................    do{                                        \ 
....................           Index_PolishMililitre = ((val_ADC_Pot_Polish*5)/1020);  \ 
....................           if(Index_PolishMililitre >= 5){                       \ 
....................             Index_PolishMililitre = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
.................... /* ======== -END- SYSTEM POTENTIOMETER INDEXER -END- ======== */    
....................  
.................... /* ======== -BEGIN- SYSTEM TIMER TIME CONFIG -BEGIN- ======== */ 
....................  
.................... //--> Timer Desired Value Calculator  
.................... #define TimerScalingFactor ((1000.0) / 64.0) 
.................... #define SECOND_TO_ISR_COUNT(time_arr, Index_TimeMoneyPreference)                       \ 
....................    do{                                                                \ 
....................          desired_value = ((time_arr[Index_TimeMoneyPreference]) * TimerScalingFactor); \ 
....................    }while(0) 
....................  
.................... /* ======== -END- SYSTEM TIMER TIME CONFIG -END- ======== */ 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INTERRUPTS                      */ 
.................... /********************************************************/ 
.................... /* ======== -BEGIN- EXTERNAL INTERRUPT -BEGIN- ======== */ 
.................... #int_EXT 
.................... void system_isr_OperationCANCEL(){ 
....................   OPS_Status = 55;       //That's a password to break do-while's loops 
*
0056:  MOVLW  37
0057:  MOVWF  2D
....................   my_INTCON_REG &= 0XFD; //Clear External Interrupt Flag bit  
0058:  BCF    0B.1
.................... } 
.................... /* ======== -END- EXTERNAL INTERRUPT -END- ======== */ 
....................  
.................... /* ======== -BEGIN- TIMER_0 INTERRUPT -BEGIN- ======== */ 
0059:  BCF    0B.1
005A:  BCF    0A.3
005B:  BCF    0A.4
005C:  GOTO   02F
.................... #INT_TIMER0 
.................... void systemTimer0_isr(){ 
....................  
....................    timer0_isr_counter++; 
005D:  INCF   61,F
005E:  BTFSC  03.2
005F:  INCF   62,F
....................     
....................    // (64mS * desired_value) is for about desired_duration 
....................    if(timer0_isr_counter == desired_value){ 
0060:  MOVF   63,W
0061:  SUBWF  61,W
0062:  BTFSS  03.2
0063:  GOTO   06B
0064:  MOVF   64,W
0065:  SUBWF  62,W
0066:  BTFSS  03.2
0067:  GOTO   06B
....................       //Disable Timer0 Interrupt 
....................       my_INTCON_REG &= 0xDF; 
0068:  BCF    0B.5
....................       timer0_isr_counter=0;    
0069:  CLRF   62
006A:  CLRF   61
....................    } 
....................     
....................    // Clear timer0 overflow interrupt flag 
....................    my_INTCON_REG &= 0xFB;  
006B:  BCF    0B.2
006C:  BCF    0B.2
006D:  BCF    0A.3
006E:  BCF    0A.4
006F:  GOTO   02F
.................... } 
.................... /* ======== -END- TIMER_0 INTERRUPT -END- ======== */ 
....................  
....................  
....................  
.................... void main(void)  
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  BSF    03.5
0804:  BSF    03.6
0805:  BCF    07.3
0806:  MOVLW  19
0807:  BCF    03.6
0808:  MOVWF  19
0809:  MOVLW  A6
080A:  MOVWF  18
080B:  MOVLW  90
080C:  BCF    03.5
080D:  MOVWF  18
080E:  CLRF   62
080F:  CLRF   61
0810:  CLRF   64
0811:  CLRF   63
0812:  CLRF   70
0813:  CLRF   6F
0814:  MOVLW  FF
0815:  MOVWF  71
0816:  BSF    03.5
0817:  BSF    03.6
0818:  MOVF   09,W
0819:  ANDLW  C0
081A:  MOVWF  09
081B:  BCF    03.6
081C:  BCF    1F.4
081D:  BCF    1F.5
081E:  MOVLW  00
081F:  BSF    03.6
0820:  MOVWF  08
0821:  BCF    03.5
0822:  CLRF   07
0823:  CLRF   08
0824:  CLRF   09
0825:  BCF    03.7
.................... { 
....................    
....................    //-->System parameters will be initialized 
....................    SubSystem_Init(); 
*
085A:  BCF    0A.3
085B:  GOTO   18D
085C:  BSF    0A.3
....................        
....................    //-->Wait until unlock the system 
....................    do{ 
....................            SubSystem_lcd_IdleStatus();   //Greeting the customer 
085D:  BCF    0A.3
085E:  GOTO   29E
085F:  BSF    0A.3
....................             
....................            if(kbhit()) 
0860:  BTFSS  0C.5
0861:  GOTO   069
....................            { 
....................               readed_ID = getc(); 
0862:  BTFSS  0C.5
0863:  GOTO   062
0864:  MOVF   1A,W
0865:  MOVWF  2B
....................               SubSystem_uart_CheckTheMessage(); 
0866:  BCF    0A.3
0867:  GOTO   2F9
0868:  BSF    0A.3
....................            }       
....................          
....................     }while(systemLock!=1); 
0869:  DECFSZ 2C,W
086A:  GOTO   05D
....................   
....................     delay_ms(1000); 
086B:  MOVLW  04
086C:  MOVWF  73
086D:  MOVLW  FA
086E:  BSF    03.5
086F:  MOVWF  28
0870:  BCF    0A.3
0871:  BCF    03.5
0872:  CALL   114
0873:  BSF    0A.3
0874:  DECFSZ 73,F
0875:  GOTO   06D
....................    
.................... /** 
....................  * @brief Program navigates through option menus using a potentiometer and buttons. 
....................  *  
....................  * Reads potentiometer values to select options or adjust parameters like time and cost. 
....................  * The "NEXT" button moves forward or confirms selection, while the "BACK" button allows returning or resetting. 
....................  * Specific sub-menus handle time/money preferences and polishing settings, with double-clicks for confirmation  
....................  * and single clicks for resetting choices. 
....................  */ 
....................  
....................       do{ 
....................              //Start Of Conversation for ADC_Surf 
....................              set_adc_channel(0); 
0876:  MOVLW  00
0877:  MOVWF  78
0878:  MOVF   1F,W
0879:  ANDLW  C3
087A:  IORWF  78,W
087B:  MOVWF  1F
....................              //Provide sufficient acquisition time. 
....................              delay_us(20); 
087C:  MOVLW  06
087D:  MOVWF  77
087E:  DECFSZ 77,F
087F:  GOTO   07E
0880:  NOP
....................               
....................              //Get Surf_Pot ADC value(0-1024) 
....................              val_ADC_Pot_Surf = read_adc();   
0881:  BSF    1F.1
0882:  BTFSC  1F.1
0883:  GOTO   082
0884:  BSF    03.5
0885:  MOVF   1E,W
0886:  BCF    03.5
0887:  MOVWF  43
0888:  MOVF   1E,W
0889:  MOVWF  44
....................               
....................              //Convert Surf_Pot ADC value into the option menu index 
....................              ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf); 
088A:  MOVF   44,W
088B:  MOVWF  7C
088C:  MOVF   43,W
088D:  MOVWF  7B
088E:  CLRF   7E
088F:  MOVLW  05
0890:  MOVWF  7D
0891:  BCF    0A.3
0892:  CALL   349
0893:  BSF    0A.3
0894:  MOVF   79,W
0895:  MOVWF  74
0896:  MOVF   78,W
0897:  MOVWF  73
0898:  MOVF   74,W
0899:  MOVWF  76
089A:  MOVF   73,W
089B:  MOVWF  75
089C:  MOVLW  03
089D:  MOVWF  7C
089E:  MOVLW  FC
089F:  MOVWF  7B
08A0:  BCF    0A.3
08A1:  CALL   360
08A2:  BSF    0A.3
08A3:  MOVF   78,W
08A4:  MOVWF  40
08A5:  SUBLW  04
08A6:  BTFSC  03.0
08A7:  GOTO   0AA
08A8:  MOVLW  04
08A9:  MOVWF  40
....................              
....................              //Use index value to show selected option and other one 
....................              NavigateOperationMenu(); 
08AA:  BCF    0A.3
08AB:  GOTO   385
08AC:  BSF    0A.3
....................               
....................              //Clear selection 
....................              SelectionState = ' '; 
08AD:  MOVLW  20
08AE:  MOVWF  2E
....................               
....................                 //The client wants to see the next section based on the selected option 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu <= 2)) 
08AF:  BSF    03.5
08B0:  BSF    05.3
08B1:  BCF    03.5
08B2:  BTFSS  05.3
08B3:  GOTO   0F8
08B4:  MOVF   40,W
08B5:  SUBLW  02
08B6:  BTFSS  03.0
08B7:  GOTO   0F8
....................                 { 
....................        
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
08B8:  MOVLW  04
08B9:  MOVWF  78
08BA:  MOVF   1F,W
08BB:  ANDLW  C3
08BC:  IORWF  78,W
08BD:  MOVWF  1F
....................                               //Provide sufficient acquisition time. 
....................                               delay_us(20); 
08BE:  MOVLW  06
08BF:  MOVWF  77
08C0:  DECFSZ 77,F
08C1:  GOTO   0C0
08C2:  NOP
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_Timer = read_adc();  
08C3:  BSF    1F.1
08C4:  BTFSC  1F.1
08C5:  GOTO   0C4
08C6:  BSF    03.5
08C7:  MOVF   1E,W
08C8:  BCF    03.5
08C9:  MOVWF  45
08CA:  MOVF   1E,W
08CB:  MOVWF  46
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer); 
08CC:  MOVF   46,W
08CD:  MOVWF  7C
08CE:  MOVF   45,W
08CF:  MOVWF  7B
08D0:  CLRF   7E
08D1:  MOVLW  0C
08D2:  MOVWF  7D
08D3:  BCF    0A.3
08D4:  CALL   349
08D5:  BSF    0A.3
08D6:  MOVF   79,W
08D7:  MOVWF  74
08D8:  MOVF   78,W
08D9:  MOVWF  73
08DA:  MOVF   74,W
08DB:  MOVWF  76
08DC:  MOVF   73,W
08DD:  MOVWF  75
08DE:  MOVLW  03
08DF:  MOVWF  7C
08E0:  MOVLW  FC
08E1:  MOVWF  7B
08E2:  BCF    0A.3
08E3:  CALL   360
08E4:  BSF    0A.3
08E5:  MOVF   78,W
08E6:  MOVWF  41
08E7:  SUBLW  0B
08E8:  BTFSC  03.0
08E9:  GOTO   0EC
08EA:  MOVLW  0B
08EB:  MOVWF  41
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigateTimeMoneyPreferenceMenu(); 
08EC:  BCF    0A.3
08ED:  GOTO   50C
08EE:  BSF    0A.3
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
08EF:  BSF    03.5
08F0:  BSF    05.4
08F1:  BCF    03.5
08F2:  BTFSC  05.4
....................                                  break; 
08F3:  GOTO   0F8
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
08F4:  MOVF   2D,W
08F5:  SUBLW  37
08F6:  BTFSS  03.2
08F7:  GOTO   0B8
....................                 } 
....................                  
....................                  
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu == 3)){ 
08F8:  BSF    03.5
08F9:  BSF    05.3
08FA:  BCF    03.5
08FB:  BTFSS  05.3
08FC:  GOTO   13C
08FD:  MOVF   40,W
08FE:  SUBLW  03
08FF:  BTFSS  03.2
0900:  GOTO   13C
....................     
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
0901:  MOVLW  04
0902:  MOVWF  78
0903:  MOVF   1F,W
0904:  ANDLW  C3
0905:  IORWF  78,W
0906:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                                
....................                               val_ADC_Pot_Polish = read_adc();  
0907:  BSF    1F.1
0908:  BTFSC  1F.1
0909:  GOTO   108
090A:  BSF    03.5
090B:  MOVF   1E,W
090C:  BCF    03.5
090D:  MOVWF  47
090E:  MOVF   1E,W
090F:  MOVWF  48
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofPolish(val_ADC_Pot_Polish); 
0910:  MOVF   48,W
0911:  MOVWF  7C
0912:  MOVF   47,W
0913:  MOVWF  7B
0914:  CLRF   7E
0915:  MOVLW  05
0916:  MOVWF  7D
0917:  BCF    0A.3
0918:  CALL   349
0919:  BSF    0A.3
091A:  MOVF   79,W
091B:  MOVWF  74
091C:  MOVF   78,W
091D:  MOVWF  73
091E:  MOVF   74,W
091F:  MOVWF  76
0920:  MOVF   73,W
0921:  MOVWF  75
0922:  MOVLW  03
0923:  MOVWF  7C
0924:  MOVLW  FC
0925:  MOVWF  7B
0926:  BCF    0A.3
0927:  CALL   360
0928:  BSF    0A.3
0929:  MOVF   78,W
092A:  MOVWF  42
092B:  SUBLW  04
092C:  BTFSC  03.0
092D:  GOTO   130
092E:  MOVLW  04
092F:  MOVWF  42
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigatePolishingMenu(); 
0930:  BCF    0A.3
0931:  GOTO   668
0932:  BSF    0A.3
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
0933:  BSF    03.5
0934:  BSF    05.4
0935:  BCF    03.5
0936:  BTFSC  05.4
....................                                  break; 
0937:  GOTO   13C
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
0938:  MOVF   2D,W
0939:  SUBLW  37
093A:  BTFSS  03.2
093B:  GOTO   101
....................                  
....................                 } 
....................                  
....................               
....................              delay_ms(100); 
093C:  MOVLW  64
093D:  BSF    03.5
093E:  MOVWF  28
093F:  BCF    0A.3
0940:  BCF    03.5
0941:  CALL   114
0942:  BSF    0A.3
....................    
....................       }while(OPS_Status!=55); 
0943:  MOVF   2D,W
0944:  SUBLW  37
0945:  BTFSS  03.2
0946:  GOTO   076
....................        
....................        
....................        
....................       printf(lcd_putc,"\f"); 
0947:  MOVLW  0C
0948:  BSF    03.5
0949:  MOVWF  27
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  CALL   210
094D:  BSF    0A.3
....................       lcd_gotoxy(2,1); 
094E:  MOVLW  02
094F:  BSF    03.5
0950:  MOVWF  28
0951:  MOVLW  01
0952:  MOVWF  29
0953:  BCF    0A.3
0954:  BCF    03.5
0955:  CALL   1FC
0956:  BSF    0A.3
....................       printf(lcd_putc,"CLOSING"); 
0957:  MOVLW  70
0958:  BSF    03.6
0959:  MOVWF  0D
095A:  MOVLW  00
095B:  MOVWF  0F
095C:  BCF    0A.3
095D:  BCF    03.6
095E:  CALL   24A
095F:  BSF    0A.3
....................       delay_ms(1000); 
0960:  MOVLW  04
0961:  MOVWF  73
0962:  MOVLW  FA
0963:  BSF    03.5
0964:  MOVWF  28
0965:  BCF    0A.3
0966:  BCF    03.5
0967:  CALL   114
0968:  BSF    0A.3
0969:  DECFSZ 73,F
096A:  GOTO   162
....................       printf(lcd_putc,"\f");   
096B:  MOVLW  0C
096C:  BSF    03.5
096D:  MOVWF  27
096E:  BCF    0A.3
096F:  BCF    03.5
0970:  CALL   210
0971:  BSF    0A.3
....................       lcd_gotoxy(1,1); 
0972:  MOVLW  01
0973:  BSF    03.5
0974:  MOVWF  28
0975:  MOVWF  29
0976:  BCF    0A.3
0977:  BCF    03.5
0978:  CALL   1FC
0979:  BSF    0A.3
....................       printf(lcd_putc, "Kopuk:%ld", MikroClient[ClientNumber].time_Foaming); 
097A:  RLF    3F,W
097B:  MOVWF  77
097C:  RLF    77,F
097D:  RLF    77,F
097E:  MOVLW  F8
097F:  ANDWF  77,F
0980:  MOVF   77,W
0981:  ADDLW  2F
0982:  MOVWF  04
0983:  BCF    03.7
0984:  INCF   04,F
0985:  MOVF   00,W
0986:  MOVWF  74
0987:  DECF   04,F
0988:  MOVF   00,W
0989:  MOVWF  73
098A:  MOVLW  74
098B:  BSF    03.6
098C:  MOVWF  0D
098D:  MOVLW  00
098E:  MOVWF  0F
098F:  BCF    03.0
0990:  MOVLW  06
0991:  MOVWF  75
0992:  BCF    0A.3
0993:  BCF    03.6
0994:  CALL   417
0995:  BSF    0A.3
0996:  MOVLW  10
0997:  MOVWF  04
0998:  MOVF   74,W
0999:  MOVWF  76
099A:  MOVF   73,W
099B:  MOVWF  75
099C:  BCF    0A.3
099D:  CALL   488
099E:  BSF    0A.3
....................       lcd_gotoxy(1,2); 
099F:  MOVLW  01
09A0:  BSF    03.5
09A1:  MOVWF  28
09A2:  MOVLW  02
09A3:  MOVWF  29
09A4:  BCF    0A.3
09A5:  BCF    03.5
09A6:  CALL   1FC
09A7:  BSF    0A.3
....................       printf(lcd_putc, "Su::%ld",MikroClient[ClientNumber].time_Washing); 
09A8:  RLF    3F,W
09A9:  MOVWF  77
09AA:  RLF    77,F
09AB:  RLF    77,F
09AC:  MOVLW  F8
09AD:  ANDWF  77,F
09AE:  MOVF   77,W
09AF:  ADDLW  02
09B0:  ADDLW  2F
09B1:  MOVWF  04
09B2:  BCF    03.7
09B3:  INCF   04,F
09B4:  MOVF   00,W
09B5:  MOVWF  74
09B6:  DECF   04,F
09B7:  MOVF   00,W
09B8:  MOVWF  73
09B9:  MOVLW  79
09BA:  BSF    03.6
09BB:  MOVWF  0D
09BC:  MOVLW  00
09BD:  MOVWF  0F
09BE:  BCF    03.0
09BF:  MOVLW  04
09C0:  MOVWF  75
09C1:  BCF    0A.3
09C2:  BCF    03.6
09C3:  CALL   417
09C4:  BSF    0A.3
09C5:  MOVLW  10
09C6:  MOVWF  04
09C7:  MOVF   74,W
09C8:  MOVWF  76
09C9:  MOVF   73,W
09CA:  MOVWF  75
09CB:  BCF    0A.3
09CC:  CALL   488
09CD:  BSF    0A.3
....................       delay_ms(2000); 
09CE:  MOVLW  08
09CF:  MOVWF  73
09D0:  MOVLW  FA
09D1:  BSF    03.5
09D2:  MOVWF  28
09D3:  BCF    0A.3
09D4:  BCF    03.5
09D5:  CALL   114
09D6:  BSF    0A.3
09D7:  DECFSZ 73,F
09D8:  GOTO   1D0
....................       printf(lcd_putc,"\f");   
09D9:  MOVLW  0C
09DA:  BSF    03.5
09DB:  MOVWF  27
09DC:  BCF    0A.3
09DD:  BCF    03.5
09DE:  CALL   210
09DF:  BSF    0A.3
....................       lcd_gotoxy(1,1); 
09E0:  MOVLW  01
09E1:  BSF    03.5
09E2:  MOVWF  28
09E3:  MOVWF  29
09E4:  BCF    0A.3
09E5:  BCF    03.5
09E6:  CALL   1FC
09E7:  BSF    0A.3
....................       printf(lcd_putc, "Hava:%ld", MikroClient[ClientNumber].time_Ventilation); 
09E8:  RLF    3F,W
09E9:  MOVWF  77
09EA:  RLF    77,F
09EB:  RLF    77,F
09EC:  MOVLW  F8
09ED:  ANDWF  77,F
09EE:  MOVF   77,W
09EF:  ADDLW  04
09F0:  ADDLW  2F
09F1:  MOVWF  04
09F2:  BCF    03.7
09F3:  INCF   04,F
09F4:  MOVF   00,W
09F5:  MOVWF  74
09F6:  DECF   04,F
09F7:  MOVF   00,W
09F8:  MOVWF  73
09F9:  MOVLW  7D
09FA:  BSF    03.6
09FB:  MOVWF  0D
09FC:  MOVLW  00
09FD:  MOVWF  0F
09FE:  BCF    03.0
09FF:  MOVLW  05
0A00:  MOVWF  75
0A01:  BCF    0A.3
0A02:  BCF    03.6
0A03:  CALL   417
0A04:  BSF    0A.3
0A05:  MOVLW  10
0A06:  MOVWF  04
0A07:  MOVF   74,W
0A08:  MOVWF  76
0A09:  MOVF   73,W
0A0A:  MOVWF  75
0A0B:  BCF    0A.3
0A0C:  CALL   488
0A0D:  BSF    0A.3
....................       lcd_gotoxy(1,2); 
0A0E:  MOVLW  01
0A0F:  BSF    03.5
0A10:  MOVWF  28
0A11:  MOVLW  02
0A12:  MOVWF  29
0A13:  BCF    0A.3
0A14:  BCF    03.5
0A15:  CALL   1FC
0A16:  BSF    0A.3
....................        printf(lcd_putc, "Cila:%ld", MikroClient[ClientNumber].mililitre_Polishing); 
0A17:  RLF    3F,W
0A18:  MOVWF  77
0A19:  RLF    77,F
0A1A:  RLF    77,F
0A1B:  MOVLW  F8
0A1C:  ANDWF  77,F
0A1D:  MOVF   77,W
0A1E:  ADDLW  06
0A1F:  ADDLW  2F
0A20:  MOVWF  04
0A21:  BCF    03.7
0A22:  INCF   04,F
0A23:  MOVF   00,W
0A24:  MOVWF  74
0A25:  DECF   04,F
0A26:  MOVF   00,W
0A27:  MOVWF  73
0A28:  MOVLW  82
0A29:  BSF    03.6
0A2A:  MOVWF  0D
0A2B:  MOVLW  00
0A2C:  MOVWF  0F
0A2D:  BCF    03.0
0A2E:  MOVLW  05
0A2F:  MOVWF  75
0A30:  BCF    0A.3
0A31:  BCF    03.6
0A32:  CALL   417
0A33:  BSF    0A.3
0A34:  MOVLW  10
0A35:  MOVWF  04
0A36:  MOVF   74,W
0A37:  MOVWF  76
0A38:  MOVF   73,W
0A39:  MOVWF  75
0A3A:  BCF    0A.3
0A3B:  CALL   488
0A3C:  BSF    0A.3
....................       delay_ms(2000); 
0A3D:  MOVLW  08
0A3E:  MOVWF  73
0A3F:  MOVLW  FA
0A40:  BSF    03.5
0A41:  MOVWF  28
0A42:  BCF    0A.3
0A43:  BCF    03.5
0A44:  CALL   114
0A45:  BSF    0A.3
0A46:  DECFSZ 73,F
0A47:  GOTO   23F
....................        
....................     while(1) 
....................     { 
0A48:  GOTO   248
....................      
....................     
....................     
....................     } 
....................   
....................   
.................... } 
....................  
0A49:  SLEEP
....................  
.................... /* ======== -BEGIN- SYSTEM CONFIGURATION FUNCTIONS -BEGIN- ======== */ 
.................... //Function-1 
.................... void SubSystem_Init(void){ 
....................  lcd_init(); 
....................  trisSetting_Init(); 
....................  interruptSetting_Init(); 
....................  adcSetting_Init(); 
*
01F9:  BSF    0A.3
01FA:  BCF    0A.4
01FB:  GOTO   05C (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void trisSetting_Init(){ 
....................    set_tris_b(0x01); 
*
01D2:  MOVLW  01
01D3:  BSF    03.5
01D4:  MOVWF  06
.................... } 
....................  
.................... //Function-3 
.................... void interruptSetting_Init(){ 
.................... //---> OPERATION CANCEL BUTTON CONFIGURATION  <---// 
....................  
....................         //Interrupt on rising edge of INT pin  
....................         my_TIM0_OPTION_REG |= 0x40; 
01D5:  BSF    01.6
....................         //External Interrupt Enable &  Global Interrupt Enable  
....................         my_INTCON_REG |= 0x90;  
01D6:  MOVLW  90
01D7:  BCF    03.5
01D8:  IORWF  0B,F
....................       
.................... //---> TIMER & INTERRUPT CONFIGURATION  <---// 
....................       
....................         // T(overflow) = InstructionTime*PSC*(256-TIM0_val) 
....................         //        64mS = 1uS * 256 * (256-56) 
....................         my_TIM0_OPTION_REG &= 0xC7 ; 
01D9:  MOVLW  C7
01DA:  BSF    03.5
01DB:  ANDWF  01,F
....................         my_TIM0_MODULE_REG = 56; 
01DC:  MOVLW  38
01DD:  BCF    03.5
01DE:  MOVWF  01
....................         // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................         // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................         my_INTCON_REG |= 0xA0;  
01DF:  MOVLW  A0
01E0:  IORWF  0B,F
.................... } 
....................  
.................... //Function-4 
.................... void adcSetting_Init(){ 
....................      //-CONFIG--> Surfing Potentiometer & Timer Potentiometer 
....................         setup_adc_ports(sAN0|sAN1); 
01E1:  BSF    03.5
01E2:  BSF    03.6
01E3:  MOVF   09,W
01E4:  ANDLW  C0
01E5:  MOVWF  09
01E6:  BCF    03.6
01E7:  BCF    1F.4
01E8:  BCF    1F.5
01E9:  MOVLW  03
01EA:  BSF    03.6
01EB:  MOVWF  08
....................         setup_adc(adc_clock_div_32); 
01EC:  BCF    03.5
01ED:  BCF    03.6
01EE:  BCF    1F.6
01EF:  BSF    1F.7
01F0:  BSF    03.5
01F1:  BSF    1F.7
01F2:  BCF    03.5
01F3:  BSF    1F.0
....................         delay_us(20); 
01F4:  MOVLW  06
01F5:  MOVWF  77
01F6:  DECFSZ 77,F
01F7:  GOTO   1F6
01F8:  NOP
....................         
....................      //-CONFIG--> Process Intensity Potentiometer 
.................... } 
....................  
.................... /* ======== -END- SYSTEM CONFIGURATION FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- LCD SCREEN FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief :It sequentially displays a welcome message and  
....................  *        prompts the user to present their ID card. 
....................  */ 
.................... void SubSystem_lcd_IdleStatus(void){ 
....................       printf(lcd_putc,"\f"); 
*
029E:  MOVLW  0C
029F:  BSF    03.5
02A0:  MOVWF  27
02A1:  BCF    03.5
02A2:  CALL   210
....................       lcd_gotoxy(4,1); 
02A3:  MOVLW  04
02A4:  BSF    03.5
02A5:  MOVWF  28
02A6:  MOVLW  01
02A7:  MOVWF  29
02A8:  BCF    03.5
02A9:  CALL   1FC
....................       printf(lcd_putc,"Mikroleum'a"); 
02AA:  MOVLW  87
02AB:  BSF    03.6
02AC:  MOVWF  0D
02AD:  MOVLW  00
02AE:  MOVWF  0F
02AF:  BCF    03.6
02B0:  CALL   24A
....................       lcd_gotoxy(4,2); 
02B1:  MOVLW  04
02B2:  BSF    03.5
02B3:  MOVWF  28
02B4:  MOVLW  02
02B5:  MOVWF  29
02B6:  BCF    03.5
02B7:  CALL   1FC
....................       printf(lcd_putc,"Hosgeldiniz"); 
02B8:  MOVLW  8D
02B9:  BSF    03.6
02BA:  MOVWF  0D
02BB:  MOVLW  00
02BC:  MOVWF  0F
02BD:  BCF    03.6
02BE:  CALL   24A
....................       delay_ms(500); 
02BF:  MOVLW  02
02C0:  MOVWF  73
02C1:  MOVLW  FA
02C2:  BSF    03.5
02C3:  MOVWF  28
02C4:  BCF    03.5
02C5:  CALL   114
02C6:  DECFSZ 73,F
02C7:  GOTO   2C1
....................       printf(lcd_putc,"\f"); 
02C8:  MOVLW  0C
02C9:  BSF    03.5
02CA:  MOVWF  27
02CB:  BCF    03.5
02CC:  CALL   210
....................        
....................       lcd_gotoxy(1,1); 
02CD:  MOVLW  01
02CE:  BSF    03.5
02CF:  MOVWF  28
02D0:  MOVWF  29
02D1:  BCF    03.5
02D2:  CALL   1FC
....................       printf(lcd_putc,"Lutfen ID Karti"); 
02D3:  MOVLW  93
02D4:  BSF    03.6
02D5:  MOVWF  0D
02D6:  MOVLW  00
02D7:  MOVWF  0F
02D8:  BCF    03.6
02D9:  CALL   24A
....................       lcd_gotoxy(4,2); 
02DA:  MOVLW  04
02DB:  BSF    03.5
02DC:  MOVWF  28
02DD:  MOVLW  02
02DE:  MOVWF  29
02DF:  BCF    03.5
02E0:  CALL   1FC
....................       printf(lcd_putc,"Gosteriniz"); 
02E1:  MOVLW  9B
02E2:  BSF    03.6
02E3:  MOVWF  0D
02E4:  MOVLW  00
02E5:  MOVWF  0F
02E6:  BCF    03.6
02E7:  CALL   24A
....................       delay_ms(500); 
02E8:  MOVLW  02
02E9:  MOVWF  73
02EA:  MOVLW  FA
02EB:  BSF    03.5
02EC:  MOVWF  28
02ED:  BCF    03.5
02EE:  CALL   114
02EF:  DECFSZ 73,F
02F0:  GOTO   2EA
....................       printf(lcd_putc,"\f"); 
02F1:  MOVLW  0C
02F2:  BSF    03.5
02F3:  MOVWF  27
02F4:  BCF    03.5
02F5:  CALL   210
02F6:  BSF    0A.3
02F7:  BCF    0A.4
02F8:  GOTO   05F (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void NavigateOperationMenu(void){ 
....................    printf(lcd_putc, "\f"); // LCD'yi temizle 
*
0385:  MOVLW  0C
0386:  BSF    03.5
0387:  MOVWF  27
0388:  BCF    03.5
0389:  CALL   210
....................  
....................     // 1. Seçenek 
....................     if (Index_OptionMenu == 0) { 
038A:  MOVF   40,F
038B:  BTFSS  03.2
038C:  GOTO   3A8
....................         lcd_gotoxy(1, 1); 
038D:  MOVLW  01
038E:  BSF    03.5
038F:  MOVWF  28
0390:  MOVWF  29
0391:  BCF    03.5
0392:  CALL   1FC
....................         printf(lcd_putc, "1-Kopuk Islem <-"); 
0393:  MOVLW  A1
0394:  BSF    03.6
0395:  MOVWF  0D
0396:  MOVLW  00
0397:  MOVWF  0F
0398:  BCF    03.6
0399:  CALL   24A
....................         lcd_gotoxy(1, 2); 
039A:  MOVLW  01
039B:  BSF    03.5
039C:  MOVWF  28
039D:  MOVLW  02
039E:  MOVWF  29
039F:  BCF    03.5
03A0:  CALL   1FC
....................         printf(lcd_putc, "2-Su Islem");    
03A1:  MOVLW  AA
03A2:  BSF    03.6
03A3:  MOVWF  0D
03A4:  MOVLW  00
03A5:  MOVWF  0F
03A6:  BCF    03.6
03A7:  CALL   24A
....................     }  
....................  
....................     // 2. Seçenek 
....................     if (Index_OptionMenu == 1) { 
03A8:  DECFSZ 40,W
03A9:  GOTO   3C5
....................         lcd_gotoxy(1, 1); 
03AA:  MOVLW  01
03AB:  BSF    03.5
03AC:  MOVWF  28
03AD:  MOVWF  29
03AE:  BCF    03.5
03AF:  CALL   1FC
....................         printf(lcd_putc, "2-Su Islem <-"); 
03B0:  MOVLW  B0
03B1:  BSF    03.6
03B2:  MOVWF  0D
03B3:  MOVLW  00
03B4:  MOVWF  0F
03B5:  BCF    03.6
03B6:  CALL   24A
....................         lcd_gotoxy(1, 2); 
03B7:  MOVLW  01
03B8:  BSF    03.5
03B9:  MOVWF  28
03BA:  MOVLW  02
03BB:  MOVWF  29
03BC:  BCF    03.5
03BD:  CALL   1FC
....................         printf(lcd_putc, "3-Hava Islem");        
03BE:  MOVLW  B7
03BF:  BSF    03.6
03C0:  MOVWF  0D
03C1:  MOVLW  00
03C2:  MOVWF  0F
03C3:  BCF    03.6
03C4:  CALL   24A
....................     } 
....................      
....................     // 3. Seçenek 
....................         if (Index_OptionMenu == 2) { 
03C5:  MOVF   40,W
03C6:  SUBLW  02
03C7:  BTFSS  03.2
03C8:  GOTO   3E4
....................         lcd_gotoxy(1, 1); 
03C9:  MOVLW  01
03CA:  BSF    03.5
03CB:  MOVWF  28
03CC:  MOVWF  29
03CD:  BCF    03.5
03CE:  CALL   1FC
....................         printf(lcd_putc, "3-Hava Islem <-"); 
03CF:  MOVLW  BE
03D0:  BSF    03.6
03D1:  MOVWF  0D
03D2:  MOVLW  00
03D3:  MOVWF  0F
03D4:  BCF    03.6
03D5:  CALL   24A
....................         lcd_gotoxy(1, 2); 
03D6:  MOVLW  01
03D7:  BSF    03.5
03D8:  MOVWF  28
03D9:  MOVLW  02
03DA:  MOVWF  29
03DB:  BCF    03.5
03DC:  CALL   1FC
....................         printf(lcd_putc, "4-Cila Islem");    
03DD:  MOVLW  C6
03DE:  BSF    03.6
03DF:  MOVWF  0D
03E0:  MOVLW  00
03E1:  MOVWF  0F
03E2:  BCF    03.6
03E3:  CALL   24A
....................     }  
....................  
....................     // 4. Seçenek 
....................     if (Index_OptionMenu == 3) { 
03E4:  MOVF   40,W
03E5:  SUBLW  03
03E6:  BTFSS  03.2
03E7:  GOTO   403
....................         lcd_gotoxy(1, 1); 
03E8:  MOVLW  01
03E9:  BSF    03.5
03EA:  MOVWF  28
03EB:  MOVWF  29
03EC:  BCF    03.5
03ED:  CALL   1FC
....................         printf(lcd_putc, "4-Cila Islem <-"); 
03EE:  MOVLW  CD
03EF:  BSF    03.6
03F0:  MOVWF  0D
03F1:  MOVLW  00
03F2:  MOVWF  0F
03F3:  BCF    03.6
03F4:  CALL   24A
....................         lcd_gotoxy(1, 2); 
03F5:  MOVLW  01
03F6:  BSF    03.5
03F7:  MOVWF  28
03F8:  MOVLW  02
03F9:  MOVWF  29
03FA:  BCF    03.5
03FB:  CALL   1FC
....................         printf(lcd_putc, "5-Kayit Islem");     
03FC:  MOVLW  D5
03FD:  BSF    03.6
03FE:  MOVWF  0D
03FF:  MOVLW  00
0400:  MOVWF  0F
0401:  BCF    03.6
0402:  CALL   24A
....................     } 
....................      
....................     // 5. Seçenek 
....................     if (Index_OptionMenu == 4) { 
0403:  MOVF   40,W
0404:  SUBLW  04
0405:  BTFSS  03.2
0406:  GOTO   414
....................         lcd_gotoxy(1, 1); 
0407:  MOVLW  01
0408:  BSF    03.5
0409:  MOVWF  28
040A:  MOVWF  29
040B:  BCF    03.5
040C:  CALL   1FC
....................         printf(lcd_putc, "5-Kayit Islem <-");  
040D:  MOVLW  DC
040E:  BSF    03.6
040F:  MOVWF  0D
0410:  MOVLW  00
0411:  MOVWF  0F
0412:  BCF    03.6
0413:  CALL   24A
....................     } 
0414:  BSF    0A.3
0415:  BCF    0A.4
0416:  GOTO   0AC (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Function-3 
.................... void NavigateTimeMoneyPreferenceMenu(void){ 
....................     
....................    printf(lcd_putc, "\f");  
*
050C:  MOVLW  0C
050D:  BSF    03.5
050E:  MOVWF  27
050F:  BCF    03.5
0510:  CALL   210
....................    lcd_gotoxy(1,1); 
0511:  MOVLW  01
0512:  BSF    03.5
0513:  MOVWF  28
0514:  MOVWF  29
0515:  BCF    03.5
0516:  CALL   1FC
....................    printf(lcd_putc, "Ucret:%d tl",Index_TimeMoneyPreference*2+2); 
0517:  BCF    03.0
0518:  RLF    41,W
0519:  ADDLW  02
051A:  MOVWF  72
051B:  MOVLW  E5
051C:  BSF    03.6
051D:  MOVWF  0D
051E:  MOVLW  00
051F:  MOVWF  0F
0520:  BCF    03.0
0521:  MOVLW  06
0522:  MOVWF  75
0523:  BCF    03.6
0524:  CALL   417
0525:  MOVF   72,W
0526:  MOVWF  74
0527:  MOVLW  18
0528:  MOVWF  75
*
058B:  MOVLW  20
058C:  BSF    03.5
058D:  MOVWF  27
058E:  BCF    03.5
058F:  CALL   210
0590:  MOVLW  74
0591:  BSF    03.5
0592:  MOVWF  27
0593:  BCF    03.5
0594:  CALL   210
0595:  MOVLW  6C
0596:  BSF    03.5
0597:  MOVWF  27
0598:  BCF    03.5
0599:  CALL   210
....................    lcd_gotoxy(1,2); 
059A:  MOVLW  01
059B:  BSF    03.5
059C:  MOVWF  28
059D:  MOVLW  02
059E:  MOVWF  29
059F:  BCF    03.5
05A0:  CALL   1FC
....................    printf(lcd_putc, "Sure:%ld",time_arr[Index_TimeMoneyPreference]); 
05A1:  BCF    03.0
05A2:  RLF    41,W
05A3:  ADDLW  49
05A4:  MOVWF  04
05A5:  BCF    03.7
05A6:  INCF   04,F
05A7:  MOVF   00,W
05A8:  MOVWF  73
05A9:  DECF   04,F
05AA:  MOVF   00,W
05AB:  MOVWF  72
05AC:  MOVLW  EB
05AD:  BSF    03.6
05AE:  MOVWF  0D
05AF:  MOVLW  00
05B0:  MOVWF  0F
05B1:  BCF    03.0
05B2:  MOVLW  05
05B3:  MOVWF  75
05B4:  BCF    03.6
05B5:  CALL   417
05B6:  MOVLW  10
05B7:  MOVWF  04
05B8:  MOVF   73,W
05B9:  MOVWF  76
05BA:  MOVF   72,W
05BB:  MOVWF  75
05BC:  CALL   488
....................    lcd_gotoxy(10,2); 
05BD:  MOVLW  0A
05BE:  BSF    03.5
05BF:  MOVWF  28
05C0:  MOVLW  02
05C1:  MOVWF  29
05C2:  BCF    03.5
05C3:  CALL   1FC
....................    printf(lcd_putc, "Sec:"); 
05C4:  MOVLW  F0
05C5:  BSF    03.6
05C6:  MOVWF  0D
05C7:  MOVLW  00
05C8:  MOVWF  0F
05C9:  BCF    03.6
05CA:  CALL   24A
....................    lcd_gotoxy(14,2); 
05CB:  MOVLW  0E
05CC:  BSF    03.5
05CD:  MOVWF  28
05CE:  MOVLW  02
05CF:  MOVWF  29
05D0:  BCF    03.5
05D1:  CALL   1FC
....................    printf(lcd_putc, "%c",SelectionState); 
05D2:  MOVF   2E,W
05D3:  BSF    03.5
05D4:  MOVWF  27
05D5:  BCF    03.5
05D6:  CALL   210
....................     
....................     
....................    if(input(button_Select) == 1){ 
05D7:  BSF    03.5
05D8:  BSF    05.5
05D9:  BCF    03.5
05DA:  BTFSS  05.5
05DB:  GOTO   657
....................       SelectionState = 'X'; 
05DC:  MOVLW  58
05DD:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 0){ 
05DE:  MOVF   40,F
05DF:  BTFSS  03.2
05E0:  GOTO   606
....................          MikroClient[ClientNumber].time_Foaming = time_arr[Index_TimeMoneyPreference]; 
05E1:  RLF    3F,W
05E2:  MOVWF  77
05E3:  RLF    77,F
05E4:  RLF    77,F
05E5:  MOVLW  F8
05E6:  ANDWF  77,F
05E7:  MOVF   77,W
05E8:  ADDLW  2F
05E9:  MOVWF  78
05EA:  CLRF   7A
05EB:  BTFSC  03.0
05EC:  INCF   7A,F
05ED:  MOVF   7A,W
05EE:  MOVWF  73
05EF:  BCF    03.0
05F0:  RLF    41,W
05F1:  ADDLW  49
05F2:  MOVWF  04
05F3:  BCF    03.7
05F4:  INCF   04,F
05F5:  MOVF   00,W
05F6:  MOVWF  7A
05F7:  DECF   04,F
05F8:  MOVF   00,W
05F9:  MOVWF  74
05FA:  MOVF   78,W
05FB:  MOVWF  04
05FC:  BCF    03.7
05FD:  BTFSC  73.0
05FE:  BSF    03.7
05FF:  INCF   04,F
0600:  MOVF   7A,W
0601:  MOVWF  00
0602:  DECF   04,F
0603:  MOVF   74,W
0604:  MOVWF  00
....................       } 
0605:  GOTO   657
....................       else if(Index_OptionMenu == 1){ 
0606:  DECFSZ 40,W
0607:  GOTO   62E
....................          MikroClient[ClientNumber].time_Washing = time_arr[Index_TimeMoneyPreference]; 
0608:  RLF    3F,W
0609:  MOVWF  77
060A:  RLF    77,F
060B:  RLF    77,F
060C:  MOVLW  F8
060D:  ANDWF  77,F
060E:  MOVF   77,W
060F:  ADDLW  02
0610:  ADDLW  2F
0611:  MOVWF  78
0612:  CLRF   7A
0613:  BTFSC  03.0
0614:  INCF   7A,F
0615:  MOVF   7A,W
0616:  MOVWF  73
0617:  BCF    03.0
0618:  RLF    41,W
0619:  ADDLW  49
061A:  MOVWF  04
061B:  BCF    03.7
061C:  INCF   04,F
061D:  MOVF   00,W
061E:  MOVWF  7A
061F:  DECF   04,F
0620:  MOVF   00,W
0621:  MOVWF  74
0622:  MOVF   78,W
0623:  MOVWF  04
0624:  BCF    03.7
0625:  BTFSC  73.0
0626:  BSF    03.7
0627:  INCF   04,F
0628:  MOVF   7A,W
0629:  MOVWF  00
062A:  DECF   04,F
062B:  MOVF   74,W
062C:  MOVWF  00
....................       } 
062D:  GOTO   657
....................       else if(Index_OptionMenu == 2){ 
062E:  MOVF   40,W
062F:  SUBLW  02
0630:  BTFSS  03.2
0631:  GOTO   657
....................          MikroClient[ClientNumber].time_Ventilation = time_arr[Index_TimeMoneyPreference]; 
0632:  RLF    3F,W
0633:  MOVWF  77
0634:  RLF    77,F
0635:  RLF    77,F
0636:  MOVLW  F8
0637:  ANDWF  77,F
0638:  MOVF   77,W
0639:  ADDLW  04
063A:  ADDLW  2F
063B:  MOVWF  78
063C:  CLRF   7A
063D:  BTFSC  03.0
063E:  INCF   7A,F
063F:  MOVF   7A,W
0640:  MOVWF  73
0641:  BCF    03.0
0642:  RLF    41,W
0643:  ADDLW  49
0644:  MOVWF  04
0645:  BCF    03.7
0646:  INCF   04,F
0647:  MOVF   00,W
0648:  MOVWF  7A
0649:  DECF   04,F
064A:  MOVF   00,W
064B:  MOVWF  74
064C:  MOVF   78,W
064D:  MOVWF  04
064E:  BCF    03.7
064F:  BTFSC  73.0
0650:  BSF    03.7
0651:  INCF   04,F
0652:  MOVF   7A,W
0653:  MOVWF  00
0654:  DECF   04,F
0655:  MOVF   74,W
0656:  MOVWF  00
....................       } 
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
0657:  BSF    71.0
0658:  MOVF   71,W
0659:  BSF    03.5
065A:  MOVWF  07
065B:  BCF    03.5
065C:  BTFSS  07.0
065D:  GOTO   660
....................       SelectionState = ' '; 
065E:  MOVLW  20
065F:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
0660:  MOVLW  50
0661:  BSF    03.5
0662:  MOVWF  28
0663:  BCF    03.5
0664:  CALL   114
0665:  BSF    0A.3
0666:  BCF    0A.4
0667:  GOTO   0EE (RETURN)
.................... } 
....................  
.................... //Function-4 
.................... void NavigatePolishingMenu(){ 
....................    printf(lcd_putc, "\f");  
0668:  MOVLW  0C
0669:  BSF    03.5
066A:  MOVWF  27
066B:  BCF    03.5
066C:  CALL   210
....................    lcd_gotoxy(1,1); 
066D:  MOVLW  01
066E:  BSF    03.5
066F:  MOVWF  28
0670:  MOVWF  29
0671:  BCF    03.5
0672:  CALL   1FC
....................    printf(lcd_putc, "Ucret:%ld tl",(35*mililitrePolish[Index_PolishMililitre])); 
0673:  BCF    03.0
0674:  RLF    42,W
0675:  ADDLW  65
0676:  MOVWF  04
0677:  BCF    03.7
0678:  INCF   04,F
0679:  MOVF   00,W
067A:  MOVWF  7A
067B:  DECF   04,F
067C:  MOVF   00,W
067D:  MOVWF  73
067E:  MOVF   7A,W
067F:  MOVWF  74
0680:  CLRF   7C
0681:  MOVLW  23
0682:  MOVWF  7B
0683:  MOVF   7A,W
0684:  MOVWF  7E
0685:  MOVF   73,W
0686:  MOVWF  7D
0687:  CALL   349
0688:  MOVF   79,W
0689:  MOVWF  74
068A:  MOVF   78,W
068B:  MOVWF  73
068C:  MOVLW  F3
068D:  BSF    03.6
068E:  MOVWF  0D
068F:  MOVLW  00
0690:  MOVWF  0F
0691:  BCF    03.0
0692:  MOVLW  06
0693:  MOVWF  75
0694:  BCF    03.6
0695:  CALL   417
0696:  MOVLW  10
0697:  MOVWF  04
0698:  MOVF   74,W
0699:  MOVWF  76
069A:  MOVF   73,W
069B:  MOVWF  75
069C:  CALL   488
069D:  MOVLW  20
069E:  BSF    03.5
069F:  MOVWF  27
06A0:  BCF    03.5
06A1:  CALL   210
06A2:  MOVLW  74
06A3:  BSF    03.5
06A4:  MOVWF  27
06A5:  BCF    03.5
06A6:  CALL   210
06A7:  MOVLW  6C
06A8:  BSF    03.5
06A9:  MOVWF  27
06AA:  BCF    03.5
06AB:  CALL   210
....................    lcd_gotoxy(1,2); 
06AC:  MOVLW  01
06AD:  BSF    03.5
06AE:  MOVWF  28
06AF:  MOVLW  02
06B0:  MOVWF  29
06B1:  BCF    03.5
06B2:  CALL   1FC
....................    printf(lcd_putc, "Ml:%ld",(unsigned long int)(100*mililitrePolish[Index_PolishMililitre])); 
06B3:  BCF    03.0
06B4:  RLF    42,W
06B5:  ADDLW  65
06B6:  MOVWF  04
06B7:  BCF    03.7
06B8:  INCF   04,F
06B9:  MOVF   00,W
06BA:  MOVWF  7A
06BB:  DECF   04,F
06BC:  MOVF   00,W
06BD:  MOVWF  73
06BE:  MOVF   7A,W
06BF:  MOVWF  74
06C0:  CLRF   7C
06C1:  MOVLW  64
06C2:  MOVWF  7B
06C3:  MOVF   7A,W
06C4:  MOVWF  7E
06C5:  MOVF   73,W
06C6:  MOVWF  7D
06C7:  CALL   349
06C8:  MOVF   79,W
06C9:  MOVWF  74
06CA:  MOVF   78,W
06CB:  MOVWF  73
06CC:  MOVLW  4D
06CD:  BSF    03.5
06CE:  MOVWF  27
06CF:  BCF    03.5
06D0:  CALL   210
06D1:  MOVLW  6C
06D2:  BSF    03.5
06D3:  MOVWF  27
06D4:  BCF    03.5
06D5:  CALL   210
06D6:  MOVLW  3A
06D7:  BSF    03.5
06D8:  MOVWF  27
06D9:  BCF    03.5
06DA:  CALL   210
06DB:  MOVLW  10
06DC:  MOVWF  04
06DD:  MOVF   74,W
06DE:  MOVWF  76
06DF:  MOVF   73,W
06E0:  MOVWF  75
06E1:  CALL   488
....................    lcd_gotoxy(10,2); 
06E2:  MOVLW  0A
06E3:  BSF    03.5
06E4:  MOVWF  28
06E5:  MOVLW  02
06E6:  MOVWF  29
06E7:  BCF    03.5
06E8:  CALL   1FC
....................    printf(lcd_putc, "Sec:"); 
06E9:  MOVLW  FA
06EA:  BSF    03.6
06EB:  MOVWF  0D
06EC:  MOVLW  00
06ED:  MOVWF  0F
06EE:  BCF    03.6
06EF:  CALL   24A
....................    lcd_gotoxy(14,2); 
06F0:  MOVLW  0E
06F1:  BSF    03.5
06F2:  MOVWF  28
06F3:  MOVLW  02
06F4:  MOVWF  29
06F5:  BCF    03.5
06F6:  CALL   1FC
....................    printf(lcd_putc, "%c",SelectionState); 
06F7:  MOVF   2E,W
06F8:  BSF    03.5
06F9:  MOVWF  27
06FA:  BCF    03.5
06FB:  CALL   210
....................     
....................     
....................    if(input(button_Select) == 1){ 
06FC:  BSF    03.5
06FD:  BSF    05.5
06FE:  BCF    03.5
06FF:  BTFSS  05.5
0700:  GOTO   738
....................       SelectionState = 'X'; 
0701:  MOVLW  58
0702:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 3){ 
0703:  MOVF   40,W
0704:  SUBLW  03
0705:  BTFSS  03.2
0706:  GOTO   738
....................          MikroClient[ClientNumber].mililitre_Polishing = (100*mililitrePolish[Index_PolishMililitre]);  
0707:  RLF    3F,W
0708:  MOVWF  77
0709:  RLF    77,F
070A:  RLF    77,F
070B:  MOVLW  F8
070C:  ANDWF  77,F
070D:  MOVF   77,W
070E:  ADDLW  06
070F:  ADDLW  2F
0710:  MOVWF  78
0711:  CLRF   7A
0712:  BTFSC  03.0
0713:  INCF   7A,F
0714:  MOVF   78,W
0715:  MOVWF  73
0716:  MOVF   7A,W
0717:  MOVWF  74
0718:  BCF    03.0
0719:  RLF    42,W
071A:  ADDLW  65
071B:  MOVWF  04
071C:  BCF    03.7
071D:  INCF   04,F
071E:  MOVF   00,W
071F:  MOVWF  7A
0720:  DECF   04,F
0721:  MOVF   00,W
0722:  MOVWF  75
0723:  MOVF   7A,W
0724:  MOVWF  76
0725:  CLRF   7C
0726:  MOVLW  64
0727:  MOVWF  7B
0728:  MOVF   7A,W
0729:  MOVWF  7E
072A:  MOVF   75,W
072B:  MOVWF  7D
072C:  CALL   349
072D:  MOVF   73,W
072E:  MOVWF  04
072F:  BCF    03.7
0730:  BTFSC  74.0
0731:  BSF    03.7
0732:  INCF   04,F
0733:  MOVF   79,W
0734:  MOVWF  00
0735:  DECF   04,F
0736:  MOVF   78,W
0737:  MOVWF  00
....................       } 
....................        
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
0738:  BSF    71.0
0739:  MOVF   71,W
073A:  BSF    03.5
073B:  MOVWF  07
073C:  BCF    03.5
073D:  BTFSS  07.0
073E:  GOTO   741
....................       SelectionState = ' '; 
073F:  MOVLW  20
0740:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
0741:  MOVLW  50
0742:  BSF    03.5
0743:  MOVWF  28
0744:  BCF    03.5
0745:  CALL   114
0746:  BSF    0A.3
0747:  BCF    0A.4
0748:  GOTO   132 (RETURN)
.................... } 
.................... /* ======== -END- LCD SCREEN FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- UART PROTOCOL FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief : This function checks the `readed_ID` variable to determine  
....................  *         the action to take based on predefined identifiers. Depending on the identifier, 
....................  *         it displays a welcome message for specific users or sets the system to an idle state. 
....................  */ 
.................... void SubSystem_uart_CheckTheMessage(void){ 
....................     
....................    if(readed_ID == '+'){      //Mr. Selçuk's ID 
*
02F9:  MOVF   2B,W
02FA:  SUBLW  2B
02FB:  BTFSS  03.2
02FC:  GOTO   31D
....................       ClientNumber = 0;       //System works for Mr. Selcuk 
02FD:  CLRF   3F
....................       lcd_gotoxy(4,1); 
02FE:  MOVLW  04
02FF:  BSF    03.5
0300:  MOVWF  28
0301:  MOVLW  01
0302:  MOVWF  29
0303:  BCF    03.5
0304:  CALL   1FC
....................       printf(lcd_putc,"Hosgeldiniz"); 
0305:  MOVLW  FD
0306:  BSF    03.6
0307:  MOVWF  0D
0308:  MOVLW  00
0309:  MOVWF  0F
030A:  BCF    03.6
030B:  CALL   24A
....................       lcd_gotoxy(4,2); 
030C:  MOVLW  04
030D:  BSF    03.5
030E:  MOVWF  28
030F:  MOVLW  02
0310:  MOVWF  29
0311:  BCF    03.5
0312:  CALL   1FC
....................       printf(lcd_putc,"Selcuk Bey"); 
0313:  MOVLW  03
0314:  BSF    03.6
0315:  MOVWF  0D
0316:  MOVLW  01
0317:  MOVWF  0F
0318:  BCF    03.6
0319:  CALL   24A
....................       systemLock = 1; 
031A:  MOVLW  01
031B:  MOVWF  2C
....................    } 
031C:  GOTO   346
....................    else if(readed_ID == '*'){ //Mr. Emre's ID 
031D:  MOVF   2B,W
031E:  SUBLW  2A
031F:  BTFSS  03.2
0320:  GOTO   342
....................       ClientNumber = 1;       //System works for Mr. Emre 
0321:  MOVLW  01
0322:  MOVWF  3F
....................       lcd_gotoxy(4,1); 
0323:  MOVLW  04
0324:  BSF    03.5
0325:  MOVWF  28
0326:  MOVLW  01
0327:  MOVWF  29
0328:  BCF    03.5
0329:  CALL   1FC
....................       printf(lcd_putc,"Hosgeldiniz"); 
032A:  MOVLW  09
032B:  BSF    03.6
032C:  MOVWF  0D
032D:  MOVLW  01
032E:  MOVWF  0F
032F:  BCF    03.6
0330:  CALL   24A
....................       lcd_gotoxy(4,2); 
0331:  MOVLW  04
0332:  BSF    03.5
0333:  MOVWF  28
0334:  MOVLW  02
0335:  MOVWF  29
0336:  BCF    03.5
0337:  CALL   1FC
....................       printf(lcd_putc,"Emre Bey"); 
0338:  MOVLW  0F
0339:  BSF    03.6
033A:  MOVWF  0D
033B:  MOVLW  01
033C:  MOVWF  0F
033D:  BCF    03.6
033E:  CALL   24A
....................       systemLock = 1; 
033F:  MOVLW  01
0340:  MOVWF  2C
....................    } 
0341:  GOTO   346
....................    else if(readed_ID == '.'){ //Slave pic is idle status 
0342:  MOVF   2B,W
0343:  SUBLW  2E
0344:  BTFSC  03.2
....................        systemLock = 0; 
0345:  CLRF   2C
....................    } 
0346:  BSF    0A.3
0347:  BCF    0A.4
0348:  GOTO   068 (RETURN)
....................  
.................... } 
.................... /* ======== -END- UART PROTOCOL FUNCTIONS -END- ======== */ 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
