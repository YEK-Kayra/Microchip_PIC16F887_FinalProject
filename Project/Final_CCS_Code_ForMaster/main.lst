CCS PCM C Compiler, Version 5.049, 5967               29-Ara-24 01:16

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Final_CCS_Code_ForMaster\main.lst

               ROM used:   3516 words (43%)
                           Largest free fragment is 2048
               RAM used:   117 (32%) at main() level
                           138 (38%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   2FF
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   050
002B:  BTFSS  0B.5
002C:  GOTO   02F
002D:  BTFSC  0B.2
002E:  GOTO   053
002F:  MOVF   22,W
0030:  MOVWF  04
0031:  MOVF   23,W
0032:  MOVWF  77
0033:  MOVF   24,W
0034:  MOVWF  78
0035:  MOVF   25,W
0036:  MOVWF  79
0037:  MOVF   26,W
0038:  MOVWF  7A
0039:  MOVF   27,W
003A:  BSF    03.6
003B:  MOVWF  0D
003C:  BCF    03.6
003D:  MOVF   28,W
003E:  BSF    03.6
003F:  MOVWF  0F
0040:  BCF    03.6
0041:  MOVF   29,W
0042:  BSF    03.6
0043:  MOVWF  0C
0044:  BCF    03.6
0045:  MOVF   2A,W
0046:  BSF    03.6
0047:  MOVWF  0E
0048:  BCF    03.6
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   056
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   05D
.................... //Ister bisiklet ol ister tir, ne olursan ol yine gel 
....................  
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
008B:  DATA 4F,38
008C:  DATA 65,39
008D:  DATA E1,39
008E:  DATA F9,37
008F:  DATA 6E,00
0090:  DATA C2,30
0091:  DATA 73,36
0092:  DATA 61,3A
0093:  DATA 69,36
0094:  DATA E4,34
0095:  DATA 00,00
0096:  DATA CD,34
0097:  DATA 6B,39
0098:  DATA 6F,36
0099:  DATA E5,3A
009A:  DATA ED,13
009B:  DATA 61,00
009C:  DATA C8,37
009D:  DATA F3,33
009E:  DATA 65,36
009F:  DATA E4,34
00A0:  DATA EE,34
00A1:  DATA 7A,00
00A2:  DATA CC,3A
00A3:  DATA 74,33
00A4:  DATA 65,37
00A5:  DATA A0,24
00A6:  DATA 44,10
00A7:  DATA CB,30
00A8:  DATA 72,3A
00A9:  DATA 69,00
00AA:  DATA C7,37
00AB:  DATA 73,3A
00AC:  DATA 65,39
00AD:  DATA 69,37
00AE:  DATA 69,3D
00AF:  DATA 00,01
00B0:  DATA B1,16
00B1:  DATA CB,37
00B2:  DATA F0,3A
00B3:  DATA 6B,10
00B4:  DATA C9,39
00B5:  DATA EC,32
00B6:  DATA 6D,10
00B7:  DATA BC,16
00B8:  DATA 00,01
00B9:  DATA B2,16
00BA:  DATA D3,3A
00BB:  DATA A0,24
00BC:  DATA 73,36
00BD:  DATA E5,36
00BE:  DATA 00,01
00BF:  DATA B2,16
00C0:  DATA D3,3A
00C1:  DATA A0,24
00C2:  DATA 73,36
00C3:  DATA E5,36
00C4:  DATA 20,1E
00C5:  DATA 2D,00
00C6:  DATA B3,16
00C7:  DATA C8,30
00C8:  DATA F6,30
00C9:  DATA A0,24
00CA:  DATA 73,36
00CB:  DATA E5,36
00CC:  DATA 00,01
00CD:  DATA B3,16
00CE:  DATA C8,30
00CF:  DATA F6,30
00D0:  DATA A0,24
00D1:  DATA 73,36
00D2:  DATA E5,36
00D3:  DATA 20,1E
00D4:  DATA 2D,00
00D5:  DATA B4,16
00D6:  DATA C3,34
00D7:  DATA EC,30
00D8:  DATA A0,24
00D9:  DATA 73,36
00DA:  DATA E5,36
00DB:  DATA 00,01
00DC:  DATA B4,16
00DD:  DATA C3,34
00DE:  DATA EC,30
00DF:  DATA A0,24
00E0:  DATA 73,36
00E1:  DATA E5,36
00E2:  DATA 20,1E
00E3:  DATA 2D,00
00E4:  DATA B5,16
00E5:  DATA CB,30
00E6:  DATA F9,34
00E7:  DATA 74,10
00E8:  DATA C9,39
00E9:  DATA EC,32
00EA:  DATA 6D,00
00EB:  DATA B5,16
00EC:  DATA CB,30
00ED:  DATA F9,34
00EE:  DATA 74,10
00EF:  DATA C9,39
00F0:  DATA EC,32
00F1:  DATA 6D,10
00F2:  DATA BC,16
00F3:  DATA 00,00
00F4:  DATA D5,31
00F5:  DATA F2,32
00F6:  DATA 74,1D
00F7:  DATA 25,32
00F8:  DATA 20,3A
00F9:  DATA 6C,00
00FA:  DATA D3,3A
00FB:  DATA F2,32
00FC:  DATA BA,12
00FD:  DATA 6C,32
00FE:  DATA 00,00
00FF:  DATA D3,32
0100:  DATA 63,1D
0101:  DATA 00,01
0102:  DATA D5,31
0103:  DATA F2,32
0104:  DATA 74,1D
0105:  DATA 25,36
0106:  DATA 64,10
0107:  DATA 74,36
0108:  DATA 00,01
0109:  DATA D3,32
010A:  DATA 63,1D
010B:  DATA 00,01
010C:  DATA 43,26
010D:  DATA CF,29
010E:  DATA 49,27
010F:  DATA 47,00
0110:  DATA CB,37
0111:  DATA F0,3A
0112:  DATA 6B,1D
0113:  DATA 25,36
0114:  DATA 64,00
0115:  DATA D3,3A
0116:  DATA 3A,1D
0117:  DATA 25,36
0118:  DATA 64,00
0119:  DATA C8,30
011A:  DATA F6,30
011B:  DATA BA,12
011C:  DATA 6C,32
011D:  DATA 00,01
011E:  DATA C3,34
011F:  DATA EC,30
0120:  DATA BA,12
0121:  DATA 6C,32
0122:  DATA 00,00
0123:  DATA C8,37
0124:  DATA F3,33
0125:  DATA 65,36
0126:  DATA E4,34
0127:  DATA EE,34
0128:  DATA 7A,00
0129:  DATA D3,32
012A:  DATA EC,31
012B:  DATA F5,35
012C:  DATA 20,21
012D:  DATA E5,3C
012E:  DATA 00,01
012F:  DATA C8,37
0130:  DATA F3,33
0131:  DATA 65,36
0132:  DATA E4,34
0133:  DATA EE,34
0134:  DATA 7A,00
0135:  DATA C5,36
0136:  DATA F2,32
0137:  DATA 20,21
0138:  DATA E5,3C
0139:  DATA 00,00
*
027C:  MOVF   0B,W
027D:  BSF    03.5
027E:  MOVWF  33
027F:  BCF    03.5
0280:  BCF    0B.7
0281:  BSF    03.5
0282:  BSF    03.6
0283:  BSF    0C.7
0284:  BSF    0C.0
0285:  NOP
0286:  NOP
0287:  BCF    03.6
0288:  BTFSS  33.7
0289:  GOTO   28D
028A:  BCF    03.5
028B:  BSF    0B.7
028C:  BSF    03.5
028D:  BCF    03.5
028E:  BSF    03.6
028F:  MOVF   0C,W
0290:  ANDLW  7F
0291:  BTFSC  03.2
0292:  GOTO   2EE
0293:  BSF    03.5
0294:  BCF    03.6
0295:  MOVWF  33
0296:  BCF    03.5
0297:  BSF    03.6
0298:  MOVF   0D,W
0299:  BSF    03.5
029A:  BCF    03.6
029B:  MOVWF  34
029C:  BCF    03.5
029D:  BSF    03.6
029E:  MOVF   0F,W
029F:  BSF    03.5
02A0:  BCF    03.6
02A1:  MOVWF  35
02A2:  MOVF   33,W
02A3:  MOVWF  3E
02A4:  BCF    03.5
02A5:  CALL   242
02A6:  BSF    03.5
02A7:  MOVF   34,W
02A8:  BCF    03.5
02A9:  BSF    03.6
02AA:  MOVWF  0D
02AB:  BSF    03.5
02AC:  BCF    03.6
02AD:  MOVF   35,W
02AE:  BCF    03.5
02AF:  BSF    03.6
02B0:  MOVWF  0F
02B1:  BCF    03.6
02B2:  MOVF   0B,W
02B3:  BSF    03.5
02B4:  MOVWF  36
02B5:  BCF    03.5
02B6:  BCF    0B.7
02B7:  BSF    03.5
02B8:  BSF    03.6
02B9:  BSF    0C.7
02BA:  BSF    0C.0
02BB:  NOP
02BC:  NOP
02BD:  BCF    03.6
02BE:  BTFSS  36.7
02BF:  GOTO   2C3
02C0:  BCF    03.5
02C1:  BSF    0B.7
02C2:  BSF    03.5
02C3:  BCF    03.5
02C4:  BSF    03.6
02C5:  RLF    0C,W
02C6:  RLF    0E,W
02C7:  ANDLW  7F
02C8:  BTFSC  03.2
02C9:  GOTO   2EE
02CA:  BSF    03.5
02CB:  BCF    03.6
02CC:  MOVWF  33
02CD:  BCF    03.5
02CE:  BSF    03.6
02CF:  MOVF   0D,W
02D0:  BSF    03.5
02D1:  BCF    03.6
02D2:  MOVWF  34
02D3:  BCF    03.5
02D4:  BSF    03.6
02D5:  MOVF   0F,W
02D6:  BSF    03.5
02D7:  BCF    03.6
02D8:  MOVWF  35
02D9:  MOVF   33,W
02DA:  MOVWF  3E
02DB:  BCF    03.5
02DC:  CALL   242
02DD:  BSF    03.5
02DE:  MOVF   34,W
02DF:  BCF    03.5
02E0:  BSF    03.6
02E1:  MOVWF  0D
02E2:  BSF    03.5
02E3:  BCF    03.6
02E4:  MOVF   35,W
02E5:  BCF    03.5
02E6:  BSF    03.6
02E7:  MOVWF  0F
02E8:  INCF   0D,F
02E9:  BTFSC  03.2
02EA:  INCF   0F,F
02EB:  BCF    03.6
02EC:  GOTO   27C
02ED:  BSF    03.6
02EE:  BCF    03.6
02EF:  RETURN
*
039B:  MOVLW  10
039C:  BSF    03.5
039D:  MOVWF  3B
039E:  CLRF   77
039F:  CLRF   7A
03A0:  RRF    38,F
03A1:  RRF    37,F
03A2:  BTFSS  03.0
03A3:  GOTO   3AA
03A4:  MOVF   39,W
03A5:  ADDWF  77,F
03A6:  BTFSC  03.0
03A7:  INCF   7A,F
03A8:  MOVF   3A,W
03A9:  ADDWF  7A,F
03AA:  RRF    7A,F
03AB:  RRF    77,F
03AC:  RRF    79,F
03AD:  RRF    78,F
03AE:  DECFSZ 3B,F
03AF:  GOTO   3A0
03B0:  BCF    03.5
03B1:  RETURN
03B2:  CLRF   78
03B3:  CLRF   79
03B4:  CLRF   77
03B5:  CLRF   7A
03B6:  BSF    03.5
03B7:  MOVF   38,W
03B8:  BTFSS  03.2
03B9:  GOTO   3BD
03BA:  MOVF   37,W
03BB:  BTFSC  03.2
03BC:  GOTO   3D7
03BD:  MOVLW  10
03BE:  MOVWF  39
03BF:  BCF    03.0
03C0:  RLF    35,F
03C1:  RLF    36,F
03C2:  RLF    77,F
03C3:  RLF    7A,F
03C4:  MOVF   38,W
03C5:  SUBWF  7A,W
03C6:  BTFSS  03.2
03C7:  GOTO   3CA
03C8:  MOVF   37,W
03C9:  SUBWF  77,W
03CA:  BTFSS  03.0
03CB:  GOTO   3D3
03CC:  MOVF   37,W
03CD:  SUBWF  77,F
03CE:  BTFSS  03.0
03CF:  DECF   7A,F
03D0:  MOVF   38,W
03D1:  SUBWF  7A,F
03D2:  BSF    03.0
03D3:  RLF    78,F
03D4:  RLF    79,F
03D5:  DECFSZ 39,F
03D6:  GOTO   3BF
03D7:  BCF    03.5
03D8:  RETURN
*
046B:  MOVF   0B,W
046C:  BSF    03.5
046D:  MOVWF  36
046E:  BCF    03.5
046F:  BCF    0B.7
0470:  BSF    03.5
0471:  BSF    03.6
0472:  BSF    0C.7
0473:  BSF    0C.0
0474:  NOP
0475:  NOP
0476:  BCF    03.6
0477:  BTFSS  36.7
0478:  GOTO   47C
0479:  BCF    03.5
047A:  BSF    0B.7
047B:  BSF    03.5
047C:  BTFSC  03.0
047D:  GOTO   4B5
047E:  BCF    03.5
047F:  BSF    03.6
0480:  MOVF   0C,W
0481:  ANDLW  7F
0482:  BSF    03.5
0483:  BCF    03.6
0484:  MOVWF  36
0485:  BCF    03.5
0486:  BSF    03.6
0487:  MOVF   0D,W
0488:  BSF    03.5
0489:  BCF    03.6
048A:  MOVWF  37
048B:  BCF    03.5
048C:  BSF    03.6
048D:  MOVF   0F,W
048E:  BSF    03.5
048F:  BCF    03.6
0490:  MOVWF  38
0491:  MOVF   36,W
0492:  MOVWF  3E
0493:  BCF    03.5
0494:  CALL   242
0495:  BSF    03.5
0496:  MOVF   37,W
0497:  BCF    03.5
0498:  BSF    03.6
0499:  MOVWF  0D
049A:  BSF    03.5
049B:  BCF    03.6
049C:  MOVF   38,W
049D:  BCF    03.5
049E:  BSF    03.6
049F:  MOVWF  0F
04A0:  BCF    03.6
04A1:  MOVF   0B,W
04A2:  BSF    03.5
04A3:  MOVWF  39
04A4:  BCF    03.5
04A5:  BCF    0B.7
04A6:  BSF    03.5
04A7:  BSF    03.6
04A8:  BSF    0C.7
04A9:  BSF    0C.0
04AA:  NOP
04AB:  NOP
04AC:  BCF    03.6
04AD:  BTFSS  39.7
04AE:  GOTO   4B2
04AF:  BCF    03.5
04B0:  BSF    0B.7
04B1:  BSF    03.5
04B2:  DECFSZ 35,F
04B3:  GOTO   4B5
04B4:  GOTO   4E3
04B5:  BCF    03.5
04B6:  BSF    03.6
04B7:  RLF    0C,W
04B8:  RLF    0E,W
04B9:  ANDLW  7F
04BA:  BSF    03.5
04BB:  BCF    03.6
04BC:  MOVWF  36
04BD:  BCF    03.5
04BE:  BSF    03.6
04BF:  MOVF   0D,W
04C0:  BSF    03.5
04C1:  BCF    03.6
04C2:  MOVWF  37
04C3:  BCF    03.5
04C4:  BSF    03.6
04C5:  MOVF   0F,W
04C6:  BSF    03.5
04C7:  BCF    03.6
04C8:  MOVWF  38
04C9:  MOVF   36,W
04CA:  MOVWF  3E
04CB:  BCF    03.5
04CC:  CALL   242
04CD:  BSF    03.5
04CE:  MOVF   37,W
04CF:  BCF    03.5
04D0:  BSF    03.6
04D1:  MOVWF  0D
04D2:  BSF    03.5
04D3:  BCF    03.6
04D4:  MOVF   38,W
04D5:  BCF    03.5
04D6:  BSF    03.6
04D7:  MOVWF  0F
04D8:  INCF   0D,F
04D9:  BTFSC  03.2
04DA:  INCF   0F,F
04DB:  BCF    03.0
04DC:  BSF    03.5
04DD:  BCF    03.6
04DE:  DECFSZ 35,F
04DF:  GOTO   4E1
04E0:  GOTO   4E3
04E1:  BCF    03.5
04E2:  GOTO   46B
04E3:  BCF    03.5
04E4:  RETURN
04E5:  BSF    03.5
04E6:  MOVF   3B,W
04E7:  CLRF   78
04E8:  SUBWF  3A,W
04E9:  BTFSC  03.0
04EA:  GOTO   4EE
04EB:  MOVF   3A,W
04EC:  MOVWF  77
04ED:  GOTO   4FA
04EE:  CLRF   77
04EF:  MOVLW  08
04F0:  MOVWF  3C
04F1:  RLF    3A,F
04F2:  RLF    77,F
04F3:  MOVF   3B,W
04F4:  SUBWF  77,W
04F5:  BTFSC  03.0
04F6:  MOVWF  77
04F7:  RLF    78,F
04F8:  DECFSZ 3C,F
04F9:  GOTO   4F1
04FA:  BCF    03.5
04FB:  RETURN
04FC:  BSF    03.5
04FD:  CLRF   3D
04FE:  MOVF   04,W
04FF:  MOVWF  3C
0500:  BCF    3D.0
0501:  BTFSC  03.7
0502:  BSF    3D.0
0503:  BTFSS  36.7
0504:  GOTO   50D
0505:  BSF    3C.7
0506:  BTFSS  3C.4
0507:  INCF   3C,F
0508:  COMF   35,F
0509:  COMF   36,F
050A:  INCF   35,F
050B:  BTFSC  03.2
050C:  INCF   36,F
050D:  SWAPF  36,W
050E:  IORLW  F0
050F:  MOVWF  38
0510:  ADDWF  38,F
0511:  ADDLW  E2
0512:  MOVWF  39
0513:  ADDLW  32
0514:  MOVWF  3B
0515:  MOVF   36,W
0516:  ANDLW  0F
0517:  ADDWF  39,F
0518:  ADDWF  39,F
0519:  ADDWF  3B,F
051A:  ADDLW  E9
051B:  MOVWF  3A
051C:  ADDWF  3A,F
051D:  ADDWF  3A,F
051E:  SWAPF  35,W
051F:  ANDLW  0F
0520:  ADDWF  3A,F
0521:  ADDWF  3B,F
0522:  RLF    3A,F
0523:  RLF    3B,F
0524:  COMF   3B,F
0525:  RLF    3B,F
0526:  MOVF   35,W
0527:  ANDLW  0F
0528:  ADDWF  3B,F
0529:  RLF    38,F
052A:  MOVLW  07
052B:  MOVWF  37
052C:  MOVLW  0A
052D:  ADDWF  3B,F
052E:  DECF   3A,F
052F:  BTFSS  03.0
0530:  GOTO   52D
0531:  ADDWF  3A,F
0532:  DECF   39,F
0533:  BTFSS  03.0
0534:  GOTO   531
0535:  ADDWF  39,F
0536:  DECF   38,F
0537:  BTFSS  03.0
0538:  GOTO   535
0539:  ADDWF  38,F
053A:  DECF   37,F
053B:  BTFSS  03.0
053C:  GOTO   539
053D:  MOVLW  B7
053E:  MOVWF  04
053F:  BCF    03.7
0540:  MOVLW  07
0541:  ANDWF  3C,W
0542:  BCF    3C.6
0543:  DECF   04,F
0544:  ANDWF  3C,W
0545:  BTFSS  03.2
0546:  GOTO   54E
0547:  BTFSC  3C.4
0548:  INCF   04,F
0549:  BTFSC  3C.4
054A:  GOTO   54E
054B:  MOVLW  20
054C:  MOVWF  77
054D:  GOTO   56B
054E:  ADDWF  04,F
054F:  MOVLW  BB
0550:  SUBWF  04,W
0551:  BTFSC  03.2
0552:  BSF    3C.6
0553:  MOVF   00,W
0554:  MOVWF  77
0555:  BTFSS  03.2
0556:  GOTO   55F
0557:  BTFSC  3C.6
0558:  GOTO   55F
0559:  BTFSC  3C.4
055A:  GOTO   57B
055B:  BTFSC  3C.3
055C:  GOTO   55F
055D:  MOVLW  20
055E:  GOTO   56A
055F:  BTFSS  3C.7
0560:  GOTO   567
0561:  MOVLW  2D
0562:  MOVWF  77
0563:  DECF   04,F
0564:  BCF    3C.6
0565:  BCF    3C.7
0566:  GOTO   56B
0567:  BSF    3C.3
0568:  BCF    3C.4
0569:  MOVLW  30
056A:  ADDWF  77,F
056B:  CLRF   36
056C:  MOVF   04,W
056D:  MOVWF  35
056E:  BCF    36.0
056F:  BTFSC  03.7
0570:  BSF    36.0
0571:  MOVF   77,W
0572:  MOVWF  3E
0573:  BCF    03.5
0574:  CALL   242
0575:  BSF    03.5
0576:  MOVF   35,W
0577:  MOVWF  04
0578:  BCF    03.7
0579:  BTFSC  36.0
057A:  BSF    03.7
057B:  INCF   04,F
057C:  BTFSS  3C.6
057D:  GOTO   54F
057E:  BCF    03.5
057F:  RETURN
*
05A2:  MOVLW  20
05A3:  BTFSS  35.4
05A4:  MOVLW  30
05A5:  MOVWF  36
05A6:  MOVF   34,W
05A7:  MOVWF  77
05A8:  BTFSS  34.7
05A9:  GOTO   5B2
05AA:  COMF   77,F
05AB:  INCF   77,F
05AC:  MOVF   77,W
05AD:  MOVWF  34
05AE:  MOVLW  2D
05AF:  MOVWF  36
05B0:  BSF    35.7
05B1:  BSF    35.0
05B2:  MOVF   34,W
05B3:  MOVWF  3A
05B4:  MOVLW  64
05B5:  MOVWF  3B
05B6:  BCF    03.5
05B7:  CALL   4E5
05B8:  MOVF   77,W
05B9:  BSF    03.5
05BA:  MOVWF  34
05BB:  MOVLW  30
05BC:  ADDWF  78,W
05BD:  MOVWF  37
05BE:  MOVF   34,W
05BF:  MOVWF  3A
05C0:  MOVLW  0A
05C1:  MOVWF  3B
05C2:  BCF    03.5
05C3:  CALL   4E5
05C4:  MOVLW  30
05C5:  ADDWF  77,W
05C6:  BSF    03.5
05C7:  MOVWF  39
05C8:  MOVLW  30
05C9:  ADDWF  78,W
05CA:  MOVWF  38
05CB:  MOVF   36,W
05CC:  MOVWF  77
05CD:  MOVLW  30
05CE:  SUBWF  37,W
05CF:  BTFSC  03.2
05D0:  GOTO   5D5
05D1:  BSF    35.1
05D2:  BTFSC  35.7
05D3:  BSF    35.2
05D4:  GOTO   5E9
05D5:  MOVF   36,W
05D6:  MOVWF  37
05D7:  MOVLW  20
05D8:  MOVWF  36
05D9:  MOVLW  30
05DA:  SUBWF  38,W
05DB:  BTFSC  03.2
05DC:  GOTO   5E1
05DD:  BSF    35.0
05DE:  BTFSC  35.7
05DF:  BSF    35.1
05E0:  GOTO   5E9
05E1:  BTFSS  03.2
05E2:  BSF    35.0
05E3:  BTFSS  03.2
05E4:  GOTO   5E9
05E5:  MOVF   37,W
05E6:  MOVWF  38
05E7:  MOVLW  20
05E8:  MOVWF  37
05E9:  BTFSC  35.2
05EA:  GOTO   5F0
05EB:  BTFSC  35.1
05EC:  GOTO   5F5
05ED:  BTFSC  35.0
05EE:  GOTO   5FA
05EF:  GOTO   5FF
05F0:  MOVF   36,W
05F1:  MOVWF  3E
05F2:  BCF    03.5
05F3:  CALL   242
05F4:  BSF    03.5
05F5:  MOVF   37,W
05F6:  MOVWF  3E
05F7:  BCF    03.5
05F8:  CALL   242
05F9:  BSF    03.5
05FA:  MOVF   38,W
05FB:  MOVWF  3E
05FC:  BCF    03.5
05FD:  CALL   242
05FE:  BSF    03.5
05FF:  MOVF   39,W
0600:  MOVWF  3E
0601:  BCF    03.5
0602:  CALL   242
*
06FE:  MOVLW  8E
06FF:  MOVWF  77
0700:  BSF    03.5
0701:  MOVF   34,W
0702:  MOVWF  78
0703:  MOVF   33,W
0704:  MOVWF  79
0705:  CLRF   7A
0706:  MOVF   78,F
0707:  BTFSS  03.2
0708:  GOTO   713
0709:  MOVF   79,W
070A:  MOVWF  78
070B:  CLRF   79
070C:  MOVLW  08
070D:  SUBWF  77,F
070E:  MOVF   78,F
070F:  BTFSS  03.2
0710:  GOTO   713
0711:  CLRF   77
0712:  GOTO   71B
0713:  BCF    03.0
0714:  BTFSC  78.7
0715:  GOTO   71A
0716:  RLF    79,F
0717:  RLF    78,F
0718:  DECF   77,F
0719:  GOTO   713
071A:  BCF    78.7
071B:  BCF    03.5
071C:  RETURN
071D:  BSF    03.5
071E:  MOVF   33,W
071F:  BTFSC  03.2
0720:  GOTO   78E
0721:  MOVWF  3B
0722:  MOVF   37,W
0723:  BTFSC  03.2
0724:  GOTO   78E
0725:  ADDWF  3B,F
0726:  BTFSC  03.0
0727:  GOTO   72F
0728:  MOVLW  7F
0729:  SUBWF  3B,F
072A:  BTFSS  03.0
072B:  GOTO   78E
072C:  BTFSC  03.2
072D:  GOTO   78E
072E:  GOTO   733
072F:  MOVLW  81
0730:  ADDWF  3B,F
0731:  BTFSC  03.0
0732:  GOTO   78E
0733:  MOVF   3B,W
0734:  MOVWF  77
0735:  CLRF   78
0736:  CLRF   79
0737:  CLRF   7A
0738:  MOVF   34,W
0739:  MOVWF  3F
073A:  BSF    3F.7
073B:  MOVF   35,W
073C:  MOVWF  3E
073D:  MOVF   36,W
073E:  MOVWF  3D
073F:  MOVLW  18
0740:  MOVWF  3B
0741:  CLRF   3C
0742:  BTFSS  3D.0
0743:  GOTO   75C
0744:  MOVF   3A,W
0745:  ADDWF  7A,F
0746:  BTFSS  03.0
0747:  GOTO   74E
0748:  INCF   79,F
0749:  BTFSS  03.2
074A:  GOTO   74E
074B:  INCF   78,F
074C:  BTFSC  03.2
074D:  BSF    3C.7
074E:  MOVF   39,W
074F:  ADDWF  79,F
0750:  BTFSS  03.0
0751:  GOTO   755
0752:  INCF   78,F
0753:  BTFSC  03.2
0754:  BSF    3C.7
0755:  MOVF   38,W
0756:  MOVWF  35
0757:  BSF    35.7
0758:  MOVF   35,W
0759:  ADDWF  78,F
075A:  BTFSC  03.0
075B:  BSF    3C.7
075C:  RLF    3C,F
075D:  RRF    78,F
075E:  RRF    79,F
075F:  RRF    7A,F
0760:  RRF    3F,F
0761:  RRF    3E,F
0762:  RRF    3D,F
0763:  BCF    03.0
0764:  DECFSZ 3B,F
0765:  GOTO   741
0766:  MOVLW  01
0767:  ADDWF  77,F
0768:  BTFSC  03.0
0769:  GOTO   78E
076A:  BTFSC  78.7
076B:  GOTO   773
076C:  RLF    3F,F
076D:  RLF    7A,F
076E:  RLF    79,F
076F:  RLF    78,F
0770:  DECF   77,F
0771:  BTFSC  03.2
0772:  GOTO   78E
0773:  BTFSS  3F.7
0774:  GOTO   784
0775:  INCF   7A,F
0776:  BTFSS  03.2
0777:  GOTO   784
0778:  INCF   79,F
0779:  BTFSS  03.2
077A:  GOTO   784
077B:  INCF   78,F
077C:  BTFSS  03.2
077D:  GOTO   784
077E:  RRF    78,F
077F:  RRF    79,F
0780:  RRF    7A,F
0781:  INCF   77,F
0782:  BTFSC  03.2
0783:  GOTO   78E
0784:  MOVF   34,W
0785:  MOVWF  3C
0786:  MOVF   38,W
0787:  XORWF  3C,F
0788:  BTFSS  3C.7
0789:  GOTO   78C
078A:  BSF    78.7
078B:  GOTO   792
078C:  BCF    78.7
078D:  GOTO   792
078E:  CLRF   77
078F:  CLRF   78
0790:  CLRF   79
0791:  CLRF   7A
0792:  BCF    03.5
0793:  RETURN
0794:  MOVLW  8E
0795:  MOVWF  77
0796:  BSF    03.5
0797:  MOVF   33,W
0798:  SUBWF  77,F
0799:  MOVF   34,W
079A:  MOVWF  79
079B:  MOVF   35,W
079C:  MOVWF  78
079D:  BSF    79.7
079E:  MOVF   77,F
079F:  BTFSC  03.2
07A0:  GOTO   7AC
07A1:  BCF    03.0
07A2:  MOVF   79,F
07A3:  BTFSS  03.2
07A4:  GOTO   7A8
07A5:  MOVF   78,F
07A6:  BTFSC  03.2
07A7:  GOTO   7AC
07A8:  RRF    79,F
07A9:  RRF    78,F
07AA:  DECFSZ 77,F
07AB:  GOTO   7A1
07AC:  BTFSS  34.7
07AD:  GOTO   7B3
07AE:  COMF   78,F
07AF:  COMF   79,F
07B0:  INCF   78,F
07B1:  BTFSC  03.2
07B2:  INCF   79,F
07B3:  BCF    03.5
07B4:  RETURN
....................  
.................... #list 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEVICES                         */ 
.................... /********************************************************/ 
.................... #device ADC = 10 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM USES                            */ 
.................... /********************************************************/ 
.................... #use delay(clock=4M)  
*
013A:  MOVLW  BF
013B:  MOVWF  04
013C:  BCF    03.7
013D:  MOVF   00,W
013E:  BTFSC  03.2
013F:  GOTO   14E
0140:  MOVLW  01
0141:  MOVWF  78
0142:  CLRF   77
0143:  DECFSZ 77,F
0144:  GOTO   143
0145:  DECFSZ 78,F
0146:  GOTO   142
0147:  MOVLW  4A
0148:  MOVWF  77
0149:  DECFSZ 77,F
014A:  GOTO   149
014B:  GOTO   14C
014C:  DECFSZ 00,F
014D:  GOTO   140
014E:  RETURN
.................... #use rs232(baud=9600,parity=N,uart1,bits=8) 
.................... #use fast_io(b) //Includes : The operation cancel button & The pins of the 7-segment display 
.................... #use fast_io(e) //Includes : 7-segment display pins for scanning 
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INCLUDES                        */ 
.................... /********************************************************/ 
.................... #include <lcd.c>     
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0169:  MOVLW  0F
016A:  BSF    03.5
016B:  ANDWF  08,W
016C:  IORLW  F0
016D:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
016E:  BCF    03.5
016F:  BSF    08.2
....................    delay_cycles(1); 
0170:  NOP
....................    lcd_output_enable(1); 
0171:  BSF    08.0
....................    delay_cycles(1); 
0172:  NOP
....................    high = lcd_read_nibble(); 
0173:  CALL   15D
0174:  MOVF   78,W
0175:  BSF    03.5
0176:  MOVWF  46
....................        
....................    lcd_output_enable(0); 
0177:  BCF    03.5
0178:  BCF    08.0
....................    delay_cycles(1); 
0179:  NOP
....................    lcd_output_enable(1); 
017A:  BSF    08.0
....................    delay_us(1); 
017B:  NOP
....................    low = lcd_read_nibble(); 
017C:  CALL   15D
017D:  MOVF   78,W
017E:  BSF    03.5
017F:  MOVWF  45
....................        
....................    lcd_output_enable(0); 
0180:  BCF    03.5
0181:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0182:  MOVLW  0F
0183:  BSF    03.5
0184:  ANDWF  08,W
0185:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0186:  SWAPF  46,W
0187:  MOVWF  77
0188:  MOVLW  F0
0189:  ANDWF  77,F
018A:  MOVF   77,W
018B:  IORWF  45,W
018C:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
015D:  MOVF   08,W
015E:  MOVWF  77
015F:  SWAPF  08,W
0160:  ANDLW  0F
0161:  MOVWF  78
....................   #endif 
0162:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
014F:  BSF    03.5
0150:  SWAPF  46,W
0151:  ANDLW  F0
0152:  MOVWF  77
0153:  MOVLW  0F
0154:  BCF    03.5
0155:  ANDWF  08,W
0156:  IORWF  77,W
0157:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0158:  NOP
....................    lcd_output_enable(1); 
0159:  BSF    08.0
....................    delay_us(2); 
015A:  GOTO   15B
....................    lcd_output_enable(0); 
015B:  BCF    08.0
015C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0163:  BSF    03.5
0164:  BCF    08.0
....................    lcd_rs_tris(); 
0165:  BCF    08.1
....................    lcd_rw_tris(); 
0166:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0167:  BCF    03.5
0168:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
018D:  MOVF   78,W
018E:  MOVWF  45
018F:  BTFSS  45.7
0190:  GOTO   193
0191:  BCF    03.5
0192:  GOTO   169
....................    lcd_output_rs(address); 
0193:  BTFSC  43.0
0194:  GOTO   198
0195:  BCF    03.5
0196:  BCF    08.1
0197:  BSF    03.5
0198:  BTFSS  43.0
0199:  GOTO   19D
019A:  BCF    03.5
019B:  BSF    08.1
019C:  BSF    03.5
....................    delay_cycles(1); 
019D:  NOP
....................    lcd_output_rw(0); 
019E:  BCF    03.5
019F:  BCF    08.2
....................    delay_cycles(1); 
01A0:  NOP
....................    lcd_output_enable(0); 
01A1:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
01A2:  BSF    03.5
01A3:  SWAPF  44,W
01A4:  MOVWF  45
01A5:  MOVLW  0F
01A6:  ANDWF  45,F
01A7:  MOVF   45,W
01A8:  MOVWF  46
01A9:  BCF    03.5
01AA:  CALL   14F
....................    lcd_send_nibble(n & 0xf); 
01AB:  BSF    03.5
01AC:  MOVF   44,W
01AD:  ANDLW  0F
01AE:  MOVWF  45
01AF:  MOVWF  46
01B0:  BCF    03.5
01B1:  CALL   14F
01B2:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01B3:  MOVLW  28
01B4:  BSF    03.5
01B5:  MOVWF  34
01B6:  MOVLW  0C
01B7:  MOVWF  35
01B8:  MOVLW  01
01B9:  MOVWF  36
01BA:  MOVLW  06
01BB:  MOVWF  37
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01BC:  BCF    03.5
01BD:  BCF    08.0
....................    lcd_output_rs(0); 
01BE:  BCF    08.1
....................    lcd_output_rw(0); 
01BF:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01C0:  MOVLW  0F
01C1:  BSF    03.5
01C2:  ANDWF  08,W
01C3:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
01C4:  BCF    08.0
....................    lcd_rs_tris(); 
01C5:  BCF    08.1
....................    lcd_rw_tris(); 
01C6:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
01C7:  MOVLW  0F
01C8:  MOVWF  3F
01C9:  BCF    03.5
01CA:  CALL   13A
....................    for(i=1;i<=3;++i) 
01CB:  MOVLW  01
01CC:  BSF    03.5
01CD:  MOVWF  33
01CE:  MOVF   33,W
01CF:  SUBLW  03
01D0:  BTFSS  03.0
01D1:  GOTO   1DE
....................    { 
....................        lcd_send_nibble(3); 
01D2:  MOVLW  03
01D3:  MOVWF  46
01D4:  BCF    03.5
01D5:  CALL   14F
....................        delay_ms(5); 
01D6:  MOVLW  05
01D7:  BSF    03.5
01D8:  MOVWF  3F
01D9:  BCF    03.5
01DA:  CALL   13A
01DB:  BSF    03.5
01DC:  INCF   33,F
01DD:  GOTO   1CE
....................    } 
....................     
....................    lcd_send_nibble(2); 
01DE:  MOVLW  02
01DF:  MOVWF  46
01E0:  BCF    03.5
01E1:  CALL   14F
....................    delay_ms(5); 
01E2:  MOVLW  05
01E3:  BSF    03.5
01E4:  MOVWF  3F
01E5:  BCF    03.5
01E6:  CALL   13A
....................    for(i=0;i<=3;++i) 
01E7:  BSF    03.5
01E8:  CLRF   33
01E9:  MOVF   33,W
01EA:  SUBLW  03
01EB:  BTFSS  03.0
01EC:  GOTO   1FB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01ED:  MOVLW  B4
01EE:  ADDWF  33,W
01EF:  MOVWF  04
01F0:  BCF    03.7
01F1:  MOVF   00,W
01F2:  MOVWF  38
01F3:  CLRF   43
01F4:  MOVF   38,W
01F5:  MOVWF  44
01F6:  BCF    03.5
01F7:  CALL   163
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01F8:  BSF    03.5
01F9:  INCF   33,F
01FA:  GOTO   1E9
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
022E:  BSF    03.5
022F:  DECFSZ 40,W
0230:  GOTO   232
0231:  GOTO   235
....................       address=LCD_LINE_TWO; 
0232:  MOVLW  40
0233:  MOVWF  41
0234:  GOTO   236
....................    else 
....................       address=0; 
0235:  CLRF   41
....................       
....................    address+=x-1; 
0236:  MOVLW  01
0237:  SUBWF  3F,W
0238:  ADDWF  41,F
....................    lcd_send_byte(0,0x80|address); 
0239:  MOVF   41,W
023A:  IORLW  80
023B:  MOVWF  42
023C:  CLRF   43
023D:  MOVF   42,W
023E:  MOVWF  44
023F:  BCF    03.5
0240:  CALL   163
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0241:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0242:  BSF    03.5
0243:  MOVF   3E,W
0244:  XORLW  07
0245:  BCF    03.5
0246:  BTFSC  03.2
0247:  GOTO   252
0248:  XORLW  0B
0249:  BTFSC  03.2
024A:  GOTO   259
024B:  XORLW  06
024C:  BTFSC  03.2
024D:  GOTO   265
024E:  XORLW  02
024F:  BTFSC  03.2
0250:  GOTO   26D
0251:  GOTO   274
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0252:  MOVLW  01
0253:  BSF    03.5
0254:  MOVWF  3F
0255:  MOVWF  40
0256:  BCF    03.5
0257:  CALL   22E
0258:  GOTO   27B
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0259:  BSF    03.5
025A:  CLRF   43
025B:  MOVLW  01
025C:  MOVWF  44
025D:  BCF    03.5
025E:  CALL   163
....................                      delay_ms(2); 
025F:  MOVLW  02
0260:  BSF    03.5
0261:  MOVWF  3F
0262:  BCF    03.5
0263:  CALL   13A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0264:  GOTO   27B
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0265:  MOVLW  01
0266:  BSF    03.5
0267:  MOVWF  3F
0268:  MOVLW  02
0269:  MOVWF  40
026A:  BCF    03.5
026B:  CALL   22E
026C:  GOTO   27B
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
026D:  BSF    03.5
026E:  CLRF   43
026F:  MOVLW  10
0270:  MOVWF  44
0271:  BCF    03.5
0272:  CALL   163
0273:  GOTO   27B
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0274:  MOVLW  01
0275:  BSF    03.5
0276:  MOVWF  43
0277:  MOVF   3E,W
0278:  MOVWF  44
0279:  BCF    03.5
027A:  CALL   163
....................      #endif 
....................    } 
027B:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <math.h>        
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... //#include <2408.c>    will be unlocked in soooon :)                                    
.................... /********************************************************/ 
.................... /*               SYSTEM FUSES                           */ 
.................... /********************************************************/                                          
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM REGISTER                        */ 
.................... /********************************************************/ 
.................... #byte my_TIM0_OPTION_REG = 0x81  //Config register 
.................... #byte my_TIM0_MODULE_REG = 0x01  //8 bit timer value storage register 
.................... #byte my_INTCON_REG      = 0x0B  //General purpose interrupt register 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM STRUCTS                         */ 
.................... /********************************************************/ 
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;       //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM VARIABLES                       */ 
.................... /********************************************************/ 
....................  
.................... //------------ VAR --> CRITICAL PART <-- VAR ------------// 
.................... char readed_ID;            //Coming data will be When came from slave PIC 
.................... int8 systemLock;           //If the ID is valid, system open. Otherwise it will remain locked 
.................... int8 OPS_Status;           //55 means ops will be canceled, otherwise ops will be going on 
.................... char SelectionState;       //Put 'X' if button_Select is HIGH, put empty character if button_RemoveSelect is HIGH 
.................... int8 LockingMechanism = 1; //Will protect the system against repetitive or incorrect operations 
....................  
.................... //------------ VAR --> Keeps Clients <-- VAR ------------// 
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;                            // Will be used as given on the right --> MikroClient[ClientNumber]                                         
....................  
.................... //------------ VAR --> POTENTIOMETERS <-- VAR ------------// 
.................... int Index_OptionMenu; 
.................... int Index_TimeMoneyPreference; 
.................... int Index_PolishMililitre; 
.................... unsigned long int val_ADC_Pot_Surf; 
.................... unsigned long int val_ADC_Pot_Timer; 
.................... unsigned long int val_ADC_Pot_Polish; 
....................  
.................... //------------ VAR --> TIMER & ARRAYS <-- VAR ------------// 
.................... unsigned long int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};//Seconds 
*
0B2C:  MOVLW  14
0B2D:  BCF    03.6
0B2E:  MOVWF  4A
0B2F:  CLRF   4B
0B30:  MOVLW  28
0B31:  MOVWF  4C
0B32:  CLRF   4D
0B33:  MOVLW  3C
0B34:  MOVWF  4E
0B35:  CLRF   4F
0B36:  MOVLW  50
0B37:  MOVWF  50
0B38:  CLRF   51
0B39:  MOVLW  64
0B3A:  MOVWF  52
0B3B:  CLRF   53
0B3C:  MOVLW  78
0B3D:  MOVWF  54
0B3E:  CLRF   55
0B3F:  MOVLW  8C
0B40:  MOVWF  56
0B41:  CLRF   57
0B42:  MOVLW  A0
0B43:  MOVWF  58
0B44:  CLRF   59
0B45:  MOVLW  B4
0B46:  MOVWF  5A
0B47:  CLRF   5B
0B48:  MOVLW  C8
0B49:  MOVWF  5C
0B4A:  CLRF   5D
0B4B:  MOVLW  DC
0B4C:  MOVWF  5E
0B4D:  CLRF   5F
0B4E:  MOVLW  F0
0B4F:  MOVWF  60
0B50:  CLRF   61
.................... unsigned long int timer0_isr_counter=0; 
.................... unsigned long int desired_value=0.0; 
.................... unsigned long int mililitrePolish[5] = {1,2,3,4,5}; // 1x100ml , 2x100ml, ... 5x100ml 
0B51:  MOVLW  01
0B52:  MOVWF  66
0B53:  CLRF   67
0B54:  MOVLW  02
0B55:  MOVWF  68
0B56:  CLRF   69
0B57:  MOVLW  03
0B58:  MOVWF  6A
0B59:  CLRF   6B
0B5A:  MOVLW  04
0B5B:  MOVWF  6C
0B5C:  CLRF   6D
0B5D:  MOVLW  05
0B5E:  MOVWF  6E
0B5F:  CLRF   6F
....................  
.................... //------------ VAR --> 7-SEGMENT DISPLAY NUMBERS <-- VAR ------------// 
.................... int8 segmentTable[16] = {  
....................     0x7E, 0x0C, 0xB6, 0x9E, 0xCC, //==> 0,1,2,3,4 
....................     0xDA, 0xFA, 0x0E, 0xFE, 0xDE  //==> 5,6,7,8,9 
.................... }; 
0B60:  MOVLW  7E
0B61:  BSF    03.5
0B62:  MOVWF  20
0B63:  MOVLW  0C
0B64:  MOVWF  21
0B65:  MOVLW  B6
0B66:  MOVWF  22
0B67:  MOVLW  9E
0B68:  MOVWF  23
0B69:  MOVLW  CC
0B6A:  MOVWF  24
0B6B:  MOVLW  DA
0B6C:  MOVWF  25
0B6D:  MOVLW  FA
0B6E:  MOVWF  26
0B6F:  MOVLW  0E
0B70:  MOVWF  27
0B71:  MOVLW  FE
0B72:  MOVWF  28
0B73:  MOVLW  DE
0B74:  MOVWF  29
0B75:  CLRF   2A
0B76:  CLRF   2B
0B77:  CLRF   2C
0B78:  CLRF   2D
0B79:  CLRF   2E
0B7A:  CLRF   2F
....................  
.................... //Split the current time value into digits. 
.................... int8 number_unitDigit=0; 
.................... int8 number_tensDigit=0; 
.................... int8 number_hundredDigit =0; 
....................  
.................... unsigned long int CurrentTime;     // Current countdown value 
....................  
.................... int8 counter_StartOpsButtonTick=0;  /* 
....................                                      * If the value is 1, start the foaming process. 
....................                                      * If the value is 2, start the washing process. 
....................                                      * If the value is 3, start the ventilation process. 
....................                                      * If the value is 4, start the polishing process. 
....................                                      */ 
.................... unsigned long SelectedTime;         //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
.................... unsigned long currentPolishAmount; 
.................... int8 allProcessComplate_flag=0;    /**  
....................                                      * allProcessComplete_flag tracks the completion status of all processes, including polishing. 
....................                                      * 0: Processes are still ongoing. 
....................                                      * 1: All processes are complete. 
....................                                      */ 
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM DEFINATION                      */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM INPUT & OUTPUT ======== */ 
.................... //-IO--INPUT---->LCD Screen Control Section  
.................... #define button_NEXT           pin_A3   //Proceed to the next operation. 
.................... #define button_BACK           pin_A4   //Go back to the previous operation. 
.................... #define button_Select         pin_A5   //Select the desired option. 
.................... #define button_RemoveSelect   pin_C0   //Remove the option I canceled. 
....................  
.................... #define button_OPS_START      pin_C1   /* button_OPS_START :  
....................                                         * This button performs the following functions: 
....................                                         * - Starts the foaming, washing, ventilation, and polishing processes. 
....................                                         * - Triggers the countdown for foaming, washing, and ventilation. 
....................                                         * - Loads percentage progress into the system for polishing. 
....................                                         */ 
....................                                          
.................... #define button_OPS_CANCEL      pin_B0   //Cancel all operations and close the system for the user. 
.................... #define button_DrainPolishing  pin_C2   //It adds polish to the container while the button is pressed 
....................  
....................  
.................... //-IO--OUTPUT---->7-Segment Display Scanning Section 
.................... #define pin_HundredDigit_switch pin_E2 
.................... #define pin_TensDigit_switch    pin_E0  
.................... #define pin_UnitDigit_switch    pin_E1  
....................  
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               FUNCTIONS PROTOTYPES                   */ 
.................... /********************************************************/ 
.................... /* ======== SYSTEM CONFIGURATION FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_Init(void); 
.................... void trisSetting_Init(void); 
.................... void displaySetting_Init(void); 
.................... void interruptSetting_Init(void); 
.................... void adcSetting_Init(void); 
....................  
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_lcd_IdleStatus(void); 
.................... void NavigateOperationMenu(void); 
.................... void NavigateTimeMoneyPreferenceMenu(void); 
.................... void NavigatePolishingMenu(void); 
.................... void DisplayRecordsSequentiallyOnLCD(void); 
....................  
.................... /* ======== UART SERIAL COM. FUNCTIONS PROTOTYPES  ======== */ 
.................... void SubSystem_uart_CheckTheMessage(void); 
....................  
.................... /* ======== 7-SEGMENT DISPLAY FUNCTIONS PROTOTYPES  ======== */ 
.................... void sequentialDisplayScan(void); 
.................... void loadZeroValue_2_DisplaySegment(void); 
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM MACROS                          */ 
.................... /********************************************************/ 
.................... /* ======== -BEGIN- SYSTEM POTENTIOMETER INDEXER -BEGIN- ======== */ 
.................... #define ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf)        \ 
....................    do{                                        \ 
....................           Index_OptionMenu = ((val_ADC_Pot_Surf*5)/1020);  \ 
....................           if(Index_OptionMenu >= 5){                       \ 
....................             Index_OptionMenu = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer)              \ 
....................    do{                                                                \ 
....................           Index_TimeMoneyPreference = ((val_ADC_Pot_Timer*12)/1020);  \ 
....................           if(Index_TimeMoneyPreference >= 12){                        \ 
....................              Index_TimeMoneyPreference = 11;                          \ 
....................           }                                                           \ 
....................    }while(0) 
....................     
.................... #define ADC_TO_INDEXofPolish(val_ADC_Pot_Polish)        \ 
....................    do{                                        \ 
....................           Index_PolishMililitre = ((val_ADC_Pot_Polish*5)/1020);  \ 
....................           if(Index_PolishMililitre >= 5){                       \ 
....................             Index_PolishMililitre = 4;                          \ 
....................           }                                                \ 
....................    }while(0) 
....................     
.................... /* ======== -END- SYSTEM POTENTIOMETER INDEXER -END- ======== */    
....................  
.................... /* ======== -BEGIN- SYSTEM TIMER TIME CONFIG -BEGIN- ======== */ 
.................... //--> Timer Desired Value Calculator  
.................... #define TimerScalingFactor ((1000.0) / 64.0) 
.................... #define SECOND_TO_ISR_COUNT(SelectedTime)                     \ 
....................    do{                                                        \ 
....................          desired_value = (SelectedTime * TimerScalingFactor); \ 
....................    }while(0) 
....................  
.................... /* ======== -END- SYSTEM TIMER TIME CONFIG -END- ======== */ 
....................  
....................  
....................  
.................... /********************************************************/ 
.................... /*               SYSTEM INTERRUPTS                      */ 
.................... /********************************************************/ 
.................... /* ======== -BEGIN- EXTERNAL INTERRUPT -BEGIN- ======== */ 
.................... #int_EXT 
.................... void system_isr_OperationCANCEL(){ 
....................   OPS_Status = 55;       //That's a password to break do-while's loops 
*
0056:  MOVLW  37
0057:  MOVWF  2D
....................   my_INTCON_REG &= 0XFD; //Clear External Interrupt Flag bit  
0058:  BCF    0B.1
.................... } 
.................... /* ======== -END- EXTERNAL INTERRUPT -END- ======== */ 
....................  
.................... /* ======== -BEGIN- TIMER_0 INTERRUPT -BEGIN- ======== */ 
0059:  BCF    0B.1
005A:  BCF    0A.3
005B:  BCF    0A.4
005C:  GOTO   02F
.................... #INT_TIMER0 
.................... void systemTimer0_isr(){ 
....................  
....................    timer0_isr_counter++; 
005D:  INCF   62,F
005E:  BTFSC  03.2
005F:  INCF   63,F
....................     
.................... /* 
....................  * e.g., 20 seconds is equal to 20000 milliseconds. 
....................  * We divide by 64 because Timer 0 generates an interrupt every 64 milliseconds. 
....................  * (20000 milliseconds / 64 milliseconds) = 312.5 
....................  * This gives the desired value for the timing calculation. 
....................  */ 
....................    if(timer0_isr_counter == desired_value){ 
0060:  MOVF   64,W
0061:  SUBWF  62,W
0062:  BTFSS  03.2
0063:  GOTO   06B
0064:  MOVF   65,W
0065:  SUBWF  63,W
0066:  BTFSS  03.2
0067:  GOTO   06B
....................     
....................       //CurrentTime=0; 
....................       timer0_isr_counter=0;   
0068:  CLRF   63
0069:  CLRF   62
....................       //Disable Timer0 Interrupt 
....................       my_INTCON_REG &= 0xDF; 
006A:  BCF    0B.5
....................        
....................    } 
....................     
....................     
....................    //If 1 second has passed 
....................    if((timer0_isr_counter%16) == 0){ 
006B:  MOVF   62,W
006C:  ANDLW  0F
006D:  BSF    03.5
006E:  MOVWF  48
006F:  CLRF   49
0070:  MOVF   48,F
0071:  BTFSS  03.2
0072:  GOTO   085
0073:  MOVF   49,F
0074:  BTFSS  03.2
0075:  GOTO   085
....................     
....................       //Decrease the current time value by one. 
....................       CurrentTime-=1; 
0076:  MOVLW  01
0077:  SUBWF  73,F
0078:  MOVLW  00
0079:  BTFSS  03.0
007A:  MOVLW  01
007B:  SUBWF  74,F
....................            
....................          if(CurrentTime==0){      
007C:  MOVF   73,F
007D:  BTFSS  03.2
007E:  GOTO   085
007F:  MOVF   74,F
0080:  BTFSS  03.2
0081:  GOTO   085
....................             //Disable Timer0 Interrupt 
....................             my_INTCON_REG &= 0xDF;      
0082:  BCF    03.5
0083:  BCF    0B.5
0084:  BSF    03.5
....................          } 
....................    } 
....................     
....................    // Clear timer0 overflow interrupt flag 
....................    my_INTCON_REG &= 0xFB;  
0085:  BCF    03.5
0086:  BCF    0B.2
....................     
0087:  BCF    0B.2
0088:  BCF    0A.3
0089:  BCF    0A.4
008A:  GOTO   02F
.................... } 
.................... /* ======== -END- TIMER_0 INTERRUPT -END- ======== */ 
....................  
....................  
....................  
.................... /********************************************************************************************************************/ 
.................... /*                                MAIN CODE & SEQUENTIAL STEPS OF THE OPERATION                                     */ 
.................... /********************************************************************************************************************/ 
.................... void main(void)  
*
0AFF:  MOVF   03,W
0B00:  ANDLW  1F
0B01:  MOVWF  03
0B02:  BSF    03.5
0B03:  BSF    03.6
0B04:  BCF    07.3
0B05:  MOVLW  19
0B06:  BCF    03.6
0B07:  MOVWF  19
0B08:  MOVLW  A6
0B09:  MOVWF  18
0B0A:  MOVLW  90
0B0B:  BCF    03.5
0B0C:  MOVWF  18
0B0D:  MOVLW  01
0B0E:  MOVWF  2F
0B0F:  CLRF   63
0B10:  CLRF   62
0B11:  CLRF   65
0B12:  CLRF   64
0B13:  CLRF   70
0B14:  CLRF   71
0B15:  CLRF   72
0B16:  CLRF   75
0B17:  CLRF   76
0B18:  MOVLW  FF
0B19:  BSF    03.5
0B1A:  MOVWF  30
0B1B:  CLRF   32
0B1C:  CLRF   31
0B1D:  BSF    03.6
0B1E:  MOVF   09,W
0B1F:  ANDLW  C0
0B20:  MOVWF  09
0B21:  BCF    03.6
0B22:  BCF    1F.4
0B23:  BCF    1F.5
0B24:  MOVLW  00
0B25:  BSF    03.6
0B26:  MOVWF  08
0B27:  BCF    03.5
0B28:  CLRF   07
0B29:  CLRF   08
0B2A:  CLRF   09
0B2B:  BCF    03.7
.................... { 
....................    
....................    //System parameters and peripherals will be initialized 
....................    SubSystem_Init(); 
*
0B7B:  BCF    0A.3
0B7C:  BCF    03.5
0B7D:  GOTO   1B3
0B7E:  BSF    0A.3
....................        
....................    //Wait until unlock the system 
....................    do{ 
....................            SubSystem_lcd_IdleStatus();   //Greeting the customer 
0B7F:  BCF    0A.3
0B80:  GOTO   2F0
0B81:  BSF    0A.3
....................             
....................            if(kbhit()) 
0B82:  BTFSS  0C.5
0B83:  GOTO   38B
....................            { 
....................               readed_ID = getc(); 
0B84:  BTFSS  0C.5
0B85:  GOTO   384
0B86:  MOVF   1A,W
0B87:  MOVWF  2B
....................               SubSystem_uart_CheckTheMessage(); 
0B88:  BCF    0A.3
0B89:  GOTO   34B
0B8A:  BSF    0A.3
....................            }       
....................          
....................     }while(systemLock!=1); 
0B8B:  DECFSZ 2C,W
0B8C:  GOTO   37F
....................   
....................     delay_ms(1000); 
0B8D:  MOVLW  04
0B8E:  BSF    03.5
0B8F:  MOVWF  33
0B90:  MOVLW  FA
0B91:  MOVWF  3F
0B92:  BCF    0A.3
0B93:  BCF    03.5
0B94:  CALL   13A
0B95:  BSF    0A.3
0B96:  BSF    03.5
0B97:  DECFSZ 33,F
0B98:  GOTO   390
....................      
....................      
....................      
....................      
....................    
.................... /** 
....................  * @brief Program navigates through option menus using a potentiometer and buttons. 
....................  *  
....................  * Reads potentiometer values to select options or adjust parameters like time and cost. 
....................  * The "NEXT" button moves forward or confirms selection, while the "BACK" button allows returning or resetting. 
....................  * Specific sub-menus handle time/money preferences and polishing settings, with double-clicks for confirmation  
....................  * and single clicks for resetting choices. 
....................  */ 
....................  
....................  
.................... /*-----------------------------------------------------------------------------------------------*/ 
.................... /*                   >>> BEGIN - SEQUENTIAL STEPS OF THE OPERATION - BEGIN <<<                   */ 
.................... /*-----------------------------------------------------------------------------------------------*/ 
....................  
....................  
....................       do{ 
....................              //Start Of Conversation for ADC_Surf 
....................              set_adc_channel(0); 
0B99:  MOVLW  00
0B9A:  MOVWF  78
0B9B:  BCF    03.5
0B9C:  MOVF   1F,W
0B9D:  ANDLW  C3
0B9E:  IORWF  78,W
0B9F:  MOVWF  1F
....................              //Provide sufficient acquisition time. 
....................              delay_us(20); 
0BA0:  MOVLW  06
0BA1:  MOVWF  77
0BA2:  DECFSZ 77,F
0BA3:  GOTO   3A2
0BA4:  NOP
....................               
....................              //Get Surf_Pot ADC value(0-1024) 
....................              val_ADC_Pot_Surf = read_adc();   
0BA5:  BSF    1F.1
0BA6:  BTFSC  1F.1
0BA7:  GOTO   3A6
0BA8:  BSF    03.5
0BA9:  MOVF   1E,W
0BAA:  BCF    03.5
0BAB:  MOVWF  44
0BAC:  MOVF   1E,W
0BAD:  MOVWF  45
....................               
....................              //Convert Surf_Pot ADC value into the option menu index 
....................              ADC_TO_INDEXofOPTION_MENU(val_ADC_Pot_Surf); 
0BAE:  MOVF   45,W
0BAF:  BSF    03.5
0BB0:  MOVWF  38
0BB1:  BCF    03.5
0BB2:  MOVF   44,W
0BB3:  BSF    03.5
0BB4:  MOVWF  37
0BB5:  CLRF   3A
0BB6:  MOVLW  05
0BB7:  MOVWF  39
0BB8:  BCF    0A.3
0BB9:  BCF    03.5
0BBA:  CALL   39B
0BBB:  BSF    0A.3
0BBC:  MOVF   79,W
0BBD:  BSF    03.5
0BBE:  MOVWF  34
0BBF:  MOVF   78,W
0BC0:  MOVWF  33
0BC1:  MOVF   34,W
0BC2:  MOVWF  36
0BC3:  MOVF   33,W
0BC4:  MOVWF  35
0BC5:  MOVLW  03
0BC6:  MOVWF  38
0BC7:  MOVLW  FC
0BC8:  MOVWF  37
0BC9:  BCF    0A.3
0BCA:  BCF    03.5
0BCB:  CALL   3B2
0BCC:  BSF    0A.3
0BCD:  MOVF   78,W
0BCE:  MOVWF  41
0BCF:  SUBLW  04
0BD0:  BTFSC  03.0
0BD1:  GOTO   3D4
0BD2:  MOVLW  04
0BD3:  MOVWF  41
....................              
....................              //Use index value to show selected option and other one 
....................              NavigateOperationMenu(); 
0BD4:  BCF    0A.3
0BD5:  GOTO   3D9
0BD6:  BSF    0A.3
....................               
....................              //Clear selection 
....................              SelectionState = ' '; 
0BD7:  MOVLW  20
0BD8:  MOVWF  2E
....................               
....................                 //The client wants to see the next section based on the selected option 
....................                 //Selections will be made for foaming, washing, and ventilation processes in this section 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu <= 2)) 
0BD9:  BSF    03.5
0BDA:  BSF    05.3
0BDB:  BCF    03.5
0BDC:  BTFSS  05.3
0BDD:  GOTO   428
0BDE:  MOVF   41,W
0BDF:  SUBLW  02
0BE0:  BTFSS  03.0
0BE1:  GOTO   428
....................                 { 
....................        
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
0BE2:  MOVLW  04
0BE3:  MOVWF  78
0BE4:  MOVF   1F,W
0BE5:  ANDLW  C3
0BE6:  IORWF  78,W
0BE7:  MOVWF  1F
....................                               //Provide sufficient acquisition time. 
....................                               delay_us(20); 
0BE8:  MOVLW  06
0BE9:  MOVWF  77
0BEA:  DECFSZ 77,F
0BEB:  GOTO   3EA
0BEC:  NOP
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                               val_ADC_Pot_Timer = read_adc();  
0BED:  BSF    1F.1
0BEE:  BTFSC  1F.1
0BEF:  GOTO   3EE
0BF0:  BSF    03.5
0BF1:  MOVF   1E,W
0BF2:  BCF    03.5
0BF3:  MOVWF  46
0BF4:  MOVF   1E,W
0BF5:  MOVWF  47
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofTIME_MONEY_MENU(val_ADC_Pot_Timer); 
0BF6:  MOVF   47,W
0BF7:  BSF    03.5
0BF8:  MOVWF  38
0BF9:  BCF    03.5
0BFA:  MOVF   46,W
0BFB:  BSF    03.5
0BFC:  MOVWF  37
0BFD:  CLRF   3A
0BFE:  MOVLW  0C
0BFF:  MOVWF  39
0C00:  BCF    0A.3
0C01:  BCF    03.5
0C02:  CALL   39B
0C03:  BSF    0A.3
0C04:  MOVF   79,W
0C05:  BSF    03.5
0C06:  MOVWF  34
0C07:  MOVF   78,W
0C08:  MOVWF  33
0C09:  MOVF   34,W
0C0A:  MOVWF  36
0C0B:  MOVF   33,W
0C0C:  MOVWF  35
0C0D:  MOVLW  03
0C0E:  MOVWF  38
0C0F:  MOVLW  FC
0C10:  MOVWF  37
0C11:  BCF    0A.3
0C12:  BCF    03.5
0C13:  CALL   3B2
0C14:  BSF    0A.3
0C15:  MOVF   78,W
0C16:  MOVWF  42
0C17:  SUBLW  0B
0C18:  BTFSC  03.0
0C19:  GOTO   41C
0C1A:  MOVLW  0B
0C1B:  MOVWF  42
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigateTimeMoneyPreferenceMenu(); 
0C1C:  BCF    0A.3
0C1D:  GOTO   580
0C1E:  BSF    0A.3
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
0C1F:  BSF    03.5
0C20:  BSF    05.4
0C21:  BCF    03.5
0C22:  BTFSC  05.4
....................                                  break; 
0C23:  GOTO   428
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
0C24:  MOVF   2D,W
0C25:  SUBLW  37
0C26:  BTFSS  03.2
0C27:  GOTO   3E2
....................                 } 
....................                  
....................                  
....................                 //In this section, only milliliter selection will be made for the polishing process 
....................                 if((input(button_NEXT) == 1) && (Index_OptionMenu == 3)){ 
0C28:  BSF    03.5
0C29:  BSF    05.3
0C2A:  BCF    03.5
0C2B:  BTFSS  05.3
0C2C:  GOTO   470
0C2D:  MOVF   41,W
0C2E:  SUBLW  03
0C2F:  BTFSS  03.2
0C30:  GOTO   470
....................     
....................                         do{ 
....................                               //Start Of Conversation for ADC_Timer 
....................                               set_adc_channel(1); 
0C31:  MOVLW  04
0C32:  MOVWF  78
0C33:  MOVF   1F,W
0C34:  ANDLW  C3
0C35:  IORWF  78,W
0C36:  MOVWF  1F
....................                                
....................                               //Get Timer_Pot ADC value(0-1024) 
....................                                
....................                               val_ADC_Pot_Polish = read_adc();  
0C37:  BSF    1F.1
0C38:  BTFSC  1F.1
0C39:  GOTO   438
0C3A:  BSF    03.5
0C3B:  MOVF   1E,W
0C3C:  BCF    03.5
0C3D:  MOVWF  48
0C3E:  MOVF   1E,W
0C3F:  MOVWF  49
....................                                
....................                               //Convert Timer_Pot ADC value into the option menu index 
....................                               ADC_TO_INDEXofPolish(val_ADC_Pot_Polish); 
0C40:  MOVF   49,W
0C41:  BSF    03.5
0C42:  MOVWF  38
0C43:  BCF    03.5
0C44:  MOVF   48,W
0C45:  BSF    03.5
0C46:  MOVWF  37
0C47:  CLRF   3A
0C48:  MOVLW  05
0C49:  MOVWF  39
0C4A:  BCF    0A.3
0C4B:  BCF    03.5
0C4C:  CALL   39B
0C4D:  BSF    0A.3
0C4E:  MOVF   79,W
0C4F:  BSF    03.5
0C50:  MOVWF  34
0C51:  MOVF   78,W
0C52:  MOVWF  33
0C53:  MOVF   34,W
0C54:  MOVWF  36
0C55:  MOVF   33,W
0C56:  MOVWF  35
0C57:  MOVLW  03
0C58:  MOVWF  38
0C59:  MOVLW  FC
0C5A:  MOVWF  37
0C5B:  BCF    0A.3
0C5C:  BCF    03.5
0C5D:  CALL   3B2
0C5E:  BSF    0A.3
0C5F:  MOVF   78,W
0C60:  MOVWF  43
0C61:  SUBLW  04
0C62:  BTFSC  03.0
0C63:  GOTO   466
0C64:  MOVLW  04
0C65:  MOVWF  43
....................                                
....................                               //Use index value to show time & money & preference 
....................                               NavigatePolishingMenu(); 
0C66:  GOTO   000
....................                                
....................                               //Break the while condation 
....................                               if(input(button_BACK) == 1){ 
0C67:  BSF    03.5
0C68:  BSF    05.4
0C69:  BCF    03.5
0C6A:  BTFSC  05.4
....................                                  break; 
0C6B:  GOTO   470
....................                               } 
....................                          
....................                         }while(OPS_Status!=55);  
0C6C:  MOVF   2D,W
0C6D:  SUBLW  37
0C6E:  BTFSS  03.2
0C6F:  GOTO   431
....................                  
....................                 } 
....................                  
....................                  
....................                 /* 
....................                  * In this section, a countdown will start for the selected times. 
....................                  * Each time the button_OPS_START is pressed, a new countdown for the process will begin. 
....................                 */ 
....................                 if(input(button_OPS_START) == 1){ 
0C70:  BSF    03.5
0C71:  BSF    30.1
0C72:  MOVF   30,W
0C73:  MOVWF  07
0C74:  BCF    03.5
0C75:  BTFSS  07.1
0C76:  GOTO   5EA
....................                  
....................                         printf(lcd_putc,"\f"); 
0C77:  MOVLW  0C
0C78:  BSF    03.5
0C79:  MOVWF  3E
0C7A:  BCF    0A.3
0C7B:  BCF    03.5
0C7C:  CALL   242
0C7D:  BSF    0A.3
....................                         lcd_gotoxy(4,1); 
0C7E:  MOVLW  04
0C7F:  BSF    03.5
0C80:  MOVWF  3F
0C81:  MOVLW  01
0C82:  MOVWF  40
0C83:  BCF    0A.3
0C84:  BCF    03.5
0C85:  CALL   22E
0C86:  BSF    0A.3
....................                         printf(lcd_putc,"Operasyon"); 
0C87:  MOVLW  8B
0C88:  BSF    03.6
0C89:  MOVWF  0D
0C8A:  MOVLW  00
0C8B:  MOVWF  0F
0C8C:  BCF    0A.3
0C8D:  BCF    03.6
0C8E:  CALL   27C
0C8F:  BSF    0A.3
....................                         lcd_gotoxy(4,2); 
0C90:  MOVLW  04
0C91:  BSF    03.5
0C92:  MOVWF  3F
0C93:  MOVLW  02
0C94:  MOVWF  40
0C95:  BCF    0A.3
0C96:  BCF    03.5
0C97:  CALL   22E
0C98:  BSF    0A.3
....................                         printf(lcd_putc,"Baslatildi"); 
0C99:  MOVLW  90
0C9A:  BSF    03.6
0C9B:  MOVWF  0D
0C9C:  MOVLW  00
0C9D:  MOVWF  0F
0C9E:  BCF    0A.3
0C9F:  BCF    03.6
0CA0:  CALL   27C
0CA1:  BSF    0A.3
....................                          
....................                         //Wait 100 milliseconds to allow for button interference 
....................                         delay_ms(100);  
0CA2:  MOVLW  64
0CA3:  BSF    03.5
0CA4:  MOVWF  3F
0CA5:  BCF    0A.3
0CA6:  BCF    03.5
0CA7:  CALL   13A
0CA8:  BSF    0A.3
....................                          
....................                         //Increase the value by one, if clicked during each recheck 
....................                         counter_StartOpsButtonTick+=1; 
0CA9:  MOVLW  01
0CAA:  ADDWF  75,F
....................                         LockingMechanism = 1; 
0CAB:  MOVWF  2F
....................                          
....................                         do{ 
....................                                
....................                               //Loads the foaming time 
....................                               if((counter_StartOpsButtonTick == 1) && (LockingMechanism == 1)){        
0CAC:  DECFSZ 75,W
0CAD:  GOTO   500
0CAE:  DECFSZ 2F,W
0CAF:  GOTO   500
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Foaming; 
0CB0:  RLF    40,W
0CB1:  MOVWF  77
0CB2:  RLF    77,F
0CB3:  RLF    77,F
0CB4:  MOVLW  F8
0CB5:  ANDWF  77,F
0CB6:  MOVF   77,W
0CB7:  ADDLW  30
0CB8:  MOVWF  04
0CB9:  BCF    03.7
0CBA:  INCF   04,F
0CBB:  MOVF   00,W
0CBC:  MOVWF  7C
0CBD:  DECF   04,F
0CBE:  MOVF   00,W
0CBF:  MOVWF  7B
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Foaming; 
0CC0:  RLF    40,W
0CC1:  MOVWF  77
0CC2:  RLF    77,F
0CC3:  RLF    77,F
0CC4:  MOVLW  F8
0CC5:  ANDWF  77,F
0CC6:  MOVF   77,W
0CC7:  ADDLW  30
0CC8:  MOVWF  04
0CC9:  BCF    03.7
0CCA:  INCF   04,F
0CCB:  MOVF   00,W
0CCC:  MOVWF  74
0CCD:  DECF   04,F
0CCE:  MOVF   00,W
0CCF:  MOVWF  73
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
0CD0:  MOVF   7C,W
0CD1:  BSF    03.5
0CD2:  MOVWF  34
0CD3:  MOVF   7B,W
0CD4:  MOVWF  33
0CD5:  BCF    0A.3
0CD6:  BCF    03.5
0CD7:  CALL   6FE
0CD8:  BSF    0A.3
0CD9:  MOVF   7A,W
0CDA:  BSF    03.5
0CDB:  MOVWF  36
0CDC:  MOVF   79,W
0CDD:  MOVWF  35
0CDE:  MOVF   78,W
0CDF:  MOVWF  34
0CE0:  MOVF   77,W
0CE1:  MOVWF  33
0CE2:  CLRF   3A
0CE3:  CLRF   39
0CE4:  MOVLW  7A
0CE5:  MOVWF  38
0CE6:  MOVLW  82
0CE7:  MOVWF  37
0CE8:  BCF    0A.3
0CE9:  BCF    03.5
0CEA:  CALL   71D
0CEB:  BSF    0A.3
0CEC:  MOVF   7A,W
0CED:  BSF    03.5
0CEE:  MOVWF  36
0CEF:  MOVF   79,W
0CF0:  MOVWF  35
0CF1:  MOVF   78,W
0CF2:  MOVWF  34
0CF3:  MOVF   77,W
0CF4:  MOVWF  33
0CF5:  BCF    0A.3
0CF6:  BCF    03.5
0CF7:  CALL   794
0CF8:  BSF    0A.3
0CF9:  MOVF   79,W
0CFA:  MOVWF  65
0CFB:  MOVF   78,W
0CFC:  MOVWF  64
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
0CFD:  MOVLW  A0
0CFE:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
0CFF:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                                //Loads the washing time 
....................                               if((counter_StartOpsButtonTick == 2) && (LockingMechanism == 1)){        
0D00:  MOVF   75,W
0D01:  SUBLW  02
0D02:  BTFSS  03.2
0D03:  GOTO   558
0D04:  DECFSZ 2F,W
0D05:  GOTO   558
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Washing; 
0D06:  RLF    40,W
0D07:  MOVWF  77
0D08:  RLF    77,F
0D09:  RLF    77,F
0D0A:  MOVLW  F8
0D0B:  ANDWF  77,F
0D0C:  MOVF   77,W
0D0D:  ADDLW  02
0D0E:  ADDLW  30
0D0F:  MOVWF  04
0D10:  BCF    03.7
0D11:  INCF   04,F
0D12:  MOVF   00,W
0D13:  MOVWF  7C
0D14:  DECF   04,F
0D15:  MOVF   00,W
0D16:  MOVWF  7B
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Washing; 
0D17:  RLF    40,W
0D18:  MOVWF  77
0D19:  RLF    77,F
0D1A:  RLF    77,F
0D1B:  MOVLW  F8
0D1C:  ANDWF  77,F
0D1D:  MOVF   77,W
0D1E:  ADDLW  02
0D1F:  ADDLW  30
0D20:  MOVWF  04
0D21:  BCF    03.7
0D22:  INCF   04,F
0D23:  MOVF   00,W
0D24:  MOVWF  74
0D25:  DECF   04,F
0D26:  MOVF   00,W
0D27:  MOVWF  73
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
0D28:  MOVF   7C,W
0D29:  BSF    03.5
0D2A:  MOVWF  34
0D2B:  MOVF   7B,W
0D2C:  MOVWF  33
0D2D:  BCF    0A.3
0D2E:  BCF    03.5
0D2F:  CALL   6FE
0D30:  BSF    0A.3
0D31:  MOVF   7A,W
0D32:  BSF    03.5
0D33:  MOVWF  36
0D34:  MOVF   79,W
0D35:  MOVWF  35
0D36:  MOVF   78,W
0D37:  MOVWF  34
0D38:  MOVF   77,W
0D39:  MOVWF  33
0D3A:  CLRF   3A
0D3B:  CLRF   39
0D3C:  MOVLW  7A
0D3D:  MOVWF  38
0D3E:  MOVLW  82
0D3F:  MOVWF  37
0D40:  BCF    0A.3
0D41:  BCF    03.5
0D42:  CALL   71D
0D43:  BSF    0A.3
0D44:  MOVF   7A,W
0D45:  BSF    03.5
0D46:  MOVWF  36
0D47:  MOVF   79,W
0D48:  MOVWF  35
0D49:  MOVF   78,W
0D4A:  MOVWF  34
0D4B:  MOVF   77,W
0D4C:  MOVWF  33
0D4D:  BCF    0A.3
0D4E:  BCF    03.5
0D4F:  CALL   794
0D50:  BSF    0A.3
0D51:  MOVF   79,W
0D52:  MOVWF  65
0D53:  MOVF   78,W
0D54:  MOVWF  64
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
0D55:  MOVLW  A0
0D56:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
0D57:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                               //Loads the Ventilation time 
....................                               if((counter_StartOpsButtonTick == 3) && (LockingMechanism == 1)){        
0D58:  MOVF   75,W
0D59:  SUBLW  03
0D5A:  BTFSS  03.2
0D5B:  GOTO   5B0
0D5C:  DECFSZ 2F,W
0D5D:  GOTO   5B0
....................                                     
....................                                     //The SelectedTime variable will be sent to the macro to configure the desired_value variable 
....................                                     SelectedTime = MikroClient[ClientNumber].time_Ventilation; 
0D5E:  RLF    40,W
0D5F:  MOVWF  77
0D60:  RLF    77,F
0D61:  RLF    77,F
0D62:  MOVLW  F8
0D63:  ANDWF  77,F
0D64:  MOVF   77,W
0D65:  ADDLW  04
0D66:  ADDLW  30
0D67:  MOVWF  04
0D68:  BCF    03.7
0D69:  INCF   04,F
0D6A:  MOVF   00,W
0D6B:  MOVWF  7C
0D6C:  DECF   04,F
0D6D:  MOVF   00,W
0D6E:  MOVWF  7B
....................                                      
....................                                     //The CurrentTime variable will hold the current number  to be displayed 
....................                                     CurrentTime = MikroClient[ClientNumber].time_Ventilation; 
0D6F:  RLF    40,W
0D70:  MOVWF  77
0D71:  RLF    77,F
0D72:  RLF    77,F
0D73:  MOVLW  F8
0D74:  ANDWF  77,F
0D75:  MOVF   77,W
0D76:  ADDLW  04
0D77:  ADDLW  30
0D78:  MOVWF  04
0D79:  BCF    03.7
0D7A:  INCF   04,F
0D7B:  MOVF   00,W
0D7C:  MOVWF  74
0D7D:  DECF   04,F
0D7E:  MOVF   00,W
0D7F:  MOVWF  73
....................                                      
....................                                     //Determine the value that the desired_value variable will take. 
....................                                     SECOND_TO_ISR_COUNT(SelectedTime);   
0D80:  MOVF   7C,W
0D81:  BSF    03.5
0D82:  MOVWF  34
0D83:  MOVF   7B,W
0D84:  MOVWF  33
0D85:  BCF    0A.3
0D86:  BCF    03.5
0D87:  CALL   6FE
0D88:  BSF    0A.3
0D89:  MOVF   7A,W
0D8A:  BSF    03.5
0D8B:  MOVWF  36
0D8C:  MOVF   79,W
0D8D:  MOVWF  35
0D8E:  MOVF   78,W
0D8F:  MOVWF  34
0D90:  MOVF   77,W
0D91:  MOVWF  33
0D92:  CLRF   3A
0D93:  CLRF   39
0D94:  MOVLW  7A
0D95:  MOVWF  38
0D96:  MOVLW  82
0D97:  MOVWF  37
0D98:  BCF    0A.3
0D99:  BCF    03.5
0D9A:  CALL   71D
0D9B:  BSF    0A.3
0D9C:  MOVF   7A,W
0D9D:  BSF    03.5
0D9E:  MOVWF  36
0D9F:  MOVF   79,W
0DA0:  MOVWF  35
0DA1:  MOVF   78,W
0DA2:  MOVWF  34
0DA3:  MOVF   77,W
0DA4:  MOVWF  33
0DA5:  BCF    0A.3
0DA6:  BCF    03.5
0DA7:  CALL   794
0DA8:  BSF    0A.3
0DA9:  MOVF   79,W
0DAA:  MOVWF  65
0DAB:  MOVF   78,W
0DAC:  MOVWF  64
....................                                      
....................                                     // Enable interrupts by setting GIE (Global Interrupt Enable) 
....................                                     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................                                     my_INTCON_REG |= 0xA0; 
0DAD:  MOVLW  A0
0DAE:  IORWF  0B,F
....................                                                                       
....................                                     //The lock mechanism was broken to prevent re-evaluation 
....................                                     LockingMechanism = 0; 
0DAF:  CLRF   2F
....................                                                                                  
....................                               } 
....................                                
....................                               //Load the selected amount of polish 
....................                               if((counter_StartOpsButtonTick == 4) && (LockingMechanism == 1)){ 
0DB0:  MOVF   75,W
0DB1:  SUBLW  04
0DB2:  BTFSS  03.2
0DB3:  GOTO   5D4
0DB4:  DECFSZ 2F,W
0DB5:  GOTO   5D4
....................                                
....................                                     //The loop will exit when the polish is finished or if the process is canceled 
....................                                     do{ 
....................                                      
....................                                        if(input(button_DrainPolishing) == 1){ 
0DB6:  BSF    03.5
0DB7:  BSF    30.2
0DB8:  MOVF   30,W
0DB9:  MOVWF  07
0DBA:  BCF    03.5
0DBB:  BTFSS  07.2
0DBC:  GOTO   5CA
....................                                           currentPolishAmount-=4; 
0DBD:  MOVLW  04
0DBE:  SUBWF  7D,F
0DBF:  MOVLW  00
0DC0:  BTFSS  03.0
0DC1:  MOVLW  01
0DC2:  SUBWF  7E,F
....................                                           delay_ms(100); 
0DC3:  MOVLW  64
0DC4:  BSF    03.5
0DC5:  MOVWF  3F
0DC6:  BCF    0A.3
0DC7:  BCF    03.5
0DC8:  CALL   13A
0DC9:  BSF    0A.3
....................                                           } 
....................                                            
....................                                           if(currentPolishAmount<0){ 
....................                                           currentPolishAmount=0; 
....................                                           } 
....................                                        //Display/scroll the CurrentTime value on the displays 
....................                                        sequentialDisplayScan(); 
0DCA:  CALL   12C
....................                                         
....................                                     }while(currentPolishAmount != 0); 
0DCB:  MOVF   7D,F
0DCC:  BTFSS  03.2
0DCD:  GOTO   5B6
0DCE:  MOVF   7E,F
0DCF:  BTFSS  03.2
0DD0:  GOTO   5B6
....................                                         
....................                                     LockingMechanism=0; 
0DD1:  CLRF   2F
....................                                     allProcessComplate_flag = 1; 
0DD2:  MOVLW  01
0DD3:  MOVWF  76
....................                               } 
....................                                                      
....................                              //Display/scroll the CurrentTime value on the displays 
....................                              sequentialDisplayScan(); 
0DD4:  CALL   12C
....................                               
....................                               
....................                              /**  
....................                                * These conditions are used to break out of the loop for various reasons,  
....................                                * and will redirect the program back to the main menu. 
....................                                *  
....................                                * - If allProcessComplete_flag is 1, indicating all processes are finished, the loop will exit. 
....................                                * - If CurrentTime equals 1 and SelectedTime equals 60, the loop will also exit. 
....................                                */ 
....................                                 if(allProcessComplate_flag == 1){ 
0DD5:  DECFSZ 76,W
0DD6:  GOTO   5D8
....................                                     break;     
0DD7:  GOTO   5EA
....................                                 }                                     
....................                                 if((CurrentTime==1) && (SelectedTime==60)){ 
0DD8:  DECFSZ 73,W
0DD9:  GOTO   5E4
0DDA:  MOVF   74,F
0DDB:  BTFSS  03.2
0DDC:  GOTO   5E4
0DDD:  MOVF   7B,W
0DDE:  SUBLW  3C
0DDF:  BTFSS  03.2
0DE0:  GOTO   5E4
0DE1:  MOVF   7C,F
0DE2:  BTFSC  03.2
....................                                   break; 
0DE3:  GOTO   5EA
....................                                 } 
....................              
....................                         }while( (CurrentTime!=0) ); 
0DE4:  MOVF   73,F
0DE5:  BTFSS  03.2
0DE6:  GOTO   4AC
0DE7:  MOVF   74,F
0DE8:  BTFSS  03.2
0DE9:  GOTO   4AC
....................                          
....................                 } 
....................                              
....................                delay_ms(100); 
0DEA:  MOVLW  64
0DEB:  BSF    03.5
0DEC:  MOVWF  3F
0DED:  BCF    0A.3
0DEE:  BCF    03.5
0DEF:  CALL   13A
0DF0:  BSF    0A.3
....................                 
....................             //Load the initial value(0) into the segments. 
....................             loadZeroValue_2_DisplaySegment(); 
0DF1:  BCF    0A.3
0DF2:  GOTO   7B5
0DF3:  BSF    0A.3
....................    
....................       }while(OPS_Status!=55);   
0DF4:  MOVF   2D,W
0DF5:  SUBLW  37
0DF6:  BTFSC  03.2
0DF7:  GOTO   5FA
0DF8:  BSF    03.5
0DF9:  GOTO   399
....................        
....................    //Display the record sequentially on the LCD 
....................    DisplayRecordsSequentiallyOnLCD();  
0DFA:  GOTO   1E1
....................        
.................... /*-----------------------------------------------------------------------------------------------*/ 
.................... /*                   >>> END - SEQUENTIAL STEPS OF THE OPERATION - END <<<                       */ 
.................... /*-----------------------------------------------------------------------------------------------*/       
....................        
....................              
....................     while(1) 
....................     { 
0DFB:  GOTO   5FB
....................  
....................     } 
....................   
.................... } 
....................  
0DFC:  SLEEP
....................  
.................... /* ======== -BEGIN- SYSTEM CONFIGURATION FUNCTIONS -BEGIN- ======== */ 
.................... //Function-1 
.................... void SubSystem_Init(void){ 
....................  lcd_init(); 
....................  trisSetting_Init(); 
....................  displaySetting_Init(); 
....................  interruptSetting_Init(); 
....................  adcSetting_Init(); 
*
022B:  BSF    0A.3
022C:  BCF    0A.4
022D:  GOTO   37E (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void trisSetting_Init(){ 
....................    set_tris_b(0x01); //B0       ==> Cancel all operations and close the system 
*
01FB:  MOVLW  01
01FC:  MOVWF  06
....................                      //B1 to B7 ==> 7-Segment Display  
....................                       
....................    //Assign the Display Scanning switches as outputs 
....................    output_drive(pin_HundredDigit_switch);  
01FD:  BCF    09.2
....................    output_drive(pin_TensDigit_switch); 
01FE:  BCF    09.0
....................    output_drive(pin_UnitDigit_switch); 
01FF:  BCF    09.1
....................       
.................... } 
....................  
.................... //Function-3 
.................... void interruptSetting_Init(){ 
.................... //---> OPERATION CANCEL BUTTON CONFIGURATION  <---// 
....................  
....................         //Interrupt on rising edge of INT pin  
....................         my_TIM0_OPTION_REG |= 0x40; 
*
0208:  BSF    03.5
0209:  BSF    01.6
....................         //External Interrupt Enable &  Global Interrupt Enable  
....................         my_INTCON_REG |= 0x90;  
020A:  MOVLW  90
020B:  BCF    03.5
020C:  IORWF  0B,F
....................       
.................... //---> TIMER & INTERRUPT CONFIGURATION  <---// 
....................       
....................         // T(overflow) = InstructionTime*PSC*(256-TIM0_val) 
....................         //        64mS = 1uS * 256 * (256-56) 
....................         my_TIM0_OPTION_REG &= 0xC7 ; 
020D:  MOVLW  C7
020E:  BSF    03.5
020F:  ANDWF  01,F
....................         my_TIM0_MODULE_REG = 56; 
0210:  MOVLW  38
0211:  BCF    03.5
0212:  MOVWF  01
....................  
.................... } 
....................  
.................... //Function-4 
.................... void adcSetting_Init(){ 
....................      //-CONFIG--> Surfing Potentiometer & Timer Potentiometer 
....................         setup_adc_ports(sAN0|sAN1); 
0213:  BSF    03.5
0214:  BSF    03.6
0215:  MOVF   09,W
0216:  ANDLW  C0
0217:  MOVWF  09
0218:  BCF    03.6
0219:  BCF    1F.4
021A:  BCF    1F.5
021B:  MOVLW  03
021C:  BSF    03.6
021D:  MOVWF  08
....................         setup_adc(adc_clock_div_32); 
021E:  BCF    03.5
021F:  BCF    03.6
0220:  BCF    1F.6
0221:  BSF    1F.7
0222:  BSF    03.5
0223:  BSF    1F.7
0224:  BCF    03.5
0225:  BSF    1F.0
....................         delay_us(20); 
0226:  MOVLW  06
0227:  MOVWF  77
0228:  DECFSZ 77,F
0229:  GOTO   228
022A:  NOP
....................         
....................      //-CONFIG--> Process Intensity Potentiometer 
.................... } 
....................  
.................... //Function-5 
.................... void displaySetting_Init(){ 
....................  
....................    //Apply voltage to display the digits 
....................    output_high(pin_UnitDigit_switch);     
*
0200:  BCF    03.5
0201:  BSF    09.1
....................    output_high(pin_TensDigit_switch);      
0202:  BSF    09.0
....................    output_high(pin_HundredDigit_switch);  
0203:  BSF    09.2
....................     
....................    //Load the initial value into the segments. 
....................    output_b(segmentTable[0]);  
0204:  BSF    03.5
0205:  MOVF   20,W
0206:  BCF    03.5
0207:  MOVWF  06
.................... } 
....................  
.................... /* ======== -END- SYSTEM CONFIGURATION FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
.................... /* ======== -BEGIN- LCD SCREEN FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief :It sequentially displays a welcome message and  
....................  *        prompts the user to present their ID card. 
....................  */ 
.................... void SubSystem_lcd_IdleStatus(void){ 
....................       printf(lcd_putc,"\f"); 
*
02F0:  MOVLW  0C
02F1:  BSF    03.5
02F2:  MOVWF  3E
02F3:  BCF    03.5
02F4:  CALL   242
....................       lcd_gotoxy(4,1); 
02F5:  MOVLW  04
02F6:  BSF    03.5
02F7:  MOVWF  3F
02F8:  MOVLW  01
02F9:  MOVWF  40
02FA:  BCF    03.5
02FB:  CALL   22E
....................       printf(lcd_putc,"Mikroleum'a"); 
02FC:  MOVLW  96
02FD:  BSF    03.6
02FE:  MOVWF  0D
02FF:  MOVLW  00
0300:  MOVWF  0F
0301:  BCF    03.6
0302:  CALL   27C
....................       lcd_gotoxy(4,2); 
0303:  MOVLW  04
0304:  BSF    03.5
0305:  MOVWF  3F
0306:  MOVLW  02
0307:  MOVWF  40
0308:  BCF    03.5
0309:  CALL   22E
....................       printf(lcd_putc,"Hosgeldiniz"); 
030A:  MOVLW  9C
030B:  BSF    03.6
030C:  MOVWF  0D
030D:  MOVLW  00
030E:  MOVWF  0F
030F:  BCF    03.6
0310:  CALL   27C
....................       delay_ms(500); 
0311:  MOVLW  02
0312:  BSF    03.5
0313:  MOVWF  33
0314:  MOVLW  FA
0315:  MOVWF  3F
0316:  BCF    03.5
0317:  CALL   13A
0318:  BSF    03.5
0319:  DECFSZ 33,F
031A:  GOTO   314
....................       printf(lcd_putc,"\f"); 
031B:  MOVLW  0C
031C:  MOVWF  3E
031D:  BCF    03.5
031E:  CALL   242
....................        
....................       lcd_gotoxy(1,1); 
031F:  MOVLW  01
0320:  BSF    03.5
0321:  MOVWF  3F
0322:  MOVWF  40
0323:  BCF    03.5
0324:  CALL   22E
....................       printf(lcd_putc,"Lutfen ID Karti"); 
0325:  MOVLW  A2
0326:  BSF    03.6
0327:  MOVWF  0D
0328:  MOVLW  00
0329:  MOVWF  0F
032A:  BCF    03.6
032B:  CALL   27C
....................       lcd_gotoxy(4,2); 
032C:  MOVLW  04
032D:  BSF    03.5
032E:  MOVWF  3F
032F:  MOVLW  02
0330:  MOVWF  40
0331:  BCF    03.5
0332:  CALL   22E
....................       printf(lcd_putc,"Gosteriniz"); 
0333:  MOVLW  AA
0334:  BSF    03.6
0335:  MOVWF  0D
0336:  MOVLW  00
0337:  MOVWF  0F
0338:  BCF    03.6
0339:  CALL   27C
....................       delay_ms(500); 
033A:  MOVLW  02
033B:  BSF    03.5
033C:  MOVWF  33
033D:  MOVLW  FA
033E:  MOVWF  3F
033F:  BCF    03.5
0340:  CALL   13A
0341:  BSF    03.5
0342:  DECFSZ 33,F
0343:  GOTO   33D
....................       printf(lcd_putc,"\f"); 
0344:  MOVLW  0C
0345:  MOVWF  3E
0346:  BCF    03.5
0347:  CALL   242
0348:  BSF    0A.3
0349:  BCF    0A.4
034A:  GOTO   381 (RETURN)
.................... } 
....................  
.................... //Function-2 
.................... void NavigateOperationMenu(void){ 
....................    printf(lcd_putc, "\f"); // LCD'yi temizle 
*
03D9:  MOVLW  0C
03DA:  BSF    03.5
03DB:  MOVWF  3E
03DC:  BCF    03.5
03DD:  CALL   242
....................  
....................     // 1. Seçenek 
....................     if (Index_OptionMenu == 0) { 
03DE:  MOVF   41,F
03DF:  BTFSS  03.2
03E0:  GOTO   3FC
....................         lcd_gotoxy(1, 1); 
03E1:  MOVLW  01
03E2:  BSF    03.5
03E3:  MOVWF  3F
03E4:  MOVWF  40
03E5:  BCF    03.5
03E6:  CALL   22E
....................         printf(lcd_putc, "1-Kopuk Islem <-"); 
03E7:  MOVLW  B0
03E8:  BSF    03.6
03E9:  MOVWF  0D
03EA:  MOVLW  00
03EB:  MOVWF  0F
03EC:  BCF    03.6
03ED:  CALL   27C
....................         lcd_gotoxy(1, 2); 
03EE:  MOVLW  01
03EF:  BSF    03.5
03F0:  MOVWF  3F
03F1:  MOVLW  02
03F2:  MOVWF  40
03F3:  BCF    03.5
03F4:  CALL   22E
....................         printf(lcd_putc, "2-Su Islem");    
03F5:  MOVLW  B9
03F6:  BSF    03.6
03F7:  MOVWF  0D
03F8:  MOVLW  00
03F9:  MOVWF  0F
03FA:  BCF    03.6
03FB:  CALL   27C
....................     }  
....................  
....................     // 2. Seçenek 
....................     if (Index_OptionMenu == 1) { 
03FC:  DECFSZ 41,W
03FD:  GOTO   419
....................         lcd_gotoxy(1, 1); 
03FE:  MOVLW  01
03FF:  BSF    03.5
0400:  MOVWF  3F
0401:  MOVWF  40
0402:  BCF    03.5
0403:  CALL   22E
....................         printf(lcd_putc, "2-Su Islem <-"); 
0404:  MOVLW  BF
0405:  BSF    03.6
0406:  MOVWF  0D
0407:  MOVLW  00
0408:  MOVWF  0F
0409:  BCF    03.6
040A:  CALL   27C
....................         lcd_gotoxy(1, 2); 
040B:  MOVLW  01
040C:  BSF    03.5
040D:  MOVWF  3F
040E:  MOVLW  02
040F:  MOVWF  40
0410:  BCF    03.5
0411:  CALL   22E
....................         printf(lcd_putc, "3-Hava Islem");        
0412:  MOVLW  C6
0413:  BSF    03.6
0414:  MOVWF  0D
0415:  MOVLW  00
0416:  MOVWF  0F
0417:  BCF    03.6
0418:  CALL   27C
....................     } 
....................      
....................     // 3. Seçenek 
....................         if (Index_OptionMenu == 2) { 
0419:  MOVF   41,W
041A:  SUBLW  02
041B:  BTFSS  03.2
041C:  GOTO   438
....................         lcd_gotoxy(1, 1); 
041D:  MOVLW  01
041E:  BSF    03.5
041F:  MOVWF  3F
0420:  MOVWF  40
0421:  BCF    03.5
0422:  CALL   22E
....................         printf(lcd_putc, "3-Hava Islem <-"); 
0423:  MOVLW  CD
0424:  BSF    03.6
0425:  MOVWF  0D
0426:  MOVLW  00
0427:  MOVWF  0F
0428:  BCF    03.6
0429:  CALL   27C
....................         lcd_gotoxy(1, 2); 
042A:  MOVLW  01
042B:  BSF    03.5
042C:  MOVWF  3F
042D:  MOVLW  02
042E:  MOVWF  40
042F:  BCF    03.5
0430:  CALL   22E
....................         printf(lcd_putc, "4-Cila Islem");    
0431:  MOVLW  D5
0432:  BSF    03.6
0433:  MOVWF  0D
0434:  MOVLW  00
0435:  MOVWF  0F
0436:  BCF    03.6
0437:  CALL   27C
....................     }  
....................  
....................     // 4. Seçenek 
....................     if (Index_OptionMenu == 3) { 
0438:  MOVF   41,W
0439:  SUBLW  03
043A:  BTFSS  03.2
043B:  GOTO   457
....................         lcd_gotoxy(1, 1); 
043C:  MOVLW  01
043D:  BSF    03.5
043E:  MOVWF  3F
043F:  MOVWF  40
0440:  BCF    03.5
0441:  CALL   22E
....................         printf(lcd_putc, "4-Cila Islem <-"); 
0442:  MOVLW  DC
0443:  BSF    03.6
0444:  MOVWF  0D
0445:  MOVLW  00
0446:  MOVWF  0F
0447:  BCF    03.6
0448:  CALL   27C
....................         lcd_gotoxy(1, 2); 
0449:  MOVLW  01
044A:  BSF    03.5
044B:  MOVWF  3F
044C:  MOVLW  02
044D:  MOVWF  40
044E:  BCF    03.5
044F:  CALL   22E
....................         printf(lcd_putc, "5-Kayit Islem");     
0450:  MOVLW  E4
0451:  BSF    03.6
0452:  MOVWF  0D
0453:  MOVLW  00
0454:  MOVWF  0F
0455:  BCF    03.6
0456:  CALL   27C
....................     } 
....................      
....................     // 5. Seçenek 
....................     if (Index_OptionMenu == 4) { 
0457:  MOVF   41,W
0458:  SUBLW  04
0459:  BTFSS  03.2
045A:  GOTO   468
....................         lcd_gotoxy(1, 1); 
045B:  MOVLW  01
045C:  BSF    03.5
045D:  MOVWF  3F
045E:  MOVWF  40
045F:  BCF    03.5
0460:  CALL   22E
....................         printf(lcd_putc, "5-Kayit Islem <-");  
0461:  MOVLW  EB
0462:  BSF    03.6
0463:  MOVWF  0D
0464:  MOVLW  00
0465:  MOVWF  0F
0466:  BCF    03.6
0467:  CALL   27C
....................     } 
0468:  BSF    0A.3
0469:  BCF    0A.4
046A:  GOTO   3D6 (RETURN)
....................  
....................  
.................... } 
....................  
.................... //Function-3 
.................... void NavigateTimeMoneyPreferenceMenu(void){ 
....................     
....................    printf(lcd_putc, "\f");  
*
0580:  MOVLW  0C
0581:  BSF    03.5
0582:  MOVWF  3E
0583:  BCF    03.5
0584:  CALL   242
....................    lcd_gotoxy(1,1); 
0585:  MOVLW  01
0586:  BSF    03.5
0587:  MOVWF  3F
0588:  MOVWF  40
0589:  BCF    03.5
058A:  CALL   22E
....................    printf(lcd_putc, "Ucret:%d tl",Index_TimeMoneyPreference*2+2); 
058B:  BCF    03.0
058C:  RLF    42,W
058D:  ADDLW  02
058E:  BSF    03.5
058F:  MOVWF  33
0590:  MOVLW  F4
0591:  BCF    03.5
0592:  BSF    03.6
0593:  MOVWF  0D
0594:  MOVLW  00
0595:  MOVWF  0F
0596:  BCF    03.0
0597:  MOVLW  06
0598:  BSF    03.5
0599:  BCF    03.6
059A:  MOVWF  35
059B:  BCF    03.5
059C:  CALL   46B
059D:  BSF    03.5
059E:  MOVF   33,W
059F:  MOVWF  34
05A0:  MOVLW  18
05A1:  MOVWF  35
*
0603:  MOVLW  20
0604:  BSF    03.5
0605:  MOVWF  3E
0606:  BCF    03.5
0607:  CALL   242
0608:  MOVLW  74
0609:  BSF    03.5
060A:  MOVWF  3E
060B:  BCF    03.5
060C:  CALL   242
060D:  MOVLW  6C
060E:  BSF    03.5
060F:  MOVWF  3E
0610:  BCF    03.5
0611:  CALL   242
....................    lcd_gotoxy(1,2); 
0612:  MOVLW  01
0613:  BSF    03.5
0614:  MOVWF  3F
0615:  MOVLW  02
0616:  MOVWF  40
0617:  BCF    03.5
0618:  CALL   22E
....................    printf(lcd_putc, "Sure:%ld",time_arr[Index_TimeMoneyPreference]); 
0619:  BCF    03.0
061A:  RLF    42,W
061B:  ADDLW  4A
061C:  MOVWF  04
061D:  BCF    03.7
061E:  INCF   04,F
061F:  MOVF   00,W
0620:  BSF    03.5
0621:  MOVWF  34
0622:  DECF   04,F
0623:  MOVF   00,W
0624:  MOVWF  33
0625:  MOVLW  FA
0626:  BCF    03.5
0627:  BSF    03.6
0628:  MOVWF  0D
0629:  MOVLW  00
062A:  MOVWF  0F
062B:  BCF    03.0
062C:  MOVLW  05
062D:  BSF    03.5
062E:  BCF    03.6
062F:  MOVWF  35
0630:  BCF    03.5
0631:  CALL   46B
0632:  MOVLW  10
0633:  MOVWF  04
0634:  BSF    03.5
0635:  MOVF   34,W
0636:  MOVWF  36
0637:  MOVF   33,W
0638:  MOVWF  35
0639:  BCF    03.5
063A:  CALL   4FC
....................    lcd_gotoxy(10,2); 
063B:  MOVLW  0A
063C:  BSF    03.5
063D:  MOVWF  3F
063E:  MOVLW  02
063F:  MOVWF  40
0640:  BCF    03.5
0641:  CALL   22E
....................    printf(lcd_putc, "Sec:"); 
0642:  MOVLW  FF
0643:  BSF    03.6
0644:  MOVWF  0D
0645:  MOVLW  00
0646:  MOVWF  0F
0647:  BCF    03.6
0648:  CALL   27C
....................    lcd_gotoxy(14,2); 
0649:  MOVLW  0E
064A:  BSF    03.5
064B:  MOVWF  3F
064C:  MOVLW  02
064D:  MOVWF  40
064E:  BCF    03.5
064F:  CALL   22E
....................    printf(lcd_putc, "%c",SelectionState); 
0650:  MOVF   2E,W
0651:  BSF    03.5
0652:  MOVWF  3E
0653:  BCF    03.5
0654:  CALL   242
....................     
....................     
....................    if(input(button_Select) == 1){ 
0655:  BSF    03.5
0656:  BSF    05.5
0657:  BCF    03.5
0658:  BTFSS  05.5
0659:  GOTO   6ED
....................       SelectionState = 'X'; 
065A:  MOVLW  58
065B:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 0){ 
065C:  MOVF   41,F
065D:  BTFSS  03.2
065E:  GOTO   68C
....................          MikroClient[ClientNumber].time_Foaming = time_arr[Index_TimeMoneyPreference]; 
065F:  RLF    40,W
0660:  MOVWF  77
0661:  RLF    77,F
0662:  RLF    77,F
0663:  MOVLW  F8
0664:  ANDWF  77,F
0665:  MOVF   77,W
0666:  ADDLW  30
0667:  MOVWF  78
0668:  CLRF   7A
0669:  BTFSC  03.0
066A:  INCF   7A,F
066B:  MOVF   78,W
066C:  BSF    03.5
066D:  MOVWF  33
066E:  MOVF   7A,W
066F:  MOVWF  34
0670:  BCF    03.0
0671:  BCF    03.5
0672:  RLF    42,W
0673:  ADDLW  4A
0674:  MOVWF  04
0675:  BCF    03.7
0676:  INCF   04,F
0677:  MOVF   00,W
0678:  MOVWF  7A
0679:  DECF   04,F
067A:  MOVF   00,W
067B:  BSF    03.5
067C:  MOVWF  35
067D:  MOVF   7A,W
067E:  MOVWF  36
067F:  MOVF   33,W
0680:  MOVWF  04
0681:  BCF    03.7
0682:  BTFSC  34.0
0683:  BSF    03.7
0684:  INCF   04,F
0685:  MOVF   36,W
0686:  MOVWF  00
0687:  DECF   04,F
0688:  MOVF   35,W
0689:  MOVWF  00
....................       } 
068A:  GOTO   6EC
068B:  BCF    03.5
....................       else if(Index_OptionMenu == 1){ 
068C:  DECFSZ 41,W
068D:  GOTO   6BC
....................          MikroClient[ClientNumber].time_Washing = time_arr[Index_TimeMoneyPreference]; 
068E:  RLF    40,W
068F:  MOVWF  77
0690:  RLF    77,F
0691:  RLF    77,F
0692:  MOVLW  F8
0693:  ANDWF  77,F
0694:  MOVF   77,W
0695:  ADDLW  02
0696:  ADDLW  30
0697:  MOVWF  78
0698:  CLRF   7A
0699:  BTFSC  03.0
069A:  INCF   7A,F
069B:  MOVF   78,W
069C:  BSF    03.5
069D:  MOVWF  33
069E:  MOVF   7A,W
069F:  MOVWF  34
06A0:  BCF    03.0
06A1:  BCF    03.5
06A2:  RLF    42,W
06A3:  ADDLW  4A
06A4:  MOVWF  04
06A5:  BCF    03.7
06A6:  INCF   04,F
06A7:  MOVF   00,W
06A8:  MOVWF  7A
06A9:  DECF   04,F
06AA:  MOVF   00,W
06AB:  BSF    03.5
06AC:  MOVWF  35
06AD:  MOVF   7A,W
06AE:  MOVWF  36
06AF:  MOVF   33,W
06B0:  MOVWF  04
06B1:  BCF    03.7
06B2:  BTFSC  34.0
06B3:  BSF    03.7
06B4:  INCF   04,F
06B5:  MOVF   36,W
06B6:  MOVWF  00
06B7:  DECF   04,F
06B8:  MOVF   35,W
06B9:  MOVWF  00
....................       } 
06BA:  GOTO   6EC
06BB:  BCF    03.5
....................       else if(Index_OptionMenu == 2){ 
06BC:  MOVF   41,W
06BD:  SUBLW  02
06BE:  BTFSS  03.2
06BF:  GOTO   6ED
....................          MikroClient[ClientNumber].time_Ventilation = time_arr[Index_TimeMoneyPreference]; 
06C0:  RLF    40,W
06C1:  MOVWF  77
06C2:  RLF    77,F
06C3:  RLF    77,F
06C4:  MOVLW  F8
06C5:  ANDWF  77,F
06C6:  MOVF   77,W
06C7:  ADDLW  04
06C8:  ADDLW  30
06C9:  MOVWF  78
06CA:  CLRF   7A
06CB:  BTFSC  03.0
06CC:  INCF   7A,F
06CD:  MOVF   78,W
06CE:  BSF    03.5
06CF:  MOVWF  33
06D0:  MOVF   7A,W
06D1:  MOVWF  34
06D2:  BCF    03.0
06D3:  BCF    03.5
06D4:  RLF    42,W
06D5:  ADDLW  4A
06D6:  MOVWF  04
06D7:  BCF    03.7
06D8:  INCF   04,F
06D9:  MOVF   00,W
06DA:  MOVWF  7A
06DB:  DECF   04,F
06DC:  MOVF   00,W
06DD:  BSF    03.5
06DE:  MOVWF  35
06DF:  MOVF   7A,W
06E0:  MOVWF  36
06E1:  MOVF   33,W
06E2:  MOVWF  04
06E3:  BCF    03.7
06E4:  BTFSC  34.0
06E5:  BSF    03.7
06E6:  INCF   04,F
06E7:  MOVF   36,W
06E8:  MOVWF  00
06E9:  DECF   04,F
06EA:  MOVF   35,W
06EB:  MOVWF  00
06EC:  BCF    03.5
....................       } 
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
06ED:  BSF    03.5
06EE:  BSF    30.0
06EF:  MOVF   30,W
06F0:  MOVWF  07
06F1:  BCF    03.5
06F2:  BTFSS  07.0
06F3:  GOTO   6F6
....................       SelectionState = ' '; 
06F4:  MOVLW  20
06F5:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
06F6:  MOVLW  50
06F7:  BSF    03.5
06F8:  MOVWF  3F
06F9:  BCF    03.5
06FA:  CALL   13A
06FB:  BSF    0A.3
06FC:  BCF    0A.4
06FD:  GOTO   41E (RETURN)
.................... } 
....................  
.................... //Function-4 
.................... void NavigatePolishingMenu(){ 
....................    printf(lcd_putc, "\f");  
*
0800:  MOVLW  0C
0801:  BSF    03.5
0802:  MOVWF  3E
0803:  BCF    0A.3
0804:  BCF    03.5
0805:  CALL   242
0806:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
0807:  MOVLW  01
0808:  BSF    03.5
0809:  MOVWF  3F
080A:  MOVWF  40
080B:  BCF    0A.3
080C:  BCF    03.5
080D:  CALL   22E
080E:  BSF    0A.3
....................    printf(lcd_putc, "Ucret:%ld tl",(35*mililitrePolish[Index_PolishMililitre])); 
080F:  BCF    03.0
0810:  RLF    43,W
0811:  ADDLW  66
0812:  MOVWF  04
0813:  BCF    03.7
0814:  INCF   04,F
0815:  MOVF   00,W
0816:  MOVWF  7A
0817:  DECF   04,F
0818:  MOVF   00,W
0819:  BSF    03.5
081A:  MOVWF  33
081B:  MOVF   7A,W
081C:  MOVWF  34
081D:  CLRF   38
081E:  MOVLW  23
081F:  MOVWF  37
0820:  MOVF   34,W
0821:  MOVWF  3A
0822:  MOVF   33,W
0823:  MOVWF  39
0824:  BCF    0A.3
0825:  BCF    03.5
0826:  CALL   39B
0827:  BSF    0A.3
0828:  MOVF   79,W
0829:  BSF    03.5
082A:  MOVWF  34
082B:  MOVF   78,W
082C:  MOVWF  33
082D:  MOVLW  02
082E:  BCF    03.5
082F:  BSF    03.6
0830:  MOVWF  0D
0831:  MOVLW  01
0832:  MOVWF  0F
0833:  BCF    03.0
0834:  MOVLW  06
0835:  BSF    03.5
0836:  BCF    03.6
0837:  MOVWF  35
0838:  BCF    0A.3
0839:  BCF    03.5
083A:  CALL   46B
083B:  BSF    0A.3
083C:  MOVLW  10
083D:  MOVWF  04
083E:  BSF    03.5
083F:  MOVF   34,W
0840:  MOVWF  36
0841:  MOVF   33,W
0842:  MOVWF  35
0843:  BCF    0A.3
0844:  BCF    03.5
0845:  CALL   4FC
0846:  BSF    0A.3
0847:  MOVLW  20
0848:  BSF    03.5
0849:  MOVWF  3E
084A:  BCF    0A.3
084B:  BCF    03.5
084C:  CALL   242
084D:  BSF    0A.3
084E:  MOVLW  74
084F:  BSF    03.5
0850:  MOVWF  3E
0851:  BCF    0A.3
0852:  BCF    03.5
0853:  CALL   242
0854:  BSF    0A.3
0855:  MOVLW  6C
0856:  BSF    03.5
0857:  MOVWF  3E
0858:  BCF    0A.3
0859:  BCF    03.5
085A:  CALL   242
085B:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
085C:  MOVLW  01
085D:  BSF    03.5
085E:  MOVWF  3F
085F:  MOVLW  02
0860:  MOVWF  40
0861:  BCF    0A.3
0862:  BCF    03.5
0863:  CALL   22E
0864:  BSF    0A.3
....................    printf(lcd_putc, "Ml:%ld",(unsigned long int)(100*mililitrePolish[Index_PolishMililitre])); 
0865:  BCF    03.0
0866:  RLF    43,W
0867:  ADDLW  66
0868:  MOVWF  04
0869:  BCF    03.7
086A:  INCF   04,F
086B:  MOVF   00,W
086C:  MOVWF  7A
086D:  DECF   04,F
086E:  MOVF   00,W
086F:  BSF    03.5
0870:  MOVWF  33
0871:  MOVF   7A,W
0872:  MOVWF  34
0873:  CLRF   38
0874:  MOVLW  64
0875:  MOVWF  37
0876:  MOVF   34,W
0877:  MOVWF  3A
0878:  MOVF   33,W
0879:  MOVWF  39
087A:  BCF    0A.3
087B:  BCF    03.5
087C:  CALL   39B
087D:  BSF    0A.3
087E:  MOVF   79,W
087F:  BSF    03.5
0880:  MOVWF  34
0881:  MOVF   78,W
0882:  MOVWF  33
0883:  MOVLW  4D
0884:  MOVWF  3E
0885:  BCF    0A.3
0886:  BCF    03.5
0887:  CALL   242
0888:  BSF    0A.3
0889:  MOVLW  6C
088A:  BSF    03.5
088B:  MOVWF  3E
088C:  BCF    0A.3
088D:  BCF    03.5
088E:  CALL   242
088F:  BSF    0A.3
0890:  MOVLW  3A
0891:  BSF    03.5
0892:  MOVWF  3E
0893:  BCF    0A.3
0894:  BCF    03.5
0895:  CALL   242
0896:  BSF    0A.3
0897:  MOVLW  10
0898:  MOVWF  04
0899:  BSF    03.5
089A:  MOVF   34,W
089B:  MOVWF  36
089C:  MOVF   33,W
089D:  MOVWF  35
089E:  BCF    0A.3
089F:  BCF    03.5
08A0:  CALL   4FC
08A1:  BSF    0A.3
....................    lcd_gotoxy(10,2); 
08A2:  MOVLW  0A
08A3:  BSF    03.5
08A4:  MOVWF  3F
08A5:  MOVLW  02
08A6:  MOVWF  40
08A7:  BCF    0A.3
08A8:  BCF    03.5
08A9:  CALL   22E
08AA:  BSF    0A.3
....................    printf(lcd_putc, "Sec:"); 
08AB:  MOVLW  09
08AC:  BSF    03.6
08AD:  MOVWF  0D
08AE:  MOVLW  01
08AF:  MOVWF  0F
08B0:  BCF    0A.3
08B1:  BCF    03.6
08B2:  CALL   27C
08B3:  BSF    0A.3
....................    lcd_gotoxy(14,2); 
08B4:  MOVLW  0E
08B5:  BSF    03.5
08B6:  MOVWF  3F
08B7:  MOVLW  02
08B8:  MOVWF  40
08B9:  BCF    0A.3
08BA:  BCF    03.5
08BB:  CALL   22E
08BC:  BSF    0A.3
....................    printf(lcd_putc, "%c",SelectionState); 
08BD:  MOVF   2E,W
08BE:  BSF    03.5
08BF:  MOVWF  3E
08C0:  BCF    0A.3
08C1:  BCF    03.5
08C2:  CALL   242
08C3:  BSF    0A.3
....................     
....................     
....................    if(input(button_Select) == 1){ 
08C4:  BSF    03.5
08C5:  BSF    05.5
08C6:  BCF    03.5
08C7:  BTFSS  05.5
08C8:  GOTO   119
....................       SelectionState = 'X'; 
08C9:  MOVLW  58
08CA:  MOVWF  2E
....................        
....................       //-->The values will be saved into foaming, washing, ventilation register according to the Index_OptionMenu 
....................       if(Index_OptionMenu == 3){ 
08CB:  MOVF   41,W
08CC:  SUBLW  03
08CD:  BTFSS  03.2
08CE:  GOTO   119
....................          MikroClient[ClientNumber].mililitre_Polishing = (100*mililitrePolish[Index_PolishMililitre]);  
08CF:  RLF    40,W
08D0:  MOVWF  77
08D1:  RLF    77,F
08D2:  RLF    77,F
08D3:  MOVLW  F8
08D4:  ANDWF  77,F
08D5:  MOVF   77,W
08D6:  ADDLW  06
08D7:  ADDLW  30
08D8:  BSF    03.5
08D9:  MOVWF  33
08DA:  CLRF   34
08DB:  BTFSC  03.0
08DC:  INCF   34,F
08DD:  BCF    03.0
08DE:  BCF    03.5
08DF:  RLF    43,W
08E0:  ADDLW  66
08E1:  MOVWF  04
08E2:  BCF    03.7
08E3:  INCF   04,F
08E4:  MOVF   00,W
08E5:  MOVWF  7A
08E6:  DECF   04,F
08E7:  MOVF   00,W
08E8:  BSF    03.5
08E9:  MOVWF  35
08EA:  MOVF   7A,W
08EB:  MOVWF  36
08EC:  CLRF   38
08ED:  MOVLW  64
08EE:  MOVWF  37
08EF:  MOVF   36,W
08F0:  MOVWF  3A
08F1:  MOVF   35,W
08F2:  MOVWF  39
08F3:  BCF    0A.3
08F4:  BCF    03.5
08F5:  CALL   39B
08F6:  BSF    0A.3
08F7:  MOVF   78,W
08F8:  BSF    03.5
08F9:  MOVWF  35
08FA:  MOVF   79,W
08FB:  MOVWF  36
08FC:  MOVF   33,W
08FD:  MOVWF  04
08FE:  BCF    03.7
08FF:  BTFSC  34.0
0900:  BSF    03.7
0901:  INCF   04,F
0902:  MOVF   36,W
0903:  MOVWF  00
0904:  DECF   04,F
0905:  MOVF   35,W
0906:  MOVWF  00
....................          currentPolishAmount = MikroClient[ClientNumber].mililitre_Polishing; 
0907:  BCF    03.5
0908:  RLF    40,W
0909:  MOVWF  77
090A:  RLF    77,F
090B:  RLF    77,F
090C:  MOVLW  F8
090D:  ANDWF  77,F
090E:  MOVF   77,W
090F:  ADDLW  06
0910:  ADDLW  30
0911:  MOVWF  04
0912:  BCF    03.7
0913:  INCF   04,F
0914:  MOVF   00,W
0915:  MOVWF  7E
0916:  DECF   04,F
0917:  MOVF   00,W
0918:  MOVWF  7D
....................       } 
....................        
....................    } 
....................     
....................    if(input(button_RemoveSelect) == 1){ 
0919:  BSF    03.5
091A:  BSF    30.0
091B:  MOVF   30,W
091C:  MOVWF  07
091D:  BCF    03.5
091E:  BTFSS  07.0
091F:  GOTO   122
....................       SelectionState = ' '; 
0920:  MOVLW  20
0921:  MOVWF  2E
....................    } 
....................     
....................    delay_ms(80); 
0922:  MOVLW  50
0923:  BSF    03.5
0924:  MOVWF  3F
0925:  BCF    0A.3
0926:  BCF    03.5
0927:  CALL   13A
0928:  BSF    0A.3
0929:  BSF    0A.3
092A:  BCF    0A.4
092B:  GOTO   467 (RETURN)
.................... } 
....................  
.................... //Function-5 
.................... void DisplayRecordsSequentiallyOnLCD(){ 
....................    printf(lcd_putc,"\f"); 
*
09E1:  MOVLW  0C
09E2:  BSF    03.5
09E3:  MOVWF  3E
09E4:  BCF    0A.3
09E5:  BCF    03.5
09E6:  CALL   242
09E7:  BSF    0A.3
....................    lcd_gotoxy(2,1); 
09E8:  MOVLW  02
09E9:  BSF    03.5
09EA:  MOVWF  3F
09EB:  MOVLW  01
09EC:  MOVWF  40
09ED:  BCF    0A.3
09EE:  BCF    03.5
09EF:  CALL   22E
09F0:  BSF    0A.3
....................    printf(lcd_putc,"CLOSING"); 
09F1:  MOVLW  0C
09F2:  BSF    03.6
09F3:  MOVWF  0D
09F4:  MOVLW  01
09F5:  MOVWF  0F
09F6:  BCF    0A.3
09F7:  BCF    03.6
09F8:  CALL   27C
09F9:  BSF    0A.3
....................    delay_ms(1000); 
09FA:  MOVLW  04
09FB:  BSF    03.5
09FC:  MOVWF  33
09FD:  MOVLW  FA
09FE:  MOVWF  3F
09FF:  BCF    0A.3
0A00:  BCF    03.5
0A01:  CALL   13A
0A02:  BSF    0A.3
0A03:  BSF    03.5
0A04:  DECFSZ 33,F
0A05:  GOTO   1FD
....................    printf(lcd_putc,"\f");   
0A06:  MOVLW  0C
0A07:  MOVWF  3E
0A08:  BCF    0A.3
0A09:  BCF    03.5
0A0A:  CALL   242
0A0B:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
0A0C:  MOVLW  01
0A0D:  BSF    03.5
0A0E:  MOVWF  3F
0A0F:  MOVWF  40
0A10:  BCF    0A.3
0A11:  BCF    03.5
0A12:  CALL   22E
0A13:  BSF    0A.3
....................    printf(lcd_putc, "Kopuk:%ld", MikroClient[ClientNumber].time_Foaming); 
0A14:  RLF    40,W
0A15:  MOVWF  77
0A16:  RLF    77,F
0A17:  RLF    77,F
0A18:  MOVLW  F8
0A19:  ANDWF  77,F
0A1A:  MOVF   77,W
0A1B:  ADDLW  30
0A1C:  MOVWF  04
0A1D:  BCF    03.7
0A1E:  INCF   04,F
0A1F:  MOVF   00,W
0A20:  BSF    03.5
0A21:  MOVWF  34
0A22:  DECF   04,F
0A23:  MOVF   00,W
0A24:  MOVWF  33
0A25:  MOVLW  10
0A26:  BCF    03.5
0A27:  BSF    03.6
0A28:  MOVWF  0D
0A29:  MOVLW  01
0A2A:  MOVWF  0F
0A2B:  BCF    03.0
0A2C:  MOVLW  06
0A2D:  BSF    03.5
0A2E:  BCF    03.6
0A2F:  MOVWF  35
0A30:  BCF    0A.3
0A31:  BCF    03.5
0A32:  CALL   46B
0A33:  BSF    0A.3
0A34:  MOVLW  10
0A35:  MOVWF  04
0A36:  BSF    03.5
0A37:  MOVF   34,W
0A38:  MOVWF  36
0A39:  MOVF   33,W
0A3A:  MOVWF  35
0A3B:  BCF    0A.3
0A3C:  BCF    03.5
0A3D:  CALL   4FC
0A3E:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
0A3F:  MOVLW  01
0A40:  BSF    03.5
0A41:  MOVWF  3F
0A42:  MOVLW  02
0A43:  MOVWF  40
0A44:  BCF    0A.3
0A45:  BCF    03.5
0A46:  CALL   22E
0A47:  BSF    0A.3
....................    printf(lcd_putc, "Su::%ld",MikroClient[ClientNumber].time_Washing); 
0A48:  RLF    40,W
0A49:  MOVWF  77
0A4A:  RLF    77,F
0A4B:  RLF    77,F
0A4C:  MOVLW  F8
0A4D:  ANDWF  77,F
0A4E:  MOVF   77,W
0A4F:  ADDLW  02
0A50:  ADDLW  30
0A51:  MOVWF  04
0A52:  BCF    03.7
0A53:  INCF   04,F
0A54:  MOVF   00,W
0A55:  BSF    03.5
0A56:  MOVWF  34
0A57:  DECF   04,F
0A58:  MOVF   00,W
0A59:  MOVWF  33
0A5A:  MOVLW  15
0A5B:  BCF    03.5
0A5C:  BSF    03.6
0A5D:  MOVWF  0D
0A5E:  MOVLW  01
0A5F:  MOVWF  0F
0A60:  BCF    03.0
0A61:  MOVLW  04
0A62:  BSF    03.5
0A63:  BCF    03.6
0A64:  MOVWF  35
0A65:  BCF    0A.3
0A66:  BCF    03.5
0A67:  CALL   46B
0A68:  BSF    0A.3
0A69:  MOVLW  10
0A6A:  MOVWF  04
0A6B:  BSF    03.5
0A6C:  MOVF   34,W
0A6D:  MOVWF  36
0A6E:  MOVF   33,W
0A6F:  MOVWF  35
0A70:  BCF    0A.3
0A71:  BCF    03.5
0A72:  CALL   4FC
0A73:  BSF    0A.3
....................    delay_ms(2000); 
0A74:  MOVLW  08
0A75:  BSF    03.5
0A76:  MOVWF  33
0A77:  MOVLW  FA
0A78:  MOVWF  3F
0A79:  BCF    0A.3
0A7A:  BCF    03.5
0A7B:  CALL   13A
0A7C:  BSF    0A.3
0A7D:  BSF    03.5
0A7E:  DECFSZ 33,F
0A7F:  GOTO   277
....................    printf(lcd_putc,"\f");   
0A80:  MOVLW  0C
0A81:  MOVWF  3E
0A82:  BCF    0A.3
0A83:  BCF    03.5
0A84:  CALL   242
0A85:  BSF    0A.3
....................    lcd_gotoxy(1,1); 
0A86:  MOVLW  01
0A87:  BSF    03.5
0A88:  MOVWF  3F
0A89:  MOVWF  40
0A8A:  BCF    0A.3
0A8B:  BCF    03.5
0A8C:  CALL   22E
0A8D:  BSF    0A.3
....................    printf(lcd_putc, "Hava:%ld", MikroClient[ClientNumber].time_Ventilation); 
0A8E:  RLF    40,W
0A8F:  MOVWF  77
0A90:  RLF    77,F
0A91:  RLF    77,F
0A92:  MOVLW  F8
0A93:  ANDWF  77,F
0A94:  MOVF   77,W
0A95:  ADDLW  04
0A96:  ADDLW  30
0A97:  MOVWF  04
0A98:  BCF    03.7
0A99:  INCF   04,F
0A9A:  MOVF   00,W
0A9B:  BSF    03.5
0A9C:  MOVWF  34
0A9D:  DECF   04,F
0A9E:  MOVF   00,W
0A9F:  MOVWF  33
0AA0:  MOVLW  19
0AA1:  BCF    03.5
0AA2:  BSF    03.6
0AA3:  MOVWF  0D
0AA4:  MOVLW  01
0AA5:  MOVWF  0F
0AA6:  BCF    03.0
0AA7:  MOVLW  05
0AA8:  BSF    03.5
0AA9:  BCF    03.6
0AAA:  MOVWF  35
0AAB:  BCF    0A.3
0AAC:  BCF    03.5
0AAD:  CALL   46B
0AAE:  BSF    0A.3
0AAF:  MOVLW  10
0AB0:  MOVWF  04
0AB1:  BSF    03.5
0AB2:  MOVF   34,W
0AB3:  MOVWF  36
0AB4:  MOVF   33,W
0AB5:  MOVWF  35
0AB6:  BCF    0A.3
0AB7:  BCF    03.5
0AB8:  CALL   4FC
0AB9:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
0ABA:  MOVLW  01
0ABB:  BSF    03.5
0ABC:  MOVWF  3F
0ABD:  MOVLW  02
0ABE:  MOVWF  40
0ABF:  BCF    0A.3
0AC0:  BCF    03.5
0AC1:  CALL   22E
0AC2:  BSF    0A.3
....................     printf(lcd_putc, "Cila:%ld", MikroClient[ClientNumber].mililitre_Polishing); 
0AC3:  RLF    40,W
0AC4:  MOVWF  77
0AC5:  RLF    77,F
0AC6:  RLF    77,F
0AC7:  MOVLW  F8
0AC8:  ANDWF  77,F
0AC9:  MOVF   77,W
0ACA:  ADDLW  06
0ACB:  ADDLW  30
0ACC:  MOVWF  04
0ACD:  BCF    03.7
0ACE:  INCF   04,F
0ACF:  MOVF   00,W
0AD0:  BSF    03.5
0AD1:  MOVWF  34
0AD2:  DECF   04,F
0AD3:  MOVF   00,W
0AD4:  MOVWF  33
0AD5:  MOVLW  1E
0AD6:  BCF    03.5
0AD7:  BSF    03.6
0AD8:  MOVWF  0D
0AD9:  MOVLW  01
0ADA:  MOVWF  0F
0ADB:  BCF    03.0
0ADC:  MOVLW  05
0ADD:  BSF    03.5
0ADE:  BCF    03.6
0ADF:  MOVWF  35
0AE0:  BCF    0A.3
0AE1:  BCF    03.5
0AE2:  CALL   46B
0AE3:  BSF    0A.3
0AE4:  MOVLW  10
0AE5:  MOVWF  04
0AE6:  BSF    03.5
0AE7:  MOVF   34,W
0AE8:  MOVWF  36
0AE9:  MOVF   33,W
0AEA:  MOVWF  35
0AEB:  BCF    0A.3
0AEC:  BCF    03.5
0AED:  CALL   4FC
0AEE:  BSF    0A.3
....................    delay_ms(2000); 
0AEF:  MOVLW  08
0AF0:  BSF    03.5
0AF1:  MOVWF  33
0AF2:  MOVLW  FA
0AF3:  MOVWF  3F
0AF4:  BCF    0A.3
0AF5:  BCF    03.5
0AF6:  CALL   13A
0AF7:  BSF    0A.3
0AF8:  BSF    03.5
0AF9:  DECFSZ 33,F
0AFA:  GOTO   2F2
0AFB:  BCF    03.5
0AFC:  BSF    0A.3
0AFD:  BCF    0A.4
0AFE:  GOTO   5FB (RETURN)
.................... } 
....................  
.................... /* ======== -END- LCD SCREEN FUNCTIONS -END- ======== */ 
....................  
....................  
....................  
....................  
.................... /* ======== -BEGIN- UART PROTOCOL FUNCTIONS -BEGIN- ======== */ 
.................... /** 
....................  *@brief : This function checks the `readed_ID` variable to determine  
....................  *         the action to take based on predefined identifiers. Depending on the identifier, 
....................  *         it displays a welcome message for specific users or sets the system to an idle state. 
....................  */ 
.................... void SubSystem_uart_CheckTheMessage(void){ 
....................     
....................    if(readed_ID == '+'){      //Mr. Selçuk's ID 
*
034B:  MOVF   2B,W
034C:  SUBLW  2B
034D:  BTFSS  03.2
034E:  GOTO   36F
....................       ClientNumber = 0;       //System works for Mr. Selcuk 
034F:  CLRF   40
....................       lcd_gotoxy(4,1); 
0350:  MOVLW  04
0351:  BSF    03.5
0352:  MOVWF  3F
0353:  MOVLW  01
0354:  MOVWF  40
0355:  BCF    03.5
0356:  CALL   22E
....................       printf(lcd_putc,"Hosgeldiniz"); 
0357:  MOVLW  23
0358:  BSF    03.6
0359:  MOVWF  0D
035A:  MOVLW  01
035B:  MOVWF  0F
035C:  BCF    03.6
035D:  CALL   27C
....................       lcd_gotoxy(4,2); 
035E:  MOVLW  04
035F:  BSF    03.5
0360:  MOVWF  3F
0361:  MOVLW  02
0362:  MOVWF  40
0363:  BCF    03.5
0364:  CALL   22E
....................       printf(lcd_putc,"Selcuk Bey"); 
0365:  MOVLW  29
0366:  BSF    03.6
0367:  MOVWF  0D
0368:  MOVLW  01
0369:  MOVWF  0F
036A:  BCF    03.6
036B:  CALL   27C
....................       systemLock = 1; 
036C:  MOVLW  01
036D:  MOVWF  2C
....................    } 
036E:  GOTO   398
....................    else if(readed_ID == '*'){ //Mr. Emre's ID 
036F:  MOVF   2B,W
0370:  SUBLW  2A
0371:  BTFSS  03.2
0372:  GOTO   394
....................       ClientNumber = 1;       //System works for Mr. Emre 
0373:  MOVLW  01
0374:  MOVWF  40
....................       lcd_gotoxy(4,1); 
0375:  MOVLW  04
0376:  BSF    03.5
0377:  MOVWF  3F
0378:  MOVLW  01
0379:  MOVWF  40
037A:  BCF    03.5
037B:  CALL   22E
....................       printf(lcd_putc,"Hosgeldiniz"); 
037C:  MOVLW  2F
037D:  BSF    03.6
037E:  MOVWF  0D
037F:  MOVLW  01
0380:  MOVWF  0F
0381:  BCF    03.6
0382:  CALL   27C
....................       lcd_gotoxy(4,2); 
0383:  MOVLW  04
0384:  BSF    03.5
0385:  MOVWF  3F
0386:  MOVLW  02
0387:  MOVWF  40
0388:  BCF    03.5
0389:  CALL   22E
....................       printf(lcd_putc,"Emre Bey"); 
038A:  MOVLW  35
038B:  BSF    03.6
038C:  MOVWF  0D
038D:  MOVLW  01
038E:  MOVWF  0F
038F:  BCF    03.6
0390:  CALL   27C
....................       systemLock = 1; 
0391:  MOVLW  01
0392:  MOVWF  2C
....................    } 
0393:  GOTO   398
....................    else if(readed_ID == '.'){ //Slave pic is idle status 
0394:  MOVF   2B,W
0395:  SUBLW  2E
0396:  BTFSC  03.2
....................        systemLock = 0; 
0397:  CLRF   2C
....................    } 
0398:  BSF    0A.3
0399:  BCF    0A.4
039A:  GOTO   38A (RETURN)
....................  
.................... } 
.................... /* ======== -END- UART PROTOCOL FUNCTIONS -END- ======== */ 
....................  
....................  
.................... /* ======== -BEGIN- 7-SEGMENT DISPLAY -BEGIN- ======== */ 
.................... void sequentialDisplayScan(){ 
....................  
....................          //It indicates that the polishing process has now started 
....................          if((counter_StartOpsButtonTick == 4)){ 
*
092C:  MOVF   75,W
092D:  SUBLW  04
092E:  BTFSS  03.2
092F:  GOTO   15D
....................                    
....................             number_unitDigit    = (currentPolishAmount%10); 
0930:  MOVF   7E,W
0931:  BSF    03.5
0932:  MOVWF  36
0933:  MOVF   7D,W
0934:  MOVWF  35
0935:  CLRF   38
0936:  MOVLW  0A
0937:  MOVWF  37
0938:  BCF    0A.3
0939:  BCF    03.5
093A:  CALL   3B2
093B:  BSF    0A.3
093C:  MOVF   77,W
093D:  MOVWF  70
....................             number_tensDigit    = ((currentPolishAmount/10)%10); 
093E:  MOVF   7E,W
093F:  BSF    03.5
0940:  MOVWF  36
0941:  MOVF   7D,W
0942:  MOVWF  35
0943:  CLRF   38
0944:  MOVLW  0A
0945:  MOVWF  37
0946:  BCF    0A.3
0947:  BCF    03.5
0948:  CALL   3B2
0949:  BSF    0A.3
094A:  MOVF   79,W
094B:  BSF    03.5
094C:  MOVWF  34
094D:  MOVF   78,W
094E:  MOVWF  33
094F:  MOVF   34,W
0950:  MOVWF  36
0951:  MOVF   33,W
0952:  MOVWF  35
0953:  CLRF   38
0954:  MOVLW  0A
0955:  MOVWF  37
0956:  BCF    0A.3
0957:  BCF    03.5
0958:  CALL   3B2
0959:  BSF    0A.3
095A:  MOVF   77,W
095B:  MOVWF  71
....................              
....................          } 
095C:  GOTO   1A7
....................          //CurrentTime will be taken from the timer. 
....................          else{ 
....................              
....................             number_unitDigit    = (CurrentTime%10);   
095D:  MOVF   74,W
095E:  BSF    03.5
095F:  MOVWF  36
0960:  MOVF   73,W
0961:  MOVWF  35
0962:  CLRF   38
0963:  MOVLW  0A
0964:  MOVWF  37
0965:  BCF    0A.3
0966:  BCF    03.5
0967:  CALL   3B2
0968:  BSF    0A.3
0969:  MOVF   77,W
096A:  MOVWF  70
....................             number_tensDigit    = ((CurrentTime/10)%10);  
096B:  MOVF   74,W
096C:  BSF    03.5
096D:  MOVWF  36
096E:  MOVF   73,W
096F:  MOVWF  35
0970:  CLRF   38
0971:  MOVLW  0A
0972:  MOVWF  37
0973:  BCF    0A.3
0974:  BCF    03.5
0975:  CALL   3B2
0976:  BSF    0A.3
0977:  MOVF   79,W
0978:  BSF    03.5
0979:  MOVWF  34
097A:  MOVF   78,W
097B:  MOVWF  33
097C:  MOVF   34,W
097D:  MOVWF  36
097E:  MOVF   33,W
097F:  MOVWF  35
0980:  CLRF   38
0981:  MOVLW  0A
0982:  MOVWF  37
0983:  BCF    0A.3
0984:  BCF    03.5
0985:  CALL   3B2
0986:  BSF    0A.3
0987:  MOVF   77,W
0988:  MOVWF  71
....................             number_hundredDigit = ((CurrentTime/100)%10); 
0989:  MOVF   74,W
098A:  BSF    03.5
098B:  MOVWF  36
098C:  MOVF   73,W
098D:  MOVWF  35
098E:  CLRF   38
098F:  MOVLW  64
0990:  MOVWF  37
0991:  BCF    0A.3
0992:  BCF    03.5
0993:  CALL   3B2
0994:  BSF    0A.3
0995:  MOVF   79,W
0996:  BSF    03.5
0997:  MOVWF  34
0998:  MOVF   78,W
0999:  MOVWF  33
099A:  MOVF   34,W
099B:  MOVWF  36
099C:  MOVF   33,W
099D:  MOVWF  35
099E:  CLRF   38
099F:  MOVLW  0A
09A0:  MOVWF  37
09A1:  BCF    0A.3
09A2:  BCF    03.5
09A3:  CALL   3B2
09A4:  BSF    0A.3
09A5:  MOVF   77,W
09A6:  MOVWF  72
....................          } 
....................           
....................     
....................           
....................          
....................          /* 
....................           * Perform digit changes using the transistor. 
....................           * Display the corresponding value for the relevant digit. 
....................           * Wait for a millisecond to allow the human eye to perceive the change. 
....................           */ 
....................           output_high(pin_UnitDigit_switch);      
09A7:  BSF    09.1
....................           output_low(pin_TensDigit_switch);       
09A8:  BCF    09.0
....................           output_low(pin_HundredDigit_switch);    
09A9:  BCF    09.2
....................           output_b(segmentTable[number_unitDigit]);  
09AA:  MOVLW  A0
09AB:  ADDWF  70,W
09AC:  MOVWF  04
09AD:  BCF    03.7
09AE:  MOVF   00,W
09AF:  BSF    03.5
09B0:  MOVWF  33
09B1:  BCF    03.5
09B2:  MOVWF  06
....................           delay_ms(10);                             
09B3:  MOVLW  0A
09B4:  BSF    03.5
09B5:  MOVWF  3F
09B6:  BCF    0A.3
09B7:  BCF    03.5
09B8:  CALL   13A
09B9:  BSF    0A.3
....................            
....................           output_low(pin_UnitDigit_switch);       
09BA:  BCF    09.1
....................           output_high(pin_TensDigit_switch);      
09BB:  BSF    09.0
....................           output_low(pin_HundredDigit_switch);           
09BC:  BCF    09.2
....................           output_b(segmentTable[number_tensDigit]);  
09BD:  MOVLW  A0
09BE:  ADDWF  71,W
09BF:  MOVWF  04
09C0:  BCF    03.7
09C1:  MOVF   00,W
09C2:  BSF    03.5
09C3:  MOVWF  33
09C4:  BCF    03.5
09C5:  MOVWF  06
....................           delay_ms(10);   
09C6:  MOVLW  0A
09C7:  BSF    03.5
09C8:  MOVWF  3F
09C9:  BCF    0A.3
09CA:  BCF    03.5
09CB:  CALL   13A
09CC:  BSF    0A.3
....................            
....................           output_low(pin_UnitDigit_switch);        
09CD:  BCF    09.1
....................           output_low(pin_TensDigit_switch);        
09CE:  BCF    09.0
....................           output_high(pin_HundredDigit_switch);    
09CF:  BSF    09.2
....................           output_b(segmentTable[number_hundredDigit]);  
09D0:  MOVLW  A0
09D1:  ADDWF  72,W
09D2:  MOVWF  04
09D3:  BCF    03.7
09D4:  MOVF   00,W
09D5:  BSF    03.5
09D6:  MOVWF  33
09D7:  BCF    03.5
09D8:  MOVWF  06
....................           delay_ms(10);  
09D9:  MOVLW  0A
09DA:  BSF    03.5
09DB:  MOVWF  3F
09DC:  BCF    0A.3
09DD:  BCF    03.5
09DE:  CALL   13A
09DF:  BSF    0A.3
09E0:  RETURN
....................     
.................... } 
....................  
.................... void loadZeroValue_2_DisplaySegment(){ 
....................  
....................    //Apply voltage to display the digits 
....................    output_high(pin_UnitDigit_switch);     
*
07B5:  BSF    09.1
....................    output_high(pin_TensDigit_switch);      
07B6:  BSF    09.0
....................    output_high(pin_HundredDigit_switch);  
07B7:  BSF    09.2
....................     
....................    //Load the initial value into the segments. 
....................    output_b(segmentTable[0]);  
07B8:  BSF    03.5
07B9:  MOVF   20,W
07BA:  BCF    03.5
07BB:  MOVWF  06
07BC:  BSF    0A.3
07BD:  BCF    0A.4
07BE:  GOTO   5F3 (RETURN)
.................... } 
....................  
....................  
.................... /* ======== -END- 7-SEGMENT DISPLAY -END- ======== */ 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
