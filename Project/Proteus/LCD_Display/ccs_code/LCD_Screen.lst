CCS PCM C Compiler, Version 5.049, 5967               10-Ara-24 13:01

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\DersBitirme\Proteus\LCD_Display\ccs_code\LCD_Screen.lst

               ROM used:   1392 words (17%)
                           Largest free fragment is 2048
               RAM used:   37 (10%) at main() level
                           59 (16%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4A0
0003:  NOP
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................  
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //                         USAGE OF ADC PINS                                  
.................... // There will be 12 different speed and time settings. 
.................... // The time will be increased in increments of 20 seconds, 
.................... // while the speed will be increased in percentages. 
.................... // 
.................... // A0 ==> LCD Screen, Option Surfing Potentiometer 
.................... // A1 ==> Timer Potentiometer  
.................... // A2 ==> Vacuum and blowing setting Potentiometer 
.................... // 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #include <16f887.h>  // mikrodenetleyicimizi tanýtýyoruz 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA CC,3A
0005:  DATA 74,33
0006:  DATA 65,37
0007:  DATA A0,24
0008:  DATA 44,10
0009:  DATA CB,30
000A:  DATA 72,3A
000B:  DATA 69,00
000C:  DATA C7,37
000D:  DATA 73,3A
000E:  DATA 65,39
000F:  DATA 69,37
0010:  DATA 69,3D
0011:  DATA 00,01
0012:  DATA 0A,10
0013:  DATA D6,37
0014:  DATA 6C,3A
0015:  DATA BD,12
0016:  DATA 66,10
0017:  DATA 56,00
*
00FB:  MOVF   0B,W
00FC:  MOVWF  3C
00FD:  BCF    0B.7
00FE:  BSF    03.5
00FF:  BSF    03.6
0100:  BSF    0C.7
0101:  BSF    0C.0
0102:  NOP
0103:  NOP
0104:  BCF    03.5
0105:  BCF    03.6
0106:  BTFSC  3C.7
0107:  BSF    0B.7
0108:  BSF    03.6
0109:  MOVF   0C,W
010A:  ANDLW  7F
010B:  BTFSC  03.2
010C:  GOTO   14F
010D:  BCF    03.6
010E:  MOVWF  3C
010F:  BSF    03.6
0110:  MOVF   0D,W
0111:  BCF    03.6
0112:  MOVWF  3D
0113:  BSF    03.6
0114:  MOVF   0F,W
0115:  BCF    03.6
0116:  MOVWF  3E
0117:  MOVF   3C,W
0118:  MOVWF  49
0119:  CALL   0CF
011A:  MOVF   3D,W
011B:  BSF    03.6
011C:  MOVWF  0D
011D:  BCF    03.6
011E:  MOVF   3E,W
011F:  BSF    03.6
0120:  MOVWF  0F
0121:  BCF    03.6
0122:  MOVF   0B,W
0123:  MOVWF  3F
0124:  BCF    0B.7
0125:  BSF    03.5
0126:  BSF    03.6
0127:  BSF    0C.7
0128:  BSF    0C.0
0129:  NOP
012A:  NOP
012B:  BCF    03.5
012C:  BCF    03.6
012D:  BTFSC  3F.7
012E:  BSF    0B.7
012F:  BSF    03.6
0130:  RLF    0C,W
0131:  RLF    0E,W
0132:  ANDLW  7F
0133:  BTFSC  03.2
0134:  GOTO   14F
0135:  BCF    03.6
0136:  MOVWF  3C
0137:  BSF    03.6
0138:  MOVF   0D,W
0139:  BCF    03.6
013A:  MOVWF  3D
013B:  BSF    03.6
013C:  MOVF   0F,W
013D:  BCF    03.6
013E:  MOVWF  3E
013F:  MOVF   3C,W
0140:  MOVWF  49
0141:  CALL   0CF
0142:  MOVF   3D,W
0143:  BSF    03.6
0144:  MOVWF  0D
0145:  BCF    03.6
0146:  MOVF   3E,W
0147:  BSF    03.6
0148:  MOVWF  0F
0149:  INCF   0D,F
014A:  BTFSC  03.2
014B:  INCF   0F,F
014C:  BCF    03.6
014D:  GOTO   0FB
014E:  BSF    03.6
014F:  BCF    03.6
0150:  RETURN
0151:  MOVLW  8E
0152:  MOVWF  77
0153:  MOVF   3D,W
0154:  MOVWF  78
0155:  MOVF   3C,W
0156:  MOVWF  79
0157:  CLRF   7A
0158:  MOVF   78,F
0159:  BTFSS  03.2
015A:  GOTO   165
015B:  MOVF   79,W
015C:  MOVWF  78
015D:  CLRF   79
015E:  MOVLW  08
015F:  SUBWF  77,F
0160:  MOVF   78,F
0161:  BTFSS  03.2
0162:  GOTO   165
0163:  CLRF   77
0164:  GOTO   16D
0165:  BCF    03.0
0166:  BTFSC  78.7
0167:  GOTO   16C
0168:  RLF    79,F
0169:  RLF    78,F
016A:  DECF   77,F
016B:  GOTO   165
016C:  BCF    78.7
016D:  BCF    0A.3
016E:  BCF    0A.4
016F:  GOTO   513 (RETURN)
0170:  MOVF   3C,W
0171:  BTFSC  03.2
0172:  GOTO   235
0173:  MOVWF  48
0174:  MOVF   40,W
0175:  BTFSC  03.2
0176:  GOTO   235
0177:  SUBWF  48,F
0178:  BTFSS  03.0
0179:  GOTO   17F
017A:  MOVLW  7F
017B:  ADDWF  48,F
017C:  BTFSC  03.0
017D:  GOTO   235
017E:  GOTO   185
017F:  MOVLW  81
0180:  SUBWF  48,F
0181:  BTFSS  03.0
0182:  GOTO   235
0183:  BTFSC  03.2
0184:  GOTO   235
0185:  MOVF   48,W
0186:  MOVWF  77
0187:  CLRF   78
0188:  CLRF   79
0189:  CLRF   7A
018A:  CLRF   47
018B:  MOVF   3D,W
018C:  MOVWF  46
018D:  BSF    46.7
018E:  MOVF   3E,W
018F:  MOVWF  45
0190:  MOVF   3F,W
0191:  MOVWF  44
0192:  MOVLW  19
0193:  MOVWF  48
0194:  MOVF   43,W
0195:  SUBWF  44,F
0196:  BTFSC  03.0
0197:  GOTO   1A8
0198:  MOVLW  01
0199:  SUBWF  45,F
019A:  BTFSC  03.0
019B:  GOTO   1A8
019C:  SUBWF  46,F
019D:  BTFSC  03.0
019E:  GOTO   1A8
019F:  SUBWF  47,F
01A0:  BTFSC  03.0
01A1:  GOTO   1A8
01A2:  INCF   47,F
01A3:  INCF   46,F
01A4:  INCF   45,F
01A5:  MOVF   43,W
01A6:  ADDWF  44,F
01A7:  GOTO   1DA
01A8:  MOVF   42,W
01A9:  SUBWF  45,F
01AA:  BTFSC  03.0
01AB:  GOTO   1C3
01AC:  MOVLW  01
01AD:  SUBWF  46,F
01AE:  BTFSC  03.0
01AF:  GOTO   1C3
01B0:  SUBWF  47,F
01B1:  BTFSC  03.0
01B2:  GOTO   1C3
01B3:  INCF   47,F
01B4:  INCF   46,F
01B5:  MOVF   42,W
01B6:  ADDWF  45,F
01B7:  MOVF   43,W
01B8:  ADDWF  44,F
01B9:  BTFSS  03.0
01BA:  GOTO   1DA
01BB:  INCF   45,F
01BC:  BTFSS  03.2
01BD:  GOTO   1DA
01BE:  INCF   46,F
01BF:  BTFSS  03.2
01C0:  GOTO   1DA
01C1:  INCF   47,F
01C2:  GOTO   1DA
01C3:  MOVF   41,W
01C4:  IORLW  80
01C5:  SUBWF  46,F
01C6:  BTFSC  03.0
01C7:  GOTO   1D9
01C8:  MOVLW  01
01C9:  SUBWF  47,F
01CA:  BTFSC  03.0
01CB:  GOTO   1D9
01CC:  INCF   47,F
01CD:  MOVF   41,W
01CE:  IORLW  80
01CF:  ADDWF  46,F
01D0:  MOVF   42,W
01D1:  ADDWF  45,F
01D2:  BTFSS  03.0
01D3:  GOTO   1B7
01D4:  INCF   46,F
01D5:  BTFSS  03.2
01D6:  GOTO   1B7
01D7:  INCF   47,F
01D8:  GOTO   1B7
01D9:  BSF    7A.0
01DA:  DECFSZ 48,F
01DB:  GOTO   1DD
01DC:  GOTO   1E8
01DD:  BCF    03.0
01DE:  RLF    44,F
01DF:  RLF    45,F
01E0:  RLF    46,F
01E1:  RLF    47,F
01E2:  BCF    03.0
01E3:  RLF    7A,F
01E4:  RLF    79,F
01E5:  RLF    78,F
01E6:  RLF    49,F
01E7:  GOTO   194
01E8:  BTFSS  49.0
01E9:  GOTO   1F0
01EA:  BCF    03.0
01EB:  RRF    78,F
01EC:  RRF    79,F
01ED:  RRF    7A,F
01EE:  RRF    49,F
01EF:  GOTO   1F3
01F0:  DECF   77,F
01F1:  BTFSC  03.2
01F2:  GOTO   235
01F3:  BTFSC  49.7
01F4:  GOTO   21C
01F5:  BCF    03.0
01F6:  RLF    44,F
01F7:  RLF    45,F
01F8:  RLF    46,F
01F9:  RLF    47,F
01FA:  MOVF   43,W
01FB:  SUBWF  44,F
01FC:  BTFSC  03.0
01FD:  GOTO   208
01FE:  MOVLW  01
01FF:  SUBWF  45,F
0200:  BTFSC  03.0
0201:  GOTO   208
0202:  SUBWF  46,F
0203:  BTFSC  03.0
0204:  GOTO   208
0205:  SUBWF  47,F
0206:  BTFSS  03.0
0207:  GOTO   22B
0208:  MOVF   42,W
0209:  SUBWF  45,F
020A:  BTFSC  03.0
020B:  GOTO   213
020C:  MOVLW  01
020D:  SUBWF  46,F
020E:  BTFSC  03.0
020F:  GOTO   213
0210:  SUBWF  47,F
0211:  BTFSS  03.0
0212:  GOTO   22B
0213:  MOVF   41,W
0214:  IORLW  80
0215:  SUBWF  46,F
0216:  BTFSC  03.0
0217:  GOTO   21C
0218:  MOVLW  01
0219:  SUBWF  47,F
021A:  BTFSS  03.0
021B:  GOTO   22B
021C:  INCF   7A,F
021D:  BTFSS  03.2
021E:  GOTO   22B
021F:  INCF   79,F
0220:  BTFSS  03.2
0221:  GOTO   22B
0222:  INCF   78,F
0223:  BTFSS  03.2
0224:  GOTO   22B
0225:  INCF   77,F
0226:  BTFSC  03.2
0227:  GOTO   235
0228:  RRF    78,F
0229:  RRF    79,F
022A:  RRF    7A,F
022B:  MOVF   3D,W
022C:  MOVWF  48
022D:  MOVF   41,W
022E:  XORWF  48,F
022F:  BTFSS  48.7
0230:  GOTO   233
0231:  BSF    78.7
0232:  GOTO   239
0233:  BCF    78.7
0234:  GOTO   239
0235:  CLRF   77
0236:  CLRF   78
0237:  CLRF   79
0238:  CLRF   7A
0239:  BCF    0A.3
023A:  BCF    0A.4
023B:  GOTO   521 (RETURN)
023C:  MOVF   49,W
023D:  BTFSC  03.2
023E:  GOTO   2AC
023F:  MOVWF  51
0240:  MOVF   4D,W
0241:  BTFSC  03.2
0242:  GOTO   2AC
0243:  ADDWF  51,F
0244:  BTFSC  03.0
0245:  GOTO   24D
0246:  MOVLW  7F
0247:  SUBWF  51,F
0248:  BTFSS  03.0
0249:  GOTO   2AC
024A:  BTFSC  03.2
024B:  GOTO   2AC
024C:  GOTO   251
024D:  MOVLW  81
024E:  ADDWF  51,F
024F:  BTFSC  03.0
0250:  GOTO   2AC
0251:  MOVF   51,W
0252:  MOVWF  77
0253:  CLRF   78
0254:  CLRF   79
0255:  CLRF   7A
0256:  MOVF   4A,W
0257:  MOVWF  55
0258:  BSF    55.7
0259:  MOVF   4B,W
025A:  MOVWF  54
025B:  MOVF   4C,W
025C:  MOVWF  53
025D:  MOVLW  18
025E:  MOVWF  51
025F:  CLRF   52
0260:  BTFSS  53.0
0261:  GOTO   27A
0262:  MOVF   50,W
0263:  ADDWF  7A,F
0264:  BTFSS  03.0
0265:  GOTO   26C
0266:  INCF   79,F
0267:  BTFSS  03.2
0268:  GOTO   26C
0269:  INCF   78,F
026A:  BTFSC  03.2
026B:  BSF    52.7
026C:  MOVF   4F,W
026D:  ADDWF  79,F
026E:  BTFSS  03.0
026F:  GOTO   273
0270:  INCF   78,F
0271:  BTFSC  03.2
0272:  BSF    52.7
0273:  MOVF   4E,W
0274:  MOVWF  4B
0275:  BSF    4B.7
0276:  MOVF   4B,W
0277:  ADDWF  78,F
0278:  BTFSC  03.0
0279:  BSF    52.7
027A:  RLF    52,F
027B:  RRF    78,F
027C:  RRF    79,F
027D:  RRF    7A,F
027E:  RRF    55,F
027F:  RRF    54,F
0280:  RRF    53,F
0281:  BCF    03.0
0282:  DECFSZ 51,F
0283:  GOTO   25F
0284:  MOVLW  01
0285:  ADDWF  77,F
0286:  BTFSC  03.0
0287:  GOTO   2AC
0288:  BTFSC  78.7
0289:  GOTO   291
028A:  RLF    55,F
028B:  RLF    7A,F
028C:  RLF    79,F
028D:  RLF    78,F
028E:  DECF   77,F
028F:  BTFSC  03.2
0290:  GOTO   2AC
0291:  BTFSS  55.7
0292:  GOTO   2A2
0293:  INCF   7A,F
0294:  BTFSS  03.2
0295:  GOTO   2A2
0296:  INCF   79,F
0297:  BTFSS  03.2
0298:  GOTO   2A2
0299:  INCF   78,F
029A:  BTFSS  03.2
029B:  GOTO   2A2
029C:  RRF    78,F
029D:  RRF    79,F
029E:  RRF    7A,F
029F:  INCF   77,F
02A0:  BTFSC  03.2
02A1:  GOTO   2AC
02A2:  MOVF   4A,W
02A3:  MOVWF  52
02A4:  MOVF   4E,W
02A5:  XORWF  52,F
02A6:  BTFSS  52.7
02A7:  GOTO   2AA
02A8:  BSF    78.7
02A9:  GOTO   2B0
02AA:  BCF    78.7
02AB:  GOTO   2B0
02AC:  CLRF   77
02AD:  CLRF   78
02AE:  CLRF   79
02AF:  CLRF   7A
02B0:  RETURN
02B1:  CLRF   44
02B2:  MOVF   04,W
02B3:  MOVWF  43
02B4:  BCF    44.0
02B5:  BTFSC  03.7
02B6:  BSF    44.0
02B7:  SWAPF  3D,W
02B8:  IORLW  F0
02B9:  MOVWF  3F
02BA:  ADDWF  3F,F
02BB:  ADDLW  E2
02BC:  MOVWF  40
02BD:  ADDLW  32
02BE:  MOVWF  42
02BF:  MOVF   3D,W
02C0:  ANDLW  0F
02C1:  ADDWF  40,F
02C2:  ADDWF  40,F
02C3:  ADDWF  42,F
02C4:  ADDLW  E9
02C5:  MOVWF  41
02C6:  ADDWF  41,F
02C7:  ADDWF  41,F
02C8:  SWAPF  3C,W
02C9:  ANDLW  0F
02CA:  ADDWF  41,F
02CB:  ADDWF  42,F
02CC:  RLF    41,F
02CD:  RLF    42,F
02CE:  COMF   42,F
02CF:  RLF    42,F
02D0:  MOVF   3C,W
02D1:  ANDLW  0F
02D2:  ADDWF  42,F
02D3:  RLF    3F,F
02D4:  MOVLW  07
02D5:  MOVWF  3E
02D6:  MOVLW  0A
02D7:  ADDWF  42,F
02D8:  DECF   41,F
02D9:  BTFSS  03.0
02DA:  GOTO   2D7
02DB:  ADDWF  41,F
02DC:  DECF   40,F
02DD:  BTFSS  03.0
02DE:  GOTO   2DB
02DF:  ADDWF  40,F
02E0:  DECF   3F,F
02E1:  BTFSS  03.0
02E2:  GOTO   2DF
02E3:  ADDWF  3F,F
02E4:  DECF   3E,F
02E5:  BTFSS  03.0
02E6:  GOTO   2E3
02E7:  MOVLW  3E
02E8:  MOVWF  04
02E9:  BCF    03.7
02EA:  MOVLW  07
02EB:  ANDWF  43,W
02EC:  BCF    43.6
02ED:  ADDWF  04,F
02EE:  MOVLW  42
02EF:  SUBWF  04,W
02F0:  BTFSC  03.2
02F1:  BSF    43.6
02F2:  MOVF   00,W
02F3:  MOVWF  77
02F4:  BTFSS  03.2
02F5:  GOTO   2FE
02F6:  BTFSC  43.6
02F7:  GOTO   2FE
02F8:  BTFSC  43.4
02F9:  GOTO   310
02FA:  BTFSC  43.3
02FB:  GOTO   2FE
02FC:  MOVLW  20
02FD:  GOTO   301
02FE:  BSF    43.3
02FF:  BCF    43.4
0300:  MOVLW  30
0301:  ADDWF  77,F
0302:  CLRF   3D
0303:  MOVF   04,W
0304:  MOVWF  3C
0305:  BCF    3D.0
0306:  BTFSC  03.7
0307:  BSF    3D.0
0308:  MOVF   77,W
0309:  MOVWF  49
030A:  CALL   0CF
030B:  MOVF   3C,W
030C:  MOVWF  04
030D:  BCF    03.7
030E:  BTFSC  3D.0
030F:  BSF    03.7
0310:  INCF   04,F
0311:  BTFSS  43.6
0312:  GOTO   2EE
0313:  BCF    0A.3
0314:  BCF    0A.4
0315:  GOTO   54A (RETURN)
0316:  MOVF   0B,W
0317:  MOVWF  3D
0318:  BCF    0B.7
0319:  BSF    03.5
031A:  BSF    03.6
031B:  BSF    0C.7
031C:  BSF    0C.0
031D:  NOP
031E:  NOP
031F:  BCF    03.5
0320:  BCF    03.6
0321:  BTFSC  3D.7
0322:  BSF    0B.7
0323:  BTFSC  03.0
0324:  GOTO   34D
0325:  BSF    03.6
0326:  MOVF   0C,W
0327:  ANDLW  7F
0328:  BCF    03.6
0329:  MOVWF  3D
032A:  BSF    03.6
032B:  MOVF   0D,W
032C:  BCF    03.6
032D:  MOVWF  3E
032E:  BSF    03.6
032F:  MOVF   0F,W
0330:  BCF    03.6
0331:  MOVWF  3F
0332:  MOVF   3D,W
0333:  MOVWF  49
0334:  CALL   0CF
0335:  MOVF   3E,W
0336:  BSF    03.6
0337:  MOVWF  0D
0338:  BCF    03.6
0339:  MOVF   3F,W
033A:  BSF    03.6
033B:  MOVWF  0F
033C:  BCF    03.6
033D:  MOVF   0B,W
033E:  MOVWF  40
033F:  BCF    0B.7
0340:  BSF    03.5
0341:  BSF    03.6
0342:  BSF    0C.7
0343:  BSF    0C.0
0344:  NOP
0345:  NOP
0346:  BCF    03.5
0347:  BCF    03.6
0348:  BTFSC  40.7
0349:  BSF    0B.7
034A:  DECFSZ 3C,F
034B:  GOTO   34D
034C:  GOTO   36C
034D:  BSF    03.6
034E:  RLF    0C,W
034F:  RLF    0E,W
0350:  ANDLW  7F
0351:  BCF    03.6
0352:  MOVWF  3D
0353:  BSF    03.6
0354:  MOVF   0D,W
0355:  BCF    03.6
0356:  MOVWF  3E
0357:  BSF    03.6
0358:  MOVF   0F,W
0359:  BCF    03.6
035A:  MOVWF  3F
035B:  MOVF   3D,W
035C:  MOVWF  49
035D:  CALL   0CF
035E:  MOVF   3E,W
035F:  BSF    03.6
0360:  MOVWF  0D
0361:  BCF    03.6
0362:  MOVF   3F,W
0363:  BSF    03.6
0364:  MOVWF  0F
0365:  INCF   0D,F
0366:  BTFSC  03.2
0367:  INCF   0F,F
0368:  BCF    03.0
0369:  BCF    03.6
036A:  DECFSZ 3C,F
036B:  GOTO   316
036C:  BCF    0A.3
036D:  BCF    0A.4
036E:  GOTO   554 (RETURN)
036F:  BTFSC  03.1
0370:  GOTO   374
0371:  MOVLW  51
0372:  MOVWF  04
0373:  BCF    03.7
0374:  CLRF   77
0375:  CLRF   78
0376:  CLRF   79
0377:  CLRF   7A
0378:  CLRF   51
0379:  CLRF   52
037A:  CLRF   53
037B:  CLRF   54
037C:  MOVF   50,W
037D:  IORWF  4F,W
037E:  IORWF  4E,W
037F:  IORWF  4D,W
0380:  BTFSC  03.2
0381:  GOTO   3B2
0382:  MOVLW  20
0383:  MOVWF  55
0384:  BCF    03.0
0385:  RLF    49,F
0386:  RLF    4A,F
0387:  RLF    4B,F
0388:  RLF    4C,F
0389:  RLF    51,F
038A:  RLF    52,F
038B:  RLF    53,F
038C:  RLF    54,F
038D:  MOVF   50,W
038E:  SUBWF  54,W
038F:  BTFSS  03.2
0390:  GOTO   39B
0391:  MOVF   4F,W
0392:  SUBWF  53,W
0393:  BTFSS  03.2
0394:  GOTO   39B
0395:  MOVF   4E,W
0396:  SUBWF  52,W
0397:  BTFSS  03.2
0398:  GOTO   39B
0399:  MOVF   4D,W
039A:  SUBWF  51,W
039B:  BTFSS  03.0
039C:  GOTO   3AC
039D:  MOVF   4D,W
039E:  SUBWF  51,F
039F:  MOVF   4E,W
03A0:  BTFSS  03.0
03A1:  INCFSZ 4E,W
03A2:  SUBWF  52,F
03A3:  MOVF   4F,W
03A4:  BTFSS  03.0
03A5:  INCFSZ 4F,W
03A6:  SUBWF  53,F
03A7:  MOVF   50,W
03A8:  BTFSS  03.0
03A9:  INCFSZ 50,W
03AA:  SUBWF  54,F
03AB:  BSF    03.0
03AC:  RLF    77,F
03AD:  RLF    78,F
03AE:  RLF    79,F
03AF:  RLF    7A,F
03B0:  DECFSZ 55,F
03B1:  GOTO   384
03B2:  MOVF   51,W
03B3:  MOVWF  00
03B4:  INCF   04,F
03B5:  MOVF   52,W
03B6:  MOVWF  00
03B7:  INCF   04,F
03B8:  MOVF   53,W
03B9:  MOVWF  00
03BA:  INCF   04,F
03BB:  MOVF   54,W
03BC:  MOVWF  00
03BD:  RETURN
03BE:  MOVF   04,W
03BF:  MOVWF  41
03C0:  MOVF   40,W
03C1:  MOVWF  43
03C2:  BTFSC  03.2
03C3:  GOTO   3DD
03C4:  MOVF   3F,W
03C5:  MOVWF  4C
03C6:  MOVF   3E,W
03C7:  MOVWF  4B
03C8:  MOVF   3D,W
03C9:  MOVWF  4A
03CA:  MOVF   3C,W
03CB:  MOVWF  49
03CC:  CLRF   50
03CD:  CLRF   4F
03CE:  MOVLW  20
03CF:  MOVWF  4E
03D0:  MOVLW  82
03D1:  MOVWF  4D
03D2:  CALL   23C
03D3:  MOVF   7A,W
03D4:  MOVWF  3F
03D5:  MOVF   79,W
03D6:  MOVWF  3E
03D7:  MOVF   78,W
03D8:  MOVWF  3D
03D9:  MOVF   77,W
03DA:  MOVWF  3C
03DB:  DECFSZ 43,F
03DC:  GOTO   3C4
03DD:  MOVF   3F,W
03DE:  MOVWF  4C
03DF:  MOVF   3E,W
03E0:  MOVWF  4B
03E1:  MOVF   3D,W
03E2:  MOVWF  4A
03E3:  MOVF   3C,W
03E4:  MOVWF  49
03E5:  MOVF   49,W
03E6:  SUBLW  B6
03E7:  MOVWF  49
03E8:  CLRF   7A
03E9:  MOVF   4A,W
03EA:  MOVWF  4D
03EB:  BSF    4A.7
03EC:  BCF    03.0
03ED:  RRF    4A,F
03EE:  RRF    4B,F
03EF:  RRF    4C,F
03F0:  RRF    7A,F
03F1:  RRF    79,F
03F2:  RRF    78,F
03F3:  RRF    77,F
03F4:  DECFSZ 49,F
03F5:  GOTO   3EC
03F6:  BTFSS  4D.7
03F7:  GOTO   403
03F8:  COMF   77,F
03F9:  COMF   78,F
03FA:  COMF   79,F
03FB:  COMF   7A,F
03FC:  INCF   77,F
03FD:  BTFSC  03.2
03FE:  INCF   78,F
03FF:  BTFSC  03.2
0400:  INCF   79,F
0401:  BTFSC  03.2
0402:  INCF   7A,F
0403:  MOVF   7A,W
0404:  MOVWF  3F
0405:  MOVF   79,W
0406:  MOVWF  3E
0407:  MOVF   78,W
0408:  MOVWF  3D
0409:  MOVF   77,W
040A:  MOVWF  3C
040B:  BTFSS  3F.7
040C:  GOTO   41A
040D:  DECF   41,F
040E:  BSF    41.5
040F:  COMF   3C,F
0410:  COMF   3D,F
0411:  COMF   3E,F
0412:  COMF   3F,F
0413:  INCF   3C,F
0414:  BTFSC  03.2
0415:  INCF   3D,F
0416:  BTFSC  03.2
0417:  INCF   3E,F
0418:  BTFSC  03.2
0419:  INCF   3F,F
041A:  MOVLW  3B
041B:  MOVWF  48
041C:  MOVLW  9A
041D:  MOVWF  47
041E:  MOVLW  CA
041F:  MOVWF  46
0420:  CLRF   45
0421:  MOVLW  0A
0422:  MOVWF  43
0423:  MOVF   40,W
0424:  BTFSC  03.2
0425:  INCF   41,F
0426:  BSF    03.1
0427:  MOVLW  3C
0428:  MOVWF  04
0429:  BCF    03.7
042A:  MOVF   3F,W
042B:  MOVWF  4C
042C:  MOVF   3E,W
042D:  MOVWF  4B
042E:  MOVF   3D,W
042F:  MOVWF  4A
0430:  MOVF   3C,W
0431:  MOVWF  49
0432:  MOVF   48,W
0433:  MOVWF  50
0434:  MOVF   47,W
0435:  MOVWF  4F
0436:  MOVF   46,W
0437:  MOVWF  4E
0438:  MOVF   45,W
0439:  MOVWF  4D
043A:  CALL   36F
043B:  MOVF   78,W
043C:  MOVF   77,F
043D:  BTFSS  03.2
043E:  GOTO   452
043F:  INCF   40,W
0440:  SUBWF  43,W
0441:  BTFSC  03.2
0442:  GOTO   452
0443:  MOVF   41,W
0444:  BTFSC  03.2
0445:  GOTO   454
0446:  ANDLW  0F
0447:  SUBWF  43,W
0448:  BTFSC  03.2
0449:  GOTO   44C
044A:  BTFSC  03.0
044B:  GOTO   484
044C:  BTFSC  41.7
044D:  GOTO   484
044E:  BTFSC  41.6
044F:  GOTO   454
0450:  MOVLW  20
0451:  GOTO   480
0452:  MOVLW  20
0453:  ANDWF  41,F
0454:  BTFSS  41.5
0455:  GOTO   462
0456:  BCF    41.5
0457:  MOVF   40,W
0458:  BTFSS  03.2
0459:  DECF   41,F
045A:  MOVF   77,W
045B:  MOVWF  41
045C:  MOVLW  2D
045D:  MOVWF  49
045E:  CALL   0CF
045F:  MOVF   41,W
0460:  MOVWF  77
0461:  CLRF   41
0462:  MOVF   40,W
0463:  SUBWF  43,W
0464:  BTFSS  03.2
0465:  GOTO   470
0466:  MOVF   77,W
0467:  MOVWF  41
0468:  MOVLW  2E
0469:  MOVWF  49
046A:  CALL   0CF
046B:  MOVF   41,W
046C:  MOVWF  77
046D:  MOVLW  20
046E:  ANDWF  41,F
046F:  MOVLW  00
0470:  MOVLW  30
0471:  BTFSS  41.5
0472:  GOTO   480
0473:  BCF    41.5
0474:  MOVF   40,W
0475:  BTFSS  03.2
0476:  DECF   41,F
0477:  MOVF   77,W
0478:  MOVWF  41
0479:  MOVLW  2D
047A:  MOVWF  49
047B:  CALL   0CF
047C:  MOVF   41,W
047D:  MOVWF  77
047E:  CLRF   41
047F:  MOVLW  30
0480:  ADDWF  77,F
0481:  MOVF   77,W
0482:  MOVWF  49
0483:  CALL   0CF
0484:  BCF    03.1
0485:  MOVF   48,W
0486:  MOVWF  4C
0487:  MOVF   47,W
0488:  MOVWF  4B
0489:  MOVF   46,W
048A:  MOVWF  4A
048B:  MOVF   45,W
048C:  MOVWF  49
048D:  CLRF   50
048E:  CLRF   4F
048F:  CLRF   4E
0490:  MOVLW  0A
0491:  MOVWF  4D
0492:  CALL   36F
0493:  MOVF   7A,W
0494:  MOVWF  48
0495:  MOVF   79,W
0496:  MOVWF  47
0497:  MOVF   78,W
0498:  MOVWF  46
0499:  MOVF   77,W
049A:  MOVWF  45
049B:  DECFSZ 43,F
049C:  GOTO   426
049D:  BCF    0A.3
049E:  BCF    0A.4
049F:  GOTO   561 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #device ADC=10       // 10bitlik adc okumasý yapýlacak 
....................  
.................... #use delay(clock=4M) // clock olarak osilatörümüzün frekansýný giriyoruz 
*
0018:  MOVLW  4A
0019:  MOVWF  04
001A:  BCF    03.7
001B:  MOVF   00,W
001C:  BTFSC  03.2
001D:  GOTO   02C
001E:  MOVLW  01
001F:  MOVWF  78
0020:  CLRF   77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 78,F
0024:  GOTO   020
0025:  MOVLW  4A
0026:  MOVWF  77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  GOTO   02A
002A:  DECFSZ 00,F
002B:  GOTO   01E
002C:  RETURN
....................  
....................  
.................... #include <lcd.c>     // ! delay(clock=x) fonksiyonunu #use ettikten 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0045:  MOVLW  0F
0046:  BSF    03.5
0047:  ANDWF  08,W
0048:  IORLW  F0
0049:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004A:  BCF    03.5
004B:  BSF    08.2
....................    delay_cycles(1); 
004C:  NOP
....................    lcd_output_enable(1); 
004D:  BSF    08.0
....................    delay_cycles(1); 
004E:  NOP
....................    high = lcd_read_nibble(); 
004F:  CALL   039
0050:  MOVF   78,W
0051:  MOVWF  51
....................        
....................    lcd_output_enable(0); 
0052:  BCF    08.0
....................    delay_cycles(1); 
0053:  NOP
....................    lcd_output_enable(1); 
0054:  BSF    08.0
....................    delay_us(1); 
0055:  NOP
....................    low = lcd_read_nibble(); 
0056:  CALL   039
0057:  MOVF   78,W
0058:  MOVWF  50
....................        
....................    lcd_output_enable(0); 
0059:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005A:  MOVLW  0F
005B:  BSF    03.5
005C:  ANDWF  08,W
005D:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005E:  BCF    03.5
005F:  SWAPF  51,W
0060:  MOVWF  77
0061:  MOVLW  F0
0062:  ANDWF  77,F
0063:  MOVF   77,W
0064:  IORWF  50,W
0065:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0039:  MOVF   08,W
003A:  MOVWF  77
003B:  SWAPF  08,W
003C:  ANDLW  0F
003D:  MOVWF  78
....................   #endif 
003E:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002D:  SWAPF  51,W
002E:  ANDLW  F0
002F:  MOVWF  77
0030:  MOVLW  0F
0031:  ANDWF  08,W
0032:  IORWF  77,W
0033:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0034:  NOP
....................    lcd_output_enable(1); 
0035:  BSF    08.0
....................    delay_us(2); 
0036:  GOTO   037
....................    lcd_output_enable(0); 
0037:  BCF    08.0
0038:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
003F:  BSF    03.5
0040:  BCF    08.0
....................    lcd_rs_tris(); 
0041:  BCF    08.1
....................    lcd_rw_tris(); 
0042:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0043:  BCF    03.5
0044:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0066:  MOVF   78,W
0067:  MOVWF  50
0068:  BTFSC  50.7
0069:  GOTO   045
....................    lcd_output_rs(address); 
006A:  BTFSS  4E.0
006B:  BCF    08.1
006C:  BTFSC  4E.0
006D:  BSF    08.1
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_rw(0); 
006F:  BCF    08.2
....................    delay_cycles(1); 
0070:  NOP
....................    lcd_output_enable(0); 
0071:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0072:  SWAPF  4F,W
0073:  MOVWF  50
0074:  MOVLW  0F
0075:  ANDWF  50,F
0076:  MOVF   50,W
0077:  MOVWF  51
0078:  CALL   02D
....................    lcd_send_nibble(n & 0xf); 
0079:  MOVF   4F,W
007A:  ANDLW  0F
007B:  MOVWF  50
007C:  MOVWF  51
007D:  CALL   02D
007E:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
007F:  MOVLW  28
0080:  MOVWF  3D
0081:  MOVLW  0C
0082:  MOVWF  3E
0083:  MOVLW  01
0084:  MOVWF  3F
0085:  MOVLW  06
0086:  MOVWF  40
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0087:  BCF    08.0
....................    lcd_output_rs(0); 
0088:  BCF    08.1
....................    lcd_output_rw(0); 
0089:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008A:  MOVLW  0F
008B:  BSF    03.5
008C:  ANDWF  08,W
008D:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
008E:  BCF    08.0
....................    lcd_rs_tris(); 
008F:  BCF    08.1
....................    lcd_rw_tris(); 
0090:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0091:  MOVLW  0F
0092:  BCF    03.5
0093:  MOVWF  4A
0094:  CALL   018
....................    for(i=1;i<=3;++i) 
0095:  MOVLW  01
0096:  MOVWF  3C
0097:  MOVF   3C,W
0098:  SUBLW  03
0099:  BTFSS  03.0
009A:  GOTO   0A3
....................    { 
....................        lcd_send_nibble(3); 
009B:  MOVLW  03
009C:  MOVWF  51
009D:  CALL   02D
....................        delay_ms(5); 
009E:  MOVLW  05
009F:  MOVWF  4A
00A0:  CALL   018
00A1:  INCF   3C,F
00A2:  GOTO   097
....................    } 
....................     
....................    lcd_send_nibble(2); 
00A3:  MOVLW  02
00A4:  MOVWF  51
00A5:  CALL   02D
....................    delay_ms(5); 
00A6:  MOVLW  05
00A7:  MOVWF  4A
00A8:  CALL   018
....................    for(i=0;i<=3;++i) 
00A9:  CLRF   3C
00AA:  MOVF   3C,W
00AB:  SUBLW  03
00AC:  BTFSS  03.0
00AD:  GOTO   0BA
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AE:  MOVLW  3D
00AF:  ADDWF  3C,W
00B0:  MOVWF  04
00B1:  BCF    03.7
00B2:  MOVF   00,W
00B3:  MOVWF  41
00B4:  CLRF   4E
00B5:  MOVF   41,W
00B6:  MOVWF  4F
00B7:  CALL   03F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B8:  INCF   3C,F
00B9:  GOTO   0AA
00BA:  BCF    0A.3
00BB:  BCF    0A.4
00BC:  GOTO   4DD (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00BD:  DECFSZ 4B,W
00BE:  GOTO   0C0
00BF:  GOTO   0C3
....................       address=LCD_LINE_TWO; 
00C0:  MOVLW  40
00C1:  MOVWF  4C
00C2:  GOTO   0C4
....................    else 
....................       address=0; 
00C3:  CLRF   4C
....................       
....................    address+=x-1; 
00C4:  MOVLW  01
00C5:  SUBWF  4A,W
00C6:  ADDWF  4C,F
....................    lcd_send_byte(0,0x80|address); 
00C7:  MOVF   4C,W
00C8:  IORLW  80
00C9:  MOVWF  4D
00CA:  CLRF   4E
00CB:  MOVF   4D,W
00CC:  MOVWF  4F
00CD:  CALL   03F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CE:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00CF:  MOVF   49,W
00D0:  XORLW  07
00D1:  BTFSC  03.2
00D2:  GOTO   0DD
00D3:  XORLW  0B
00D4:  BTFSC  03.2
00D5:  GOTO   0E2
00D6:  XORLW  06
00D7:  BTFSC  03.2
00D8:  GOTO   0EA
00D9:  XORLW  02
00DA:  BTFSC  03.2
00DB:  GOTO   0F0
00DC:  GOTO   0F5
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00DD:  MOVLW  01
00DE:  MOVWF  4A
00DF:  MOVWF  4B
00E0:  CALL   0BD
00E1:  GOTO   0FA
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00E2:  CLRF   4E
00E3:  MOVLW  01
00E4:  MOVWF  4F
00E5:  CALL   03F
....................                      delay_ms(2); 
00E6:  MOVLW  02
00E7:  MOVWF  4A
00E8:  CALL   018
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E9:  GOTO   0FA
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00EA:  MOVLW  01
00EB:  MOVWF  4A
00EC:  MOVLW  02
00ED:  MOVWF  4B
00EE:  CALL   0BD
00EF:  GOTO   0FA
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00F0:  CLRF   4E
00F1:  MOVLW  10
00F2:  MOVWF  4F
00F3:  CALL   03F
00F4:  GOTO   0FA
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00F5:  MOVLW  01
00F6:  MOVWF  4E
00F7:  MOVF   49,W
00F8:  MOVWF  4F
00F9:  CALL   03F
....................      #endif 
....................    } 
00FA:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................                      // sonra tanýmlanmalý, aksi halde hata verir                      
....................  
....................  
.................... #use fast_io(a) //ADC pinlerinin tris ayarlarýný manuel yapýlacak 
....................  
....................  
....................  
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... byte checkMark[8] = { 
....................   0b00000, 
....................   0b00001, 
....................   0b00011, 
....................   0b00110, 
....................   0b01100, 
....................   0b11100, 
....................   0b01100, 
....................   0b00000 
.................... }; 
*
04B5:  BCF    03.6
04B6:  CLRF   20
04B7:  MOVLW  01
04B8:  MOVWF  21
04B9:  MOVLW  03
04BA:  MOVWF  22
04BB:  MOVLW  06
04BC:  MOVWF  23
04BD:  MOVLW  0C
04BE:  MOVWF  24
04BF:  MOVLW  1C
04C0:  MOVWF  25
04C1:  MOVLW  0C
04C2:  MOVWF  26
04C3:  CLRF   27
....................  
....................  
.................... //Potansiyometrelerden gelen dijital deðerleri tutacak 
.................... unsigned long int val_ADC_Pot_Surf; 
.................... unsigned long int val_ADC_Pot_Timer; 
.................... unsigned long int val_ADC_Pot_VacuumBlowing; 
....................  
....................  
.................... //Gerilim Düþümlerini izlemek için  
.................... float val_Voltage_potSurf; 
.................... float val_Voltage_potTimer; 
.................... float val_Voltage_potSVacuumBlowing; 
....................  
.................... void main(void)  
*
04A0:  MOVF   03,W
04A1:  ANDLW  1F
04A2:  MOVWF  03
04A3:  CLRF   3B
04A4:  CLRF   3A
04A5:  BSF    03.5
04A6:  BSF    03.6
04A7:  MOVF   09,W
04A8:  ANDLW  C0
04A9:  MOVWF  09
04AA:  BCF    03.6
04AB:  BCF    1F.4
04AC:  BCF    1F.5
04AD:  MOVLW  00
04AE:  BSF    03.6
04AF:  MOVWF  08
04B0:  BCF    03.5
04B1:  CLRF   07
04B2:  CLRF   08
04B3:  CLRF   09
04B4:  BCF    03.7
.................... { 
....................  
....................    //ADC YAPILANDIRMASI 
....................    set_tris_a(0x07); //0b 0000 0111 ==> PIN_A0, PIN_A1, PIN_A2 
*
04C4:  MOVLW  07
04C5:  BSF    03.5
04C6:  MOVWF  05
....................    setup_adc(adc_clock_div_32);  
04C7:  BCF    03.5
04C8:  BCF    1F.6
04C9:  BSF    1F.7
04CA:  BSF    03.5
04CB:  BSF    1F.7
04CC:  BCF    03.5
04CD:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
04CE:  BSF    03.5
04CF:  BSF    03.6
04D0:  MOVF   09,W
04D1:  ANDLW  C0
04D2:  IORLW  1F
04D3:  MOVWF  09
04D4:  BCF    03.6
04D5:  BCF    1F.4
04D6:  BCF    1F.5
04D7:  MOVLW  FF
04D8:  BSF    03.6
04D9:  MOVWF  08
....................  
....................    lcd_init(); // LCD ekranýmýzý baþlatacak 
04DA:  BCF    03.5
04DB:  BCF    03.6
04DC:  GOTO   07F
....................     
....................  
....................  
.................... /////////////////////-MESAJ PROTOTÝPLERÝMÝZ-/////////////////////////// 
....................  
....................       //---> SELAMLAMA FASLI 
....................       printf(lcd_putc,"Lutfen ID Karti"); 
04DD:  MOVLW  04
04DE:  BSF    03.6
04DF:  MOVWF  0D
04E0:  MOVLW  00
04E1:  MOVWF  0F
04E2:  BCF    03.6
04E3:  CALL   0FB
....................       lcd_gotoxy(4,2); 
04E4:  MOVLW  04
04E5:  MOVWF  4A
04E6:  MOVLW  02
04E7:  MOVWF  4B
04E8:  CALL   0BD
....................       printf(lcd_putc,"Gosteriniz"); 
04E9:  MOVLW  0C
04EA:  BSF    03.6
04EB:  MOVWF  0D
04EC:  MOVLW  00
04ED:  MOVWF  0F
04EE:  BCF    03.6
04EF:  CALL   0FB
....................       delay_ms(1000); 
04F0:  MOVLW  04
04F1:  MOVWF  3C
04F2:  MOVLW  FA
04F3:  MOVWF  4A
04F4:  CALL   018
04F5:  DECFSZ 3C,F
04F6:  GOTO   4F2
....................       printf(lcd_putc,"\f"); 
04F7:  MOVLW  0C
04F8:  MOVWF  49
04F9:  CALL   0CF
....................       
....................        
....................       //---> KARTI OKUTTUKTAN SONRA 
....................             //---> Olumlu ise  
.................... //!            printf(lcd_putc,"$Giris Basarili$"); 
.................... //!            lcd_gotoxy(4,2); 
.................... //!            printf(lcd_putc,"Yukleniyor"); 
.................... //!            delay_ms(1000); 
.................... //!            printf(lcd_putc,"\f"); 
....................              
....................             //---> Olumsuz ise 
.................... //!            printf(lcd_putc," !Gecersiz ID!"); 
.................... //!            lcd_gotoxy(2,2); 
.................... //!            printf(lcd_putc,"Tekrar Deneyin"); 
.................... //!            delay_ms(1000); 
.................... //!            printf(lcd_putc,"\f"); 
....................  
....................       //---> ISLEMLERIN POTANSIYOMETRE ILE GEZILMESI  
....................              
....................             //lcd_set_cgram_char(0, &checkMark); //0 yazýlmasý ilk özel karakteri alýr, 1 yazýlýrsa 2.özel karakterini de kaydedersin 
....................             
....................                          
....................     while(1) 
....................     { 
....................      
....................      
....................      
....................      
....................      
....................      
....................      
....................    /////////////////////-DEÐER OKUMA BLOÐU-/////////////////////////// 
....................      set_adc_channel(0); 
04FA:  MOVLW  00
04FB:  MOVWF  78
04FC:  MOVF   1F,W
04FD:  ANDLW  C3
04FE:  IORWF  78,W
04FF:  MOVWF  1F
....................      delay_us(20); 
0500:  MOVLW  06
0501:  MOVWF  77
0502:  DECFSZ 77,F
0503:  GOTO   502
0504:  NOP
....................      val_ADC_Pot_Surf = read_adc(); 
0505:  BSF    1F.1
0506:  BTFSC  1F.1
0507:  GOTO   506
0508:  BSF    03.5
0509:  MOVF   1E,W
050A:  BCF    03.5
050B:  MOVWF  28
050C:  MOVF   1E,W
050D:  MOVWF  29
....................      val_Voltage_potSurf = (float)((val_ADC_Pot_Surf/1024.0)*5.0); 
050E:  MOVF   29,W
050F:  MOVWF  3D
0510:  MOVF   28,W
0511:  MOVWF  3C
0512:  GOTO   151
0513:  MOVF   7A,W
0514:  MOVWF  3F
0515:  MOVF   79,W
0516:  MOVWF  3E
0517:  MOVF   78,W
0518:  MOVWF  3D
0519:  MOVF   77,W
051A:  MOVWF  3C
051B:  CLRF   43
051C:  CLRF   42
051D:  CLRF   41
051E:  MOVLW  89
051F:  MOVWF  40
0520:  GOTO   170
0521:  MOVF   7A,W
0522:  MOVWF  3F
0523:  MOVF   79,W
0524:  MOVWF  3E
0525:  MOVF   78,W
0526:  MOVWF  3D
0527:  MOVF   77,W
0528:  MOVWF  3C
0529:  MOVF   7A,W
052A:  MOVWF  4C
052B:  MOVF   79,W
052C:  MOVWF  4B
052D:  MOVF   78,W
052E:  MOVWF  4A
052F:  MOVF   77,W
0530:  MOVWF  49
0531:  CLRF   50
0532:  CLRF   4F
0533:  MOVLW  20
0534:  MOVWF  4E
0535:  MOVLW  81
0536:  MOVWF  4D
0537:  CALL   23C
0538:  MOVF   7A,W
0539:  MOVWF  31
053A:  MOVF   79,W
053B:  MOVWF  30
053C:  MOVF   78,W
053D:  MOVWF  2F
053E:  MOVF   77,W
053F:  MOVWF  2E
....................      printf(lcd_putc,"\f%lu",val_ADC_Pot_Surf); 
0540:  MOVLW  0C
0541:  MOVWF  49
0542:  CALL   0CF
0543:  MOVLW  10
0544:  MOVWF  04
0545:  MOVF   29,W
0546:  MOVWF  3D
0547:  MOVF   28,W
0548:  MOVWF  3C
0549:  GOTO   2B1
....................      printf(lcd_putc,"\n Volt=%f V",val_Voltage_potSurf); 
054A:  MOVLW  12
054B:  BSF    03.6
054C:  MOVWF  0D
054D:  MOVLW  00
054E:  MOVWF  0F
054F:  BCF    03.0
0550:  MOVLW  07
0551:  BCF    03.6
0552:  MOVWF  3C
0553:  GOTO   316
0554:  MOVLW  89
0555:  MOVWF  04
0556:  MOVF   31,W
0557:  MOVWF  3F
0558:  MOVF   30,W
0559:  MOVWF  3E
055A:  MOVF   2F,W
055B:  MOVWF  3D
055C:  MOVF   2E,W
055D:  MOVWF  3C
055E:  MOVLW  02
055F:  MOVWF  40
0560:  GOTO   3BE
0561:  MOVLW  20
0562:  MOVWF  49
0563:  CALL   0CF
0564:  MOVLW  56
0565:  MOVWF  49
0566:  CALL   0CF
....................      delay_ms(1000); 
0567:  MOVLW  04
0568:  MOVWF  3C
0569:  MOVLW  FA
056A:  MOVWF  4A
056B:  CALL   018
056C:  DECFSZ 3C,F
056D:  GOTO   569
056E:  GOTO   4FA
.................... //!      
.................... //!     set_adc_channel(1); 
.................... //!     delay_us(20); 
.................... //!     val_ADC_Pot_Timer = read_adc(); 
.................... //!     val_Voltage_potTimer = (float)((val_ADC_Pot_Timer/1024.0)*5.0); 
.................... //!     printf(lcd_putc,"\f%lu",val_ADC_Pot_Timer); 
.................... //!     printf(lcd_putc,"\n Volt=%f V",val_Voltage_potTimer); 
.................... //!     delay_ms(1000); 
.................... //!      
.................... //!      
.................... //!     set_adc_channel(2); 
.................... //!     delay_us(20); 
.................... //!     val_ADC_Pot_VacuumBlowing = read_adc(); 
.................... //!     val_Voltage_potSVacuumBlowing = (float)((val_ADC_Pot_VacuumBlowing/1024.0)*5.0); 
.................... //!     printf(lcd_putc,"\f%lu",val_ADC_Pot_VacuumBlowing); 
.................... //!     printf(lcd_putc,"\n Volt=%f V",val_Voltage_potSVacuumBlowing); 
.................... //!     delay_ms(1000); 
....................         
....................     } 
....................   
....................   
.................... } 
056F:  SLEEP

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
