#include <16f887.h>

//--> DEVICES
#device ADC = 10  //10-bit ADC reading will be performed

//--> FUSES
#fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT

//--> USEs
#use delay(clock=4M)
#use fast_io(b)
#use fast_io(e)
    
//--> PIN DEFINATIONS
#define ledPin pin_B0
#define tickButton pin_E0

//--> INCLUDES
#include <lcd.c>   
#include <math.h> 


//--> REGISTER DEFINATIONS
#byte my_TIM0_OPTION_REG = 0x81 
#byte my_TIM0_MODULE_REG = 0x01 
#byte my_INTCON_REG      = 0x0B


//--> USER VARIABLES

   //--> Timer Variable
   long timer0_isr_counter=0;
   long desired_value=0.0;
   int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};
   int optionIndex_timer;
   //To store the digital values coming from the potentiometers.
   unsigned long int val_ADC_Pot_Surf;

   unsigned long int previous_ADC_value = 0; //lcd flicker ýný azaltacak

//--> MACROS

   //--> Timer Desired Value Calculator 
   #define TimerScalingFactor ((1000.0) / 64.0)
   #define SECOND_TO_ISR_COUNT(time_arr, time_idx) \
      do{ \
         desired_value = ((time_arr[time_idx]) * TimerScalingFactor); \
      }while(0)
      
   //--> Convert ADC Value into index of SecondArray 
   #define ADC_TO_INDEXofTIMER(val_ADC_Pot_Surf) \
   do{                                        \
          optionIndex_timer = ((val_ADC_Pot_Surf*12)/1020);  \
          if(optionIndex_timer >= 12){ \
            optionIndex_timer = 11;    \
          }                            \
   }while(0)


//--> TIMER INTERRUPS
#INT_TIMER0
void systemTimer0_isr(){

   timer0_isr_counter++;
   
   // (64mS * desired_value) is for about desired_duration
   if(timer0_isr_counter == desired_value){
      output_toggle(ledPin);
      timer0_isr_counter=0;   
   }
   
   // Clear timer0 overflow interrupt flag 
   // my_INTCON_REG is 0x24 before we clear it,
   // 0x24 shows that(before clear):
   //       =>TIM0 Overflow bit is 1
   //       =>TIM0 Overflow Interrupt Enable bit is 1
   //
   //after clear , myINTCON_REG's flag bit is 0
   my_INTCON_REG &= 0xFB; 
}
//!


void main(void) 
{
      set_tris_b(0x00);
      set_tris_e(0x01);   

     //ADC YAPILANDIRMASI
      setup_adc_ports(sAN0);
      setup_adc(adc_clock_div_32); 
      
      set_adc_channel(0);
      delay_us(20);
      lcd_init(); // LCD ekranýmýzý baþlatacak
      delay_ms(1000);

      //LCD flicker azaltýcý
      do {
       val_ADC_Pot_Surf = read_adc();  
       
       ADC_TO_INDEXofTIMER(val_ADC_Pot_Surf);
       
       if (val_ADC_Pot_Surf != previous_ADC_value) 
       {
           printf(lcd_putc, "\fADC : %lu", val_ADC_Pot_Surf);
           delay_ms(10);
           printf(lcd_putc,"\nIndex=%d",optionIndex_timer);
           delay_ms(10);
           previous_ADC_value = val_ADC_Pot_Surf; 
       }
     
       if(input(tickButton) == 1){
         break;
       }
       
       }while(1);
      
       printf(lcd_putc, "\f");
       setup_adc(ADC_OFF);
       
//---> TIMER & INTERRUPT CONFIGURATION  <---//
     
     // T(overflow) = InstructionTime*PSC*(256-TIM0_val)
     //        64mS = 1uS * 256 * (256-56)
     my_TIM0_OPTION_REG &= 0xC7 ;
     my_TIM0_MODULE_REG = 56;
     // Enable interrupts by setting GIE (Global Interrupt Enable) 
     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register
     my_INTCON_REG = 0xA0; 
     
     // Client will choose one from the options shown below
     SECOND_TO_ISR_COUNT(time_arr, 0);  
         
 while(1)
 {
     
 }
}

