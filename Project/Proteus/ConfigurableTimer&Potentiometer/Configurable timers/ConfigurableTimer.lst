CCS PCM C Compiler, Version 5.049, 5967               12-Ara-24 00:57

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\TemelCCS çalýþmalarý\Kesmeler için\Configurable timers\ConfigurableTimer.lst

               ROM used:   344 words (4%)
                           Largest free fragment is 2048
               RAM used:   28 (8%) at main() level
                           41 (11%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0FA
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
0043:  MOVLW  8E
0044:  MOVWF  77
0045:  MOVF   38,W
0046:  MOVWF  78
0047:  MOVF   37,W
0048:  MOVWF  79
0049:  CLRF   7A
004A:  MOVF   78,F
004B:  BTFSS  03.2
004C:  GOTO   057
004D:  MOVF   79,W
004E:  MOVWF  78
004F:  CLRF   79
0050:  MOVLW  08
0051:  SUBWF  77,F
0052:  MOVF   78,F
0053:  BTFSS  03.2
0054:  GOTO   057
0055:  CLRF   77
0056:  GOTO   05F
0057:  BCF    03.0
0058:  BTFSC  78.7
0059:  GOTO   05E
005A:  RLF    79,F
005B:  RLF    78,F
005C:  DECF   77,F
005D:  GOTO   057
005E:  BCF    78.7
005F:  BCF    0A.3
0060:  BCF    0A.4
0061:  GOTO   132 (RETURN)
0062:  MOVF   37,W
0063:  BTFSC  03.2
0064:  GOTO   0D2
0065:  MOVWF  3F
0066:  MOVF   3B,W
0067:  BTFSC  03.2
0068:  GOTO   0D2
0069:  ADDWF  3F,F
006A:  BTFSC  03.0
006B:  GOTO   073
006C:  MOVLW  7F
006D:  SUBWF  3F,F
006E:  BTFSS  03.0
006F:  GOTO   0D2
0070:  BTFSC  03.2
0071:  GOTO   0D2
0072:  GOTO   077
0073:  MOVLW  81
0074:  ADDWF  3F,F
0075:  BTFSC  03.0
0076:  GOTO   0D2
0077:  MOVF   3F,W
0078:  MOVWF  77
0079:  CLRF   78
007A:  CLRF   79
007B:  CLRF   7A
007C:  MOVF   38,W
007D:  MOVWF  43
007E:  BSF    43.7
007F:  MOVF   39,W
0080:  MOVWF  42
0081:  MOVF   3A,W
0082:  MOVWF  41
0083:  MOVLW  18
0084:  MOVWF  3F
0085:  CLRF   40
0086:  BTFSS  41.0
0087:  GOTO   0A0
0088:  MOVF   3E,W
0089:  ADDWF  7A,F
008A:  BTFSS  03.0
008B:  GOTO   092
008C:  INCF   79,F
008D:  BTFSS  03.2
008E:  GOTO   092
008F:  INCF   78,F
0090:  BTFSC  03.2
0091:  BSF    40.7
0092:  MOVF   3D,W
0093:  ADDWF  79,F
0094:  BTFSS  03.0
0095:  GOTO   099
0096:  INCF   78,F
0097:  BTFSC  03.2
0098:  BSF    40.7
0099:  MOVF   3C,W
009A:  MOVWF  39
009B:  BSF    39.7
009C:  MOVF   39,W
009D:  ADDWF  78,F
009E:  BTFSC  03.0
009F:  BSF    40.7
00A0:  RLF    40,F
00A1:  RRF    78,F
00A2:  RRF    79,F
00A3:  RRF    7A,F
00A4:  RRF    43,F
00A5:  RRF    42,F
00A6:  RRF    41,F
00A7:  BCF    03.0
00A8:  DECFSZ 3F,F
00A9:  GOTO   085
00AA:  MOVLW  01
00AB:  ADDWF  77,F
00AC:  BTFSC  03.0
00AD:  GOTO   0D2
00AE:  BTFSC  78.7
00AF:  GOTO   0B7
00B0:  RLF    43,F
00B1:  RLF    7A,F
00B2:  RLF    79,F
00B3:  RLF    78,F
00B4:  DECF   77,F
00B5:  BTFSC  03.2
00B6:  GOTO   0D2
00B7:  BTFSS  43.7
00B8:  GOTO   0C8
00B9:  INCF   7A,F
00BA:  BTFSS  03.2
00BB:  GOTO   0C8
00BC:  INCF   79,F
00BD:  BTFSS  03.2
00BE:  GOTO   0C8
00BF:  INCF   78,F
00C0:  BTFSS  03.2
00C1:  GOTO   0C8
00C2:  RRF    78,F
00C3:  RRF    79,F
00C4:  RRF    7A,F
00C5:  INCF   77,F
00C6:  BTFSC  03.2
00C7:  GOTO   0D2
00C8:  MOVF   38,W
00C9:  MOVWF  40
00CA:  MOVF   3C,W
00CB:  XORWF  40,F
00CC:  BTFSS  40.7
00CD:  GOTO   0D0
00CE:  BSF    78.7
00CF:  GOTO   0D6
00D0:  BCF    78.7
00D1:  GOTO   0D6
00D2:  CLRF   77
00D3:  CLRF   78
00D4:  CLRF   79
00D5:  CLRF   7A
00D6:  BCF    0A.3
00D7:  BCF    0A.4
00D8:  GOTO   141 (RETURN)
00D9:  MOVLW  8E
00DA:  MOVWF  77
00DB:  MOVF   37,W
00DC:  SUBWF  77,F
00DD:  MOVF   38,W
00DE:  MOVWF  79
00DF:  MOVF   39,W
00E0:  MOVWF  78
00E1:  BSF    79.7
00E2:  MOVF   77,F
00E3:  BTFSC  03.2
00E4:  GOTO   0F0
00E5:  BCF    03.0
00E6:  MOVF   79,F
00E7:  BTFSS  03.2
00E8:  GOTO   0EC
00E9:  MOVF   78,F
00EA:  BTFSC  03.2
00EB:  GOTO   0F0
00EC:  RRF    79,F
00ED:  RRF    78,F
00EE:  DECFSZ 77,F
00EF:  GOTO   0E5
00F0:  BTFSS  38.7
00F1:  GOTO   0F7
00F2:  COMF   78,F
00F3:  COMF   79,F
00F4:  INCF   78,F
00F5:  BTFSC  03.2
00F6:  INCF   79,F
00F7:  BCF    0A.3
00F8:  BCF    0A.4
00F9:  GOTO   14A (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #use delay(clock=4M) 
.................... #use fast_io(b)  
....................  
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... #define ledPin pin_B0 
....................  
.................... //-->REGISTER DEFINATIONS 
.................... #byte my_TIM0_OPTION_REG = 0x81  
.................... #byte my_TIM0_MODULE_REG = 0x01  
.................... #byte my_INTCON_REG      = 0x0B 
....................  
.................... long timer0_isr_counter=0; 
.................... long desired_value=0.0; 
.................... int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};   
*
0111:  MOVLW  14
0112:  BCF    03.6
0113:  MOVWF  2B
0114:  MOVLW  28
0115:  MOVWF  2C
0116:  MOVLW  3C
0117:  MOVWF  2D
0118:  MOVLW  50
0119:  MOVWF  2E
011A:  MOVLW  64
011B:  MOVWF  2F
011C:  MOVLW  78
011D:  MOVWF  30
011E:  MOVLW  8C
011F:  MOVWF  31
0120:  MOVLW  A0
0121:  MOVWF  32
0122:  MOVLW  B4
0123:  MOVWF  33
0124:  MOVLW  C8
0125:  MOVWF  34
0126:  MOVLW  DC
0127:  MOVWF  35
0128:  MOVLW  F0
0129:  MOVWF  36
....................  
.................... #define TimerScalingFactor ((1000.0) / 64.0) 
.................... #define SECOND_TO_ISR_COUNT(time_arr, time_idx) \ 
....................    do{ \ 
....................       desired_value = ((time_arr[time_idx]) * TimerScalingFactor); \ 
....................    }while(0) 
....................  
....................  
.................... #INT_TIMER0 
.................... void systemTimer0_isr(){ 
....................  
....................    timer0_isr_counter++; 
*
002F:  INCF   27,F
0030:  BTFSC  03.2
0031:  INCF   28,F
....................     
....................    // (64mS * desired_value) is for about desired_duration 
....................    if(timer0_isr_counter == desired_value){ 
0032:  MOVF   29,W
0033:  SUBWF  27,W
0034:  BTFSS  03.2
0035:  GOTO   03E
0036:  MOVF   2A,W
0037:  SUBWF  28,W
0038:  BTFSS  03.2
0039:  GOTO   03E
....................     
....................    output_toggle(ledPin); 
003A:  MOVLW  01
003B:  XORWF  06,F
....................     
....................    timer0_isr_counter=0; 
003C:  CLRF   28
003D:  CLRF   27
....................    } 
....................  
....................  
....................    //Clear timer0 overflow interrupt flag  
....................    //my_INTCON_REG is 0x24 before we clear it, 
....................    // 0x24 shows that(before clear): 
....................    //       =>TIM0 Overflow bit is 1 
....................    //       =>TIM0 Overflow Interrupt Enable bit is 1 
....................    // 
....................    //after clear , myINTCON_REG's flag bit is 0 
....................    my_INTCON_REG &= 0xFB;  
003E:  BCF    0B.2
....................     
003F:  BCF    0B.2
0040:  BCF    0A.3
0041:  BCF    0A.4
0042:  GOTO   01B
.................... } 
....................  
....................  
....................  
.................... void main(void)  
*
00FA:  MOVF   03,W
00FB:  ANDLW  1F
00FC:  MOVWF  03
00FD:  CLRF   28
00FE:  CLRF   27
00FF:  CLRF   2A
0100:  CLRF   29
0101:  BSF    03.5
0102:  BSF    03.6
0103:  MOVF   09,W
0104:  ANDLW  C0
0105:  MOVWF  09
0106:  BCF    03.6
0107:  BCF    1F.4
0108:  BCF    1F.5
0109:  MOVLW  00
010A:  BSF    03.6
010B:  MOVWF  08
010C:  BCF    03.5
010D:  CLRF   07
010E:  CLRF   08
010F:  CLRF   09
0110:  BCF    03.7
.................... { 
....................  
....................    set_tris_b(0x00);   
*
012A:  MOVLW  00
012B:  BSF    03.5
012C:  MOVWF  06
....................     
.................... //---> TIMER & INTERRUPT CONFIGURATION  <---// 
....................  
....................      // Client will choose one from the options shown below 
....................      SECOND_TO_ISR_COUNT(time_arr, 0);    
012D:  BCF    03.5
012E:  CLRF   38
012F:  MOVF   2B,W
0130:  MOVWF  37
0131:  GOTO   043
0132:  MOVF   7A,W
0133:  MOVWF  3A
0134:  MOVF   79,W
0135:  MOVWF  39
0136:  MOVF   78,W
0137:  MOVWF  38
0138:  MOVF   77,W
0139:  MOVWF  37
013A:  CLRF   3E
013B:  CLRF   3D
013C:  MOVLW  7A
013D:  MOVWF  3C
013E:  MOVLW  82
013F:  MOVWF  3B
0140:  GOTO   062
0141:  MOVF   7A,W
0142:  MOVWF  3A
0143:  MOVF   79,W
0144:  MOVWF  39
0145:  MOVF   78,W
0146:  MOVWF  38
0147:  MOVF   77,W
0148:  MOVWF  37
0149:  GOTO   0D9
014A:  MOVF   79,W
014B:  MOVWF  2A
014C:  MOVF   78,W
014D:  MOVWF  29
....................       
....................      //T(overflow) = InstructionTime*PSC*(256-TIM0_val) 
....................      //       64mS = 1uS * 256 * (256-56) 
....................      my_TIM0_OPTION_REG &= 0xC7 ; 
014E:  MOVLW  C7
014F:  BSF    03.5
0150:  ANDWF  01,F
....................      my_TIM0_MODULE_REG = 56; 
0151:  MOVLW  38
0152:  BCF    03.5
0153:  MOVWF  01
....................       
....................      // Enable interrupts by setting GIE (Global Interrupt Enable)  
....................      // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register 
....................      my_INTCON_REG = 0xA0; 
0154:  MOVLW  A0
0155:  MOVWF  0B
....................       
....................      
....................  while(1) 
....................  { 
0156:  GOTO   156
....................   
....................    
....................  } 
.................... }  
0157:  SLEEP

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
