#include <16f887.h>

#use delay(clock=4M)
#use fast_io(b) 

#fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT

#define ledPin pin_B0

//-->REGISTER DEFINATIONS
#byte my_TIM0_OPTION_REG = 0x81 
#byte my_TIM0_MODULE_REG = 0x01 
#byte my_INTCON_REG      = 0x0B

int timer0_isr_counter=0;
int desired_value=0;


#define TimerScalingFactor ((1000.0) / 64.0)
#define SECOND_TO_ISR_COUNT(time_arr, time_idx) \
   do{ \
      desired_value = ((time_arr[time_idx]) * TimerScalingFactor); \
   }while(0)


#INT_TIMER0
void systemTimer0_isr(){

   timer0_isr_counter++;
   
   // 64mS * 47 is for about 3008mS = 3second
   if(timer0_isr_counter == desired_value){
   
   output_toggle(ledPin);
   
   timer0_isr_counter=0;
   }


   //Clear timer0 overflow interrupt flag 
   //my_INTCON_REG is 0x24 before we clear it,
   // 0x24 shows that(before clear):
   //       =>TIM0 Overflow bit is 1
   //       =>TIM0 Overflow Interrupt Enable bit is 1
   //
   //after clear , myINTCON_REG's flag bit is 0
   my_INTCON_REG &= 0xFB; 
   
}



void main(void) 
{

   set_tris_b(0x00);  
   
//---> TIMER & INTERRUPT CONFIGURATION  <---//

     // Client will choose one from the options shown below
     int time_arr[12] = {20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240};  
     SECOND_TO_ISR_COUNT(time_arr, 11);   
     
     //T(overflow) = InstructionTime*PSC*(256-TIM0_val)
     //       64mS = 1uS * 256 * (256-56)
     my_TIM0_OPTION_REG &= 0xC7 ;
     my_TIM0_MODULE_REG = 56;
     
     // Enable interrupts by setting GIE (Global Interrupt Enable) 
     // and TOIE (Timer0 Overflow Interrupt Enable) bits in INTCON register
     my_INTCON_REG = 0xA0;
     
    
 while(1)
 {
 
  
 }
} 
