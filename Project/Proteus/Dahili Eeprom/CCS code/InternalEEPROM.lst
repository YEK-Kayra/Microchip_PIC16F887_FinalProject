CCS PCM C Compiler, Version 5.049, 5967               29-Ara-24 15:01

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Proteus\Dahili Eeprom\CCS code\InternalEEPROM.lst

               ROM used:   478 words (6%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           26 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1AB
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 8C,20
0005:  DATA C4,21
0006:  DATA 20,1D
0007:  DATA A0,12
0008:  DATA EC,3A
0009:  DATA 00,00
*
00ED:  MOVF   0B,W
00EE:  MOVWF  23
00EF:  BCF    0B.7
00F0:  BSF    03.5
00F1:  BSF    03.6
00F2:  BSF    0C.7
00F3:  BSF    0C.0
00F4:  NOP
00F5:  NOP
00F6:  BCF    03.5
00F7:  BCF    03.6
00F8:  BTFSC  23.7
00F9:  BSF    0B.7
00FA:  BTFSC  03.0
00FB:  GOTO   124
00FC:  BSF    03.6
00FD:  MOVF   0C,W
00FE:  ANDLW  7F
00FF:  BCF    03.6
0100:  MOVWF  23
0101:  BSF    03.6
0102:  MOVF   0D,W
0103:  BCF    03.6
0104:  MOVWF  24
0105:  BSF    03.6
0106:  MOVF   0F,W
0107:  BCF    03.6
0108:  MOVWF  25
0109:  MOVF   23,W
010A:  MOVWF  2B
010B:  CALL   0C1
010C:  MOVF   24,W
010D:  BSF    03.6
010E:  MOVWF  0D
010F:  BCF    03.6
0110:  MOVF   25,W
0111:  BSF    03.6
0112:  MOVWF  0F
0113:  BCF    03.6
0114:  MOVF   0B,W
0115:  MOVWF  26
0116:  BCF    0B.7
0117:  BSF    03.5
0118:  BSF    03.6
0119:  BSF    0C.7
011A:  BSF    0C.0
011B:  NOP
011C:  NOP
011D:  BCF    03.5
011E:  BCF    03.6
011F:  BTFSC  26.7
0120:  BSF    0B.7
0121:  DECFSZ 22,F
0122:  GOTO   124
0123:  GOTO   143
0124:  BSF    03.6
0125:  RLF    0C,W
0126:  RLF    0E,W
0127:  ANDLW  7F
0128:  BCF    03.6
0129:  MOVWF  23
012A:  BSF    03.6
012B:  MOVF   0D,W
012C:  BCF    03.6
012D:  MOVWF  24
012E:  BSF    03.6
012F:  MOVF   0F,W
0130:  BCF    03.6
0131:  MOVWF  25
0132:  MOVF   23,W
0133:  MOVWF  2B
0134:  CALL   0C1
0135:  MOVF   24,W
0136:  BSF    03.6
0137:  MOVWF  0D
0138:  BCF    03.6
0139:  MOVF   25,W
013A:  BSF    03.6
013B:  MOVWF  0F
013C:  INCF   0D,F
013D:  BTFSC  03.2
013E:  INCF   0F,F
013F:  BCF    03.0
0140:  BCF    03.6
0141:  DECFSZ 22,F
0142:  GOTO   0ED
0143:  BCF    0A.3
0144:  BCF    0A.4
0145:  GOTO   1D2 (RETURN)
0146:  CLRF   2A
0147:  MOVF   04,W
0148:  MOVWF  29
0149:  BCF    2A.0
014A:  BTFSC  03.7
014B:  BSF    2A.0
014C:  SWAPF  23,W
014D:  IORLW  F0
014E:  MOVWF  25
014F:  ADDWF  25,F
0150:  ADDLW  E2
0151:  MOVWF  26
0152:  ADDLW  32
0153:  MOVWF  28
0154:  MOVF   23,W
0155:  ANDLW  0F
0156:  ADDWF  26,F
0157:  ADDWF  26,F
0158:  ADDWF  28,F
0159:  ADDLW  E9
015A:  MOVWF  27
015B:  ADDWF  27,F
015C:  ADDWF  27,F
015D:  SWAPF  22,W
015E:  ANDLW  0F
015F:  ADDWF  27,F
0160:  ADDWF  28,F
0161:  RLF    27,F
0162:  RLF    28,F
0163:  COMF   28,F
0164:  RLF    28,F
0165:  MOVF   22,W
0166:  ANDLW  0F
0167:  ADDWF  28,F
0168:  RLF    25,F
0169:  MOVLW  07
016A:  MOVWF  24
016B:  MOVLW  0A
016C:  ADDWF  28,F
016D:  DECF   27,F
016E:  BTFSS  03.0
016F:  GOTO   16C
0170:  ADDWF  27,F
0171:  DECF   26,F
0172:  BTFSS  03.0
0173:  GOTO   170
0174:  ADDWF  26,F
0175:  DECF   25,F
0176:  BTFSS  03.0
0177:  GOTO   174
0178:  ADDWF  25,F
0179:  DECF   24,F
017A:  BTFSS  03.0
017B:  GOTO   178
017C:  MOVLW  24
017D:  MOVWF  04
017E:  BCF    03.7
017F:  MOVLW  07
0180:  ANDWF  29,W
0181:  BCF    29.6
0182:  ADDWF  04,F
0183:  MOVLW  28
0184:  SUBWF  04,W
0185:  BTFSC  03.2
0186:  BSF    29.6
0187:  MOVF   00,W
0188:  MOVWF  77
0189:  BTFSS  03.2
018A:  GOTO   193
018B:  BTFSC  29.6
018C:  GOTO   193
018D:  BTFSC  29.4
018E:  GOTO   1A5
018F:  BTFSC  29.3
0190:  GOTO   193
0191:  MOVLW  20
0192:  GOTO   196
0193:  BSF    29.3
0194:  BCF    29.4
0195:  MOVLW  30
0196:  ADDWF  77,F
0197:  CLRF   23
0198:  MOVF   04,W
0199:  MOVWF  22
019A:  BCF    23.0
019B:  BTFSC  03.7
019C:  BSF    23.0
019D:  MOVF   77,W
019E:  MOVWF  2B
019F:  CALL   0C1
01A0:  MOVF   22,W
01A1:  MOVWF  04
01A2:  BCF    03.7
01A3:  BTFSC  23.0
01A4:  BSF    03.7
01A5:  INCF   04,F
01A6:  BTFSS  29.6
01A7:  GOTO   183
01A8:  BCF    0A.3
01A9:  BCF    0A.4
01AA:  GOTO   1D9 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... //--> FUSES 
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... //--> USEs 
.................... #use delay(clock=4M) 
*
000A:  MOVLW  2C
000B:  MOVWF  04
000C:  BCF    03.7
000D:  MOVF   00,W
000E:  BTFSC  03.2
000F:  GOTO   01E
0010:  MOVLW  01
0011:  MOVWF  78
0012:  CLRF   77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 78,F
0016:  GOTO   012
0017:  MOVLW  4A
0018:  MOVWF  77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  GOTO   01C
001C:  DECFSZ 00,F
001D:  GOTO   010
001E:  RETURN
....................  
....................  
.................... //--> INCLUDES 
.................... #include <lcd.c>    
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0037:  MOVLW  0F
0038:  BSF    03.5
0039:  ANDWF  08,W
003A:  IORLW  F0
003B:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003C:  BCF    03.5
003D:  BSF    08.2
....................    delay_cycles(1); 
003E:  NOP
....................    lcd_output_enable(1); 
003F:  BSF    08.0
....................    delay_cycles(1); 
0040:  NOP
....................    high = lcd_read_nibble(); 
0041:  CALL   02B
0042:  MOVF   78,W
0043:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
0044:  BCF    08.0
....................    delay_cycles(1); 
0045:  NOP
....................    lcd_output_enable(1); 
0046:  BSF    08.0
....................    delay_us(1); 
0047:  NOP
....................    low = lcd_read_nibble(); 
0048:  CALL   02B
0049:  MOVF   78,W
004A:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
004B:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004C:  MOVLW  0F
004D:  BSF    03.5
004E:  ANDWF  08,W
004F:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0050:  BCF    03.5
0051:  SWAPF  33,W
0052:  MOVWF  77
0053:  MOVLW  F0
0054:  ANDWF  77,F
0055:  MOVF   77,W
0056:  IORWF  32,W
0057:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002B:  MOVF   08,W
002C:  MOVWF  77
002D:  SWAPF  08,W
002E:  ANDLW  0F
002F:  MOVWF  78
....................   #endif 
0030:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
001F:  SWAPF  33,W
0020:  ANDLW  F0
0021:  MOVWF  77
0022:  MOVLW  0F
0023:  ANDWF  08,W
0024:  IORWF  77,W
0025:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0026:  NOP
....................    lcd_output_enable(1); 
0027:  BSF    08.0
....................    delay_us(2); 
0028:  GOTO   029
....................    lcd_output_enable(0); 
0029:  BCF    08.0
002A:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0031:  BSF    03.5
0032:  BCF    08.0
....................    lcd_rs_tris(); 
0033:  BCF    08.1
....................    lcd_rw_tris(); 
0034:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0035:  BCF    03.5
0036:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0058:  MOVF   78,W
0059:  MOVWF  32
005A:  BTFSC  32.7
005B:  GOTO   037
....................    lcd_output_rs(address); 
005C:  BTFSS  30.0
005D:  BCF    08.1
005E:  BTFSC  30.0
005F:  BSF    08.1
....................    delay_cycles(1); 
0060:  NOP
....................    lcd_output_rw(0); 
0061:  BCF    08.2
....................    delay_cycles(1); 
0062:  NOP
....................    lcd_output_enable(0); 
0063:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0064:  SWAPF  31,W
0065:  MOVWF  32
0066:  MOVLW  0F
0067:  ANDWF  32,F
0068:  MOVF   32,W
0069:  MOVWF  33
006A:  CALL   01F
....................    lcd_send_nibble(n & 0xf); 
006B:  MOVF   31,W
006C:  ANDLW  0F
006D:  MOVWF  32
006E:  MOVWF  33
006F:  CALL   01F
0070:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0071:  MOVLW  28
0072:  MOVWF  23
0073:  MOVLW  0C
0074:  MOVWF  24
0075:  MOVLW  01
0076:  MOVWF  25
0077:  MOVLW  06
0078:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0079:  BCF    08.0
....................    lcd_output_rs(0); 
007A:  BCF    08.1
....................    lcd_output_rw(0); 
007B:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007C:  MOVLW  0F
007D:  BSF    03.5
007E:  ANDWF  08,W
007F:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0080:  BCF    08.0
....................    lcd_rs_tris(); 
0081:  BCF    08.1
....................    lcd_rw_tris(); 
0082:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
0083:  MOVLW  0F
0084:  BCF    03.5
0085:  MOVWF  2C
0086:  CALL   00A
....................    for(i=1;i<=3;++i) 
0087:  MOVLW  01
0088:  MOVWF  22
0089:  MOVF   22,W
008A:  SUBLW  03
008B:  BTFSS  03.0
008C:  GOTO   095
....................    { 
....................        lcd_send_nibble(3); 
008D:  MOVLW  03
008E:  MOVWF  33
008F:  CALL   01F
....................        delay_ms(5); 
0090:  MOVLW  05
0091:  MOVWF  2C
0092:  CALL   00A
0093:  INCF   22,F
0094:  GOTO   089
....................    } 
....................     
....................    lcd_send_nibble(2); 
0095:  MOVLW  02
0096:  MOVWF  33
0097:  CALL   01F
....................    delay_ms(5); 
0098:  MOVLW  05
0099:  MOVWF  2C
009A:  CALL   00A
....................    for(i=0;i<=3;++i) 
009B:  CLRF   22
009C:  MOVF   22,W
009D:  SUBLW  03
009E:  BTFSS  03.0
009F:  GOTO   0AC
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A0:  MOVLW  23
00A1:  ADDWF  22,W
00A2:  MOVWF  04
00A3:  BCF    03.7
00A4:  MOVF   00,W
00A5:  MOVWF  27
00A6:  CLRF   30
00A7:  MOVF   27,W
00A8:  MOVWF  31
00A9:  CALL   031
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AA:  INCF   22,F
00AB:  GOTO   09C
00AC:  BCF    0A.3
00AD:  BCF    0A.4
00AE:  GOTO   1C8 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00AF:  DECFSZ 2D,W
00B0:  GOTO   0B2
00B1:  GOTO   0B5
....................       address=LCD_LINE_TWO; 
00B2:  MOVLW  40
00B3:  MOVWF  2E
00B4:  GOTO   0B6
....................    else 
....................       address=0; 
00B5:  CLRF   2E
....................       
....................    address+=x-1; 
00B6:  MOVLW  01
00B7:  SUBWF  2C,W
00B8:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
00B9:  MOVF   2E,W
00BA:  IORLW  80
00BB:  MOVWF  2F
00BC:  CLRF   30
00BD:  MOVF   2F,W
00BE:  MOVWF  31
00BF:  CALL   031
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C0:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C1:  MOVF   2B,W
00C2:  XORLW  07
00C3:  BTFSC  03.2
00C4:  GOTO   0CF
00C5:  XORLW  0B
00C6:  BTFSC  03.2
00C7:  GOTO   0D4
00C8:  XORLW  06
00C9:  BTFSC  03.2
00CA:  GOTO   0DC
00CB:  XORLW  02
00CC:  BTFSC  03.2
00CD:  GOTO   0E2
00CE:  GOTO   0E7
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00CF:  MOVLW  01
00D0:  MOVWF  2C
00D1:  MOVWF  2D
00D2:  CALL   0AF
00D3:  GOTO   0EC
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D4:  CLRF   30
00D5:  MOVLW  01
00D6:  MOVWF  31
00D7:  CALL   031
....................                      delay_ms(2); 
00D8:  MOVLW  02
00D9:  MOVWF  2C
00DA:  CALL   00A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00DB:  GOTO   0EC
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DC:  MOVLW  01
00DD:  MOVWF  2C
00DE:  MOVLW  02
00DF:  MOVWF  2D
00E0:  CALL   0AF
00E1:  GOTO   0EC
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E2:  CLRF   30
00E3:  MOVLW  10
00E4:  MOVWF  31
00E5:  CALL   031
00E6:  GOTO   0EC
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E7:  MOVLW  01
00E8:  MOVWF  30
00E9:  MOVF   2B,W
00EA:  MOVWF  31
00EB:  CALL   031
....................      #endif 
....................    } 
00EC:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned long data; 
....................  
.................... void main(void)  
*
01AB:  MOVF   03,W
01AC:  ANDLW  1F
01AD:  MOVWF  03
01AE:  BSF    03.5
01AF:  BSF    03.6
01B0:  MOVF   09,W
01B1:  ANDLW  C0
01B2:  MOVWF  09
01B3:  BCF    03.6
01B4:  BCF    1F.4
01B5:  BCF    1F.5
01B6:  MOVLW  00
01B7:  BSF    03.6
01B8:  MOVWF  08
01B9:  BCF    03.5
01BA:  CLRF   07
01BB:  CLRF   08
01BC:  CLRF   09
01BD:  BCF    03.7
.................... { 
....................       set_tris_b(0x00); 
01BE:  MOVLW  00
01BF:  BSF    03.5
01C0:  BCF    03.6
01C1:  MOVWF  06
....................       set_tris_e(0x01);    
01C2:  BSF    09.0
01C3:  BCF    09.1
01C4:  BCF    09.2
01C5:  BCF    09.3
....................  
....................  
....................       lcd_init(); // LCD ekranýmýzý baþlatacak 
01C6:  BCF    03.5
01C7:  GOTO   071
....................  
....................        
....................       printf(lcd_putc, "\fADC : %lu",data );    
01C8:  MOVLW  04
01C9:  BSF    03.6
01CA:  MOVWF  0D
01CB:  MOVLW  00
01CC:  MOVWF  0F
01CD:  BCF    03.0
01CE:  MOVLW  07
01CF:  BCF    03.6
01D0:  MOVWF  22
01D1:  GOTO   0ED
01D2:  MOVLW  10
01D3:  MOVWF  04
01D4:  MOVF   21,W
01D5:  MOVWF  23
01D6:  MOVF   20,W
01D7:  MOVWF  22
01D8:  GOTO   146
....................       printf(lcd_putc, "\f"); 
01D9:  MOVLW  0C
01DA:  MOVWF  2B
01DB:  CALL   0C1
....................  
....................  
....................           
....................  while(1) 
....................  { 
01DC:  GOTO   1DC
....................       
....................  } 
.................... } 
....................  
01DD:  SLEEP

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
