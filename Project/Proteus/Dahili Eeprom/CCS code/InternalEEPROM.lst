CCS PCM C Compiler, Version 5.049, 5967               30-Ara-24 01:11

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Proteus\Dahili Eeprom\CCS code\InternalEEPROM.lst

               ROM used:   872 words (11%)
                           Largest free fragment is 2048
               RAM used:   37 (10%) at main() level
                           51 (14%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   302
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 4F,38
0005:  DATA 65,39
0006:  DATA E1,39
0007:  DATA F9,37
0008:  DATA 6E,10
0009:  DATA D3,37
000A:  DATA EE,3A
000B:  DATA 00,00
000C:  DATA C9,39
000D:  DATA EC,32
000E:  DATA 6D,36
000F:  DATA 65,39
0010:  DATA 69,37
0011:  DATA 69,3D
0012:  DATA 00,01
0013:  DATA CB,30
0014:  DATA 79,32
0015:  DATA 65,32
0016:  DATA 69,36
0017:  DATA E9,3C
0018:  DATA 6F,39
0019:  DATA 00,01
001A:  DATA CB,30
001B:  DATA F9,34
001C:  DATA 74,36
001D:  DATA 61,39
001E:  DATA 00,01
001F:  DATA D4,30
0020:  DATA ED,30
0021:  DATA 6D,36
0022:  DATA 61,37
0023:  DATA E4,34
0024:  DATA 00,01
0025:  DATA 41,37
0026:  DATA 61,10
0027:  DATA CD,32
0028:  DATA EE,3A
0029:  DATA F9,32
002A:  DATA 00,01
002B:  DATA D9,37
002C:  DATA 6E,36
002D:  DATA 65,37
002E:  DATA E4,34
002F:  DATA F2,34
0030:  DATA EC,34
0031:  DATA F9,37
0032:  DATA 72,00
0033:  DATA A0,2B
0034:  DATA 3A,10
0035:  DATA 25,32
0036:  DATA 20,2A
0037:  DATA 4C,00
0038:  DATA 20,28
0039:  DATA 3A,10
003A:  DATA 25,32
003B:  DATA 20,2A
003C:  DATA 4C,00
*
0120:  MOVF   45,W
0121:  CLRF   78
0122:  SUBWF  44,W
0123:  BTFSC  03.0
0124:  GOTO   128
0125:  MOVF   44,W
0126:  MOVWF  77
0127:  GOTO   134
0128:  CLRF   77
0129:  MOVLW  08
012A:  MOVWF  46
012B:  RLF    44,F
012C:  RLF    77,F
012D:  MOVF   45,W
012E:  SUBWF  77,W
012F:  BTFSC  03.0
0130:  MOVWF  77
0131:  RLF    78,F
0132:  DECFSZ 46,F
0133:  GOTO   12B
0134:  RETURN
0135:  MOVLW  20
0136:  BTFSS  3F.4
0137:  MOVLW  30
0138:  MOVWF  40
0139:  MOVF   3E,W
013A:  MOVWF  77
013B:  BTFSS  3E.7
013C:  GOTO   145
013D:  COMF   77,F
013E:  INCF   77,F
013F:  MOVF   77,W
0140:  MOVWF  3E
0141:  MOVLW  2D
0142:  MOVWF  40
0143:  BSF    3F.7
0144:  BSF    3F.0
0145:  MOVF   3E,W
0146:  MOVWF  44
0147:  MOVLW  64
0148:  MOVWF  45
0149:  CALL   120
014A:  MOVF   77,W
014B:  MOVWF  3E
014C:  MOVLW  30
014D:  ADDWF  78,W
014E:  MOVWF  41
014F:  MOVF   3E,W
0150:  MOVWF  44
0151:  MOVLW  0A
0152:  MOVWF  45
0153:  CALL   120
0154:  MOVLW  30
0155:  ADDWF  77,W
0156:  MOVWF  43
0157:  MOVLW  30
0158:  ADDWF  78,W
0159:  MOVWF  42
015A:  MOVF   40,W
015B:  MOVWF  77
015C:  MOVLW  30
015D:  SUBWF  41,W
015E:  BTFSC  03.2
015F:  GOTO   164
0160:  BSF    3F.1
0161:  BTFSC  3F.7
0162:  BSF    3F.2
0163:  GOTO   178
0164:  MOVF   40,W
0165:  MOVWF  41
0166:  MOVLW  20
0167:  MOVWF  40
0168:  MOVLW  30
0169:  SUBWF  42,W
016A:  BTFSC  03.2
016B:  GOTO   170
016C:  BSF    3F.0
016D:  BTFSC  3F.7
016E:  BSF    3F.1
016F:  GOTO   178
0170:  BTFSS  03.2
0171:  BSF    3F.0
0172:  BTFSS  03.2
0173:  GOTO   178
0174:  MOVF   41,W
0175:  MOVWF  42
0176:  MOVLW  20
0177:  MOVWF  41
0178:  BTFSC  3F.2
0179:  GOTO   17F
017A:  BTFSC  3F.1
017B:  GOTO   182
017C:  BTFSC  3F.0
017D:  GOTO   185
017E:  GOTO   188
017F:  MOVF   40,W
0180:  MOVWF  44
0181:  CALL   0F4
0182:  MOVF   41,W
0183:  MOVWF  44
0184:  CALL   0F4
0185:  MOVF   42,W
0186:  MOVWF  44
0187:  CALL   0F4
0188:  MOVF   43,W
0189:  MOVWF  44
018A:  CALL   0F4
018B:  RETURN
018C:  MOVF   0B,W
018D:  MOVWF  3F
018E:  BCF    0B.7
018F:  BSF    03.5
0190:  BSF    03.6
0191:  BSF    0C.7
0192:  BSF    0C.0
0193:  NOP
0194:  NOP
0195:  BCF    03.5
0196:  BCF    03.6
0197:  BTFSC  3F.7
0198:  BSF    0B.7
0199:  BTFSC  03.0
019A:  GOTO   1C3
019B:  BSF    03.6
019C:  MOVF   0C,W
019D:  ANDLW  7F
019E:  BCF    03.6
019F:  MOVWF  3F
01A0:  BSF    03.6
01A1:  MOVF   0D,W
01A2:  BCF    03.6
01A3:  MOVWF  40
01A4:  BSF    03.6
01A5:  MOVF   0F,W
01A6:  BCF    03.6
01A7:  MOVWF  41
01A8:  MOVF   3F,W
01A9:  MOVWF  44
01AA:  CALL   0F4
01AB:  MOVF   40,W
01AC:  BSF    03.6
01AD:  MOVWF  0D
01AE:  BCF    03.6
01AF:  MOVF   41,W
01B0:  BSF    03.6
01B1:  MOVWF  0F
01B2:  BCF    03.6
01B3:  MOVF   0B,W
01B4:  MOVWF  42
01B5:  BCF    0B.7
01B6:  BSF    03.5
01B7:  BSF    03.6
01B8:  BSF    0C.7
01B9:  BSF    0C.0
01BA:  NOP
01BB:  NOP
01BC:  BCF    03.5
01BD:  BCF    03.6
01BE:  BTFSC  42.7
01BF:  BSF    0B.7
01C0:  DECFSZ 3E,F
01C1:  GOTO   1C3
01C2:  GOTO   1E2
01C3:  BSF    03.6
01C4:  RLF    0C,W
01C5:  RLF    0E,W
01C6:  ANDLW  7F
01C7:  BCF    03.6
01C8:  MOVWF  3F
01C9:  BSF    03.6
01CA:  MOVF   0D,W
01CB:  BCF    03.6
01CC:  MOVWF  40
01CD:  BSF    03.6
01CE:  MOVF   0F,W
01CF:  BCF    03.6
01D0:  MOVWF  41
01D1:  MOVF   3F,W
01D2:  MOVWF  44
01D3:  CALL   0F4
01D4:  MOVF   40,W
01D5:  BSF    03.6
01D6:  MOVWF  0D
01D7:  BCF    03.6
01D8:  MOVF   41,W
01D9:  BSF    03.6
01DA:  MOVWF  0F
01DB:  INCF   0D,F
01DC:  BTFSC  03.2
01DD:  INCF   0F,F
01DE:  BCF    03.0
01DF:  BCF    03.6
01E0:  DECFSZ 3E,F
01E1:  GOTO   18C
01E2:  RETURN
....................  
.................... #list 
....................  
....................  
.................... //--> FUSES 
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... //--> USEs 
.................... #use delay(clock=4M) 
*
003D:  MOVLW  45
003E:  MOVWF  04
003F:  BCF    03.7
0040:  MOVF   00,W
0041:  BTFSC  03.2
0042:  GOTO   051
0043:  MOVLW  01
0044:  MOVWF  78
0045:  CLRF   77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  DECFSZ 78,F
0049:  GOTO   045
004A:  MOVLW  4A
004B:  MOVWF  77
004C:  DECFSZ 77,F
004D:  GOTO   04C
004E:  GOTO   04F
004F:  DECFSZ 00,F
0050:  GOTO   043
0051:  RETURN
....................  
....................  
.................... //--> INCLUDES 
.................... #include <lcd.c>    
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
006A:  MOVLW  0F
006B:  BSF    03.5
006C:  ANDWF  08,W
006D:  IORLW  F0
006E:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
006F:  BCF    03.5
0070:  BSF    08.2
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_enable(1); 
0072:  BSF    08.0
....................    delay_cycles(1); 
0073:  NOP
....................    high = lcd_read_nibble(); 
0074:  CALL   05E
0075:  MOVF   78,W
0076:  MOVWF  4C
....................        
....................    lcd_output_enable(0); 
0077:  BCF    08.0
....................    delay_cycles(1); 
0078:  NOP
....................    lcd_output_enable(1); 
0079:  BSF    08.0
....................    delay_us(1); 
007A:  NOP
....................    low = lcd_read_nibble(); 
007B:  CALL   05E
007C:  MOVF   78,W
007D:  MOVWF  4B
....................        
....................    lcd_output_enable(0); 
007E:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  08,W
0082:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0083:  BCF    03.5
0084:  SWAPF  4C,W
0085:  MOVWF  77
0086:  MOVLW  F0
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  4B,W
008A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
005E:  MOVF   08,W
005F:  MOVWF  77
0060:  SWAPF  08,W
0061:  ANDLW  0F
0062:  MOVWF  78
....................   #endif 
0063:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0052:  SWAPF  4C,W
0053:  ANDLW  F0
0054:  MOVWF  77
0055:  MOVLW  0F
0056:  ANDWF  08,W
0057:  IORWF  77,W
0058:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0059:  NOP
....................    lcd_output_enable(1); 
005A:  BSF    08.0
....................    delay_us(2); 
005B:  GOTO   05C
....................    lcd_output_enable(0); 
005C:  BCF    08.0
005D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0064:  BSF    03.5
0065:  BCF    08.0
....................    lcd_rs_tris(); 
0066:  BCF    08.1
....................    lcd_rw_tris(); 
0067:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0068:  BCF    03.5
0069:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
008B:  MOVF   78,W
008C:  MOVWF  4B
008D:  BTFSC  4B.7
008E:  GOTO   06A
....................    lcd_output_rs(address); 
008F:  BTFSS  49.0
0090:  BCF    08.1
0091:  BTFSC  49.0
0092:  BSF    08.1
....................    delay_cycles(1); 
0093:  NOP
....................    lcd_output_rw(0); 
0094:  BCF    08.2
....................    delay_cycles(1); 
0095:  NOP
....................    lcd_output_enable(0); 
0096:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0097:  SWAPF  4A,W
0098:  MOVWF  4B
0099:  MOVLW  0F
009A:  ANDWF  4B,F
009B:  MOVF   4B,W
009C:  MOVWF  4C
009D:  CALL   052
....................    lcd_send_nibble(n & 0xf); 
009E:  MOVF   4A,W
009F:  ANDLW  0F
00A0:  MOVWF  4B
00A1:  MOVWF  4C
00A2:  CALL   052
00A3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00A4:  MOVLW  28
00A5:  MOVWF  3F
00A6:  MOVLW  0C
00A7:  MOVWF  40
00A8:  MOVLW  01
00A9:  MOVWF  41
00AA:  MOVLW  06
00AB:  MOVWF  42
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00AC:  BCF    08.0
....................    lcd_output_rs(0); 
00AD:  BCF    08.1
....................    lcd_output_rw(0); 
00AE:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00AF:  MOVLW  0F
00B0:  BSF    03.5
00B1:  ANDWF  08,W
00B2:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00B3:  BCF    08.0
....................    lcd_rs_tris(); 
00B4:  BCF    08.1
....................    lcd_rw_tris(); 
00B5:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00B6:  MOVLW  0F
00B7:  BCF    03.5
00B8:  MOVWF  45
00B9:  CALL   03D
....................    for(i=1;i<=3;++i) 
00BA:  MOVLW  01
00BB:  MOVWF  3E
00BC:  MOVF   3E,W
00BD:  SUBLW  03
00BE:  BTFSS  03.0
00BF:  GOTO   0C8
....................    { 
....................        lcd_send_nibble(3); 
00C0:  MOVLW  03
00C1:  MOVWF  4C
00C2:  CALL   052
....................        delay_ms(5); 
00C3:  MOVLW  05
00C4:  MOVWF  45
00C5:  CALL   03D
00C6:  INCF   3E,F
00C7:  GOTO   0BC
....................    } 
....................     
....................    lcd_send_nibble(2); 
00C8:  MOVLW  02
00C9:  MOVWF  4C
00CA:  CALL   052
....................    delay_ms(5); 
00CB:  MOVLW  05
00CC:  MOVWF  45
00CD:  CALL   03D
....................    for(i=0;i<=3;++i) 
00CE:  CLRF   3E
00CF:  MOVF   3E,W
00D0:  SUBLW  03
00D1:  BTFSS  03.0
00D2:  GOTO   0DF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D3:  MOVLW  3F
00D4:  ADDWF  3E,W
00D5:  MOVWF  04
00D6:  BCF    03.7
00D7:  MOVF   00,W
00D8:  MOVWF  43
00D9:  CLRF   49
00DA:  MOVF   43,W
00DB:  MOVWF  4A
00DC:  CALL   064
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DD:  INCF   3E,F
00DE:  GOTO   0CF
00DF:  BCF    0A.3
00E0:  BCF    0A.4
00E1:  GOTO   326 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00E2:  DECFSZ 46,W
00E3:  GOTO   0E5
00E4:  GOTO   0E8
....................       address=LCD_LINE_TWO; 
00E5:  MOVLW  40
00E6:  MOVWF  47
00E7:  GOTO   0E9
....................    else 
....................       address=0; 
00E8:  CLRF   47
....................       
....................    address+=x-1; 
00E9:  MOVLW  01
00EA:  SUBWF  45,W
00EB:  ADDWF  47,F
....................    lcd_send_byte(0,0x80|address); 
00EC:  MOVF   47,W
00ED:  IORLW  80
00EE:  MOVWF  48
00EF:  CLRF   49
00F0:  MOVF   48,W
00F1:  MOVWF  4A
00F2:  CALL   064
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00F3:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00F4:  MOVF   44,W
00F5:  XORLW  07
00F6:  BTFSC  03.2
00F7:  GOTO   102
00F8:  XORLW  0B
00F9:  BTFSC  03.2
00FA:  GOTO   107
00FB:  XORLW  06
00FC:  BTFSC  03.2
00FD:  GOTO   10F
00FE:  XORLW  02
00FF:  BTFSC  03.2
0100:  GOTO   115
0101:  GOTO   11A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0102:  MOVLW  01
0103:  MOVWF  45
0104:  MOVWF  46
0105:  CALL   0E2
0106:  GOTO   11F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0107:  CLRF   49
0108:  MOVLW  01
0109:  MOVWF  4A
010A:  CALL   064
....................                      delay_ms(2); 
010B:  MOVLW  02
010C:  MOVWF  45
010D:  CALL   03D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
010E:  GOTO   11F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
010F:  MOVLW  01
0110:  MOVWF  45
0111:  MOVLW  02
0112:  MOVWF  46
0113:  CALL   0E2
0114:  GOTO   11F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0115:  CLRF   49
0116:  MOVLW  10
0117:  MOVWF  4A
0118:  CALL   064
0119:  GOTO   11F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
011A:  MOVLW  01
011B:  MOVWF  49
011C:  MOVF   44,W
011D:  MOVWF  4A
011E:  CALL   064
....................      #endif 
....................    } 
011F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Will be Implemented 
.................... //DEFINATIONS 
.................... //They will share the EEPROM memory evenly 
.................... #define eeprom_Client0_systemStartAddress 0 
.................... #define eeprom_Client1_systemStartAddress 130 
....................  
....................  
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;       //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber=0;                            // Will be used as given on the right --> MikroClient[ClientNumber]   
....................  
....................  
.................... //Will be implemented// 
....................  
.................... //------------ VAR --> INTERNAL EEPROM <-- VAR ------------// 
.................... //EEPROM variables to store the values selected by the user 
.................... // Variables for storing "written" values 
.................... unsigned int8 eeprom_foaming_written_cost     = 0; 
.................... unsigned int8 eeprom_washing_written_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_written_cost = 0; 
.................... unsigned int8 eeprom_polishing_written_cost   = 0; 
....................  
.................... // Variables for storing "read" values 
.................... unsigned int8 eeprom_foaming_read_cost     = 0; 
.................... unsigned int8 eeprom_washing_read_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_read_cost = 0; 
.................... unsigned int8 eeprom_polishing_read_cost   = 0; 
....................  
.................... //Keeps track of the last written address in EEPROM for each customer 
.................... unsigned int8 Client0_last_address=0; //For Selçuk Bey's account 
.................... unsigned int8 Client1_last_address=0; //For Emre Bey's account 
....................  
.................... //hangi iþlem üzerinde duruyorsak onun numarasý iþlem-1, iþlem-2 ==> 1 ve 2 bunlarýn numarasý oluyor,  
.................... unsigned int8 IndexOfReadMemory=2;  //en az 1 olabilir 
....................  
.................... //Will be implemented into // 
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void displayOperationStatus_WriteVariables_to_EEPROM(void); 
.................... void display_SelectedOpsVal_EEPROM_OnLCD(void); 
....................  
.................... /* ======== EEPROM WRITE/READ FUNCTIONS PROTOTYPES  ======== */ 
.................... void loadCostValuesToEEPROMVariables(void); 
.................... void write_EEPROMVariables_to_EEPROMregs(void); 
.................... void Read_EEPROMVariables_from_EEPROMregs(void); 
....................  
....................  
.................... void main(void)  
*
0302:  MOVF   03,W
0303:  ANDLW  1F
0304:  MOVWF  03
0305:  CLRF   30
0306:  CLRF   31
0307:  CLRF   32
0308:  CLRF   33
0309:  CLRF   34
030A:  CLRF   35
030B:  CLRF   36
030C:  CLRF   37
030D:  CLRF   38
030E:  CLRF   39
030F:  CLRF   3A
0310:  MOVLW  02
0311:  MOVWF  3B
0312:  CLRF   3D
0313:  CLRF   3C
0314:  BSF    03.5
0315:  BSF    03.6
0316:  MOVF   09,W
0317:  ANDLW  C0
0318:  MOVWF  09
0319:  BCF    03.6
031A:  BCF    1F.4
031B:  BCF    1F.5
031C:  MOVLW  00
031D:  BSF    03.6
031E:  MOVWF  08
031F:  BCF    03.5
0320:  CLRF   07
0321:  CLRF   08
0322:  CLRF   09
0323:  BCF    03.7
.................... { 
....................  
....................       lcd_init(); // LCD ekranýmýzý baþlatacak 
0324:  BCF    03.6
0325:  GOTO   0A4
....................  
....................       //Baslangýç deðerlerini atalým 
....................       MikroClient[ClientNumber].time_Foaming        = 20;      //4tl(20)   |    12tl(60) 
0326:  RLF    30,W
0327:  MOVWF  77
0328:  RLF    77,F
0329:  RLF    77,F
032A:  MOVLW  F8
032B:  ANDWF  77,F
032C:  MOVF   77,W
032D:  ADDLW  20
032E:  MOVWF  04
032F:  BCF    03.7
0330:  INCF   04,F
0331:  CLRF   00
0332:  DECF   04,F
0333:  MOVLW  14
0334:  MOVWF  00
....................       MikroClient[ClientNumber].time_Washing        = 40;      //8tl(40)   |    14tl(70) 
0335:  RLF    30,W
0336:  MOVWF  77
0337:  RLF    77,F
0338:  RLF    77,F
0339:  MOVLW  F8
033A:  ANDWF  77,F
033B:  MOVF   77,W
033C:  ADDLW  02
033D:  ADDLW  20
033E:  MOVWF  04
033F:  BCF    03.7
0340:  INCF   04,F
0341:  CLRF   00
0342:  DECF   04,F
0343:  MOVLW  28
0344:  MOVWF  00
....................       MikroClient[ClientNumber].time_Ventilation    = 60;      //12tl(60)  |    16tl(80) 
0345:  RLF    30,W
0346:  MOVWF  77
0347:  RLF    77,F
0348:  RLF    77,F
0349:  MOVLW  F8
034A:  ANDWF  77,F
034B:  MOVF   77,W
034C:  ADDLW  04
034D:  ADDLW  20
034E:  MOVWF  04
034F:  BCF    03.7
0350:  INCF   04,F
0351:  CLRF   00
0352:  DECF   04,F
0353:  MOVLW  3C
0354:  MOVWF  00
....................       MikroClient[ClientNumber].mililitre_Polishing = 2;       //30tl(2)   |    15tl(1) 
0355:  RLF    30,W
0356:  MOVWF  77
0357:  RLF    77,F
0358:  RLF    77,F
0359:  MOVLW  F8
035A:  ANDWF  77,F
035B:  MOVF   77,W
035C:  ADDLW  06
035D:  ADDLW  20
035E:  MOVWF  04
035F:  BCF    03.7
0360:  INCF   04,F
0361:  CLRF   00
0362:  DECF   04,F
0363:  MOVLW  02
0364:  MOVWF  00
....................           
....................       //Son durumu kullanýcýya göster ve kaydedilen deðerleri eeproma yaz 
....................       //displayOperationStatus_WriteVariables_to_EEPROM(); 
....................       
....................        
....................       //okunan eeprom deðerlerini lcd de göster 
....................       display_SelectedOpsVal_EEPROM_OnLCD(); 
0365:  GOTO   1E3
....................        
....................        
....................  while(1) 
....................  { 
0366:  GOTO   366
....................       
....................  } 
.................... } 
....................  
0367:  SLEEP
.................... //Will be implemented// 
.................... void displayOperationStatus_WriteVariables_to_EEPROM(){ 
....................  
....................       lcd_gotoxy(2,1); 
....................       printf(lcd_putc, "Operasyon Sonu");    
....................       delay_ms(2000); 
....................       printf(lcd_putc, "\f"); 
....................       lcd_gotoxy(3,1); 
....................       printf(lcd_putc, "Islemleriniz");   
....................       lcd_gotoxy(3,2); 
....................       printf(lcd_putc, "Kaydediliyor"); 
....................        
....................       loadCostValuesToEEPROMVariables(); 
....................           
....................       delay_ms(1000); 
....................        
....................       printf(lcd_putc, "\f"); 
....................       lcd_gotoxy(5,1); 
....................       printf(lcd_putc, "Kayitlar");   
....................       lcd_gotoxy(4,2); 
....................       printf(lcd_putc, "Tamamlandi"); 
....................        
....................       delay_ms(1000); 
....................        
....................       printf(lcd_putc, "\f"); 
....................       lcd_gotoxy(4,1); 
....................       printf(lcd_putc, "Ana Menuye");   
....................       lcd_gotoxy(2,2); 
....................       printf(lcd_putc, "Yonlendiriliyor"); 
....................        
....................       delay_ms(1000); 
....................       printf(lcd_putc, "\f"); 
....................        
.................... } 
....................  
....................  
....................  
.................... //Secilen islemin eeprom kayýtlarýný görüntüle 
.................... void display_SelectedOpsVal_EEPROM_OnLCD(){ 
....................       
....................      Read_EEPROMVariables_from_EEPROMregs(); 
....................       
....................       printf(lcd_putc, "\f"); 
*
028C:  MOVLW  0C
028D:  MOVWF  44
028E:  CALL   0F4
....................        
....................       lcd_gotoxy(1,1); 
028F:  MOVLW  01
0290:  MOVWF  45
0291:  MOVWF  46
0292:  CALL   0E2
....................       printf(lcd_putc, "F: %d TL",eeprom_foaming_read_cost);  
0293:  MOVLW  46
0294:  MOVWF  44
0295:  CALL   0F4
0296:  MOVLW  3A
0297:  MOVWF  44
0298:  CALL   0F4
0299:  MOVLW  20
029A:  MOVWF  44
029B:  CALL   0F4
029C:  MOVF   35,W
029D:  MOVWF  3E
029E:  MOVLW  18
029F:  MOVWF  3F
02A0:  CALL   135
02A1:  MOVLW  20
02A2:  MOVWF  44
02A3:  CALL   0F4
02A4:  MOVLW  54
02A5:  MOVWF  44
02A6:  CALL   0F4
02A7:  MOVLW  4C
02A8:  MOVWF  44
02A9:  CALL   0F4
....................       lcd_gotoxy(8,1); 
02AA:  MOVLW  08
02AB:  MOVWF  45
02AC:  MOVLW  01
02AD:  MOVWF  46
02AE:  CALL   0E2
....................       printf(lcd_putc, " W: %d TL",eeprom_washing_read_cost);  
02AF:  MOVLW  33
02B0:  BSF    03.6
02B1:  MOVWF  0D
02B2:  MOVLW  00
02B3:  MOVWF  0F
02B4:  BCF    03.0
02B5:  MOVLW  04
02B6:  BCF    03.6
02B7:  MOVWF  3E
02B8:  CALL   18C
02B9:  MOVF   36,W
02BA:  MOVWF  3E
02BB:  MOVLW  18
02BC:  MOVWF  3F
02BD:  CALL   135
02BE:  MOVLW  20
02BF:  MOVWF  44
02C0:  CALL   0F4
02C1:  MOVLW  54
02C2:  MOVWF  44
02C3:  CALL   0F4
02C4:  MOVLW  4C
02C5:  MOVWF  44
02C6:  CALL   0F4
....................       lcd_gotoxy(1,2); 
02C7:  MOVLW  01
02C8:  MOVWF  45
02C9:  MOVLW  02
02CA:  MOVWF  46
02CB:  CALL   0E2
....................       printf(lcd_putc, "V: %d TL",eeprom_ventilating_read_cost);  
02CC:  MOVLW  56
02CD:  MOVWF  44
02CE:  CALL   0F4
02CF:  MOVLW  3A
02D0:  MOVWF  44
02D1:  CALL   0F4
02D2:  MOVLW  20
02D3:  MOVWF  44
02D4:  CALL   0F4
02D5:  MOVF   37,W
02D6:  MOVWF  3E
02D7:  MOVLW  18
02D8:  MOVWF  3F
02D9:  CALL   135
02DA:  MOVLW  20
02DB:  MOVWF  44
02DC:  CALL   0F4
02DD:  MOVLW  54
02DE:  MOVWF  44
02DF:  CALL   0F4
02E0:  MOVLW  4C
02E1:  MOVWF  44
02E2:  CALL   0F4
....................       lcd_gotoxy(8,8); 
02E3:  MOVLW  08
02E4:  MOVWF  45
02E5:  MOVWF  46
02E6:  CALL   0E2
....................       printf(lcd_putc, " P: %d TL",eeprom_polishing_read_cost);  
02E7:  MOVLW  38
02E8:  BSF    03.6
02E9:  MOVWF  0D
02EA:  MOVLW  00
02EB:  MOVWF  0F
02EC:  BCF    03.0
02ED:  MOVLW  04
02EE:  BCF    03.6
02EF:  MOVWF  3E
02F0:  CALL   18C
02F1:  MOVF   38,W
02F2:  MOVWF  3E
02F3:  MOVLW  18
02F4:  MOVWF  3F
02F5:  CALL   135
02F6:  MOVLW  20
02F7:  MOVWF  44
02F8:  CALL   0F4
02F9:  MOVLW  54
02FA:  MOVWF  44
02FB:  CALL   0F4
02FC:  MOVLW  4C
02FD:  MOVWF  44
02FE:  CALL   0F4
02FF:  BCF    0A.3
0300:  BCF    0A.4
0301:  GOTO   366 (RETURN)
....................         
.................... } 
....................  
.................... //!//will be implemented 
.................... void Read_EEPROMVariables_from_EEPROMregs(){ 
....................      
....................     // NE ZAMAN NEXT BUTONUNA BASILIR O ZAMAN SEÇÝM YAPILIR 
....................     // IndexOfReadMemory butonun üzerinde bulunduðu yer(next demeden önce) 
....................      
....................         if(ClientNumber == 0) 
*
01E3:  MOVF   30,F
01E4:  BTFSS  03.2
01E5:  GOTO   236
....................         { 
....................                    
....................             eeprom_foaming_read_cost     = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+4) );   
01E6:  MOVLW  01
01E7:  SUBWF  3B,W
01E8:  MOVWF  77
01E9:  RLF    77,F
01EA:  RLF    77,F
01EB:  MOVLW  FC
01EC:  ANDWF  77,F
01ED:  MOVF   77,W
01EE:  ADDLW  04
01EF:  MOVWF  3E
01F0:  MOVF   3E,W
01F1:  BSF    03.6
01F2:  MOVWF  0D
01F3:  BSF    03.5
01F4:  BCF    0C.7
01F5:  BSF    0C.0
01F6:  BCF    03.5
01F7:  MOVF   0C,W
01F8:  BCF    03.6
01F9:  MOVWF  35
....................             eeprom_washing_read_cost     = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+5) ); 
01FA:  MOVLW  01
01FB:  SUBWF  3B,W
01FC:  MOVWF  77
01FD:  RLF    77,F
01FE:  RLF    77,F
01FF:  MOVLW  FC
0200:  ANDWF  77,F
0201:  MOVF   77,W
0202:  ADDLW  05
0203:  MOVWF  3E
0204:  MOVF   3E,W
0205:  BSF    03.6
0206:  MOVWF  0D
0207:  BSF    03.5
0208:  BCF    0C.7
0209:  BSF    0C.0
020A:  BCF    03.5
020B:  MOVF   0C,W
020C:  BCF    03.6
020D:  MOVWF  36
....................             eeprom_ventilating_read_cost = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+6) ); 
020E:  MOVLW  01
020F:  SUBWF  3B,W
0210:  MOVWF  77
0211:  RLF    77,F
0212:  RLF    77,F
0213:  MOVLW  FC
0214:  ANDWF  77,F
0215:  MOVF   77,W
0216:  ADDLW  06
0217:  MOVWF  3E
0218:  MOVF   3E,W
0219:  BSF    03.6
021A:  MOVWF  0D
021B:  BSF    03.5
021C:  BCF    0C.7
021D:  BSF    0C.0
021E:  BCF    03.5
021F:  MOVF   0C,W
0220:  BCF    03.6
0221:  MOVWF  37
....................             eeprom_polishing_read_cost   = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+7) ); 
0222:  MOVLW  01
0223:  SUBWF  3B,W
0224:  MOVWF  77
0225:  RLF    77,F
0226:  RLF    77,F
0227:  MOVLW  FC
0228:  ANDWF  77,F
0229:  MOVF   77,W
022A:  ADDLW  07
022B:  MOVWF  3E
022C:  MOVF   3E,W
022D:  BSF    03.6
022E:  MOVWF  0D
022F:  BSF    03.5
0230:  BCF    0C.7
0231:  BSF    0C.0
0232:  BCF    03.5
0233:  MOVF   0C,W
0234:  BCF    03.6
0235:  MOVWF  38
....................       
....................         } 
....................          
....................         if(ClientNumber == 1){ 
0236:  DECFSZ 30,W
0237:  GOTO   28C
....................          
....................             eeprom_foaming_read_cost     = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+1) );   
0238:  MOVLW  01
0239:  SUBWF  3B,W
023A:  MOVWF  77
023B:  RLF    77,F
023C:  RLF    77,F
023D:  MOVLW  FC
023E:  ANDWF  77,F
023F:  MOVF   77,W
0240:  ADDLW  01
0241:  ADDLW  82
0242:  MOVWF  3E
0243:  MOVF   3E,W
0244:  BSF    03.6
0245:  MOVWF  0D
0246:  BSF    03.5
0247:  BCF    0C.7
0248:  BSF    0C.0
0249:  BCF    03.5
024A:  MOVF   0C,W
024B:  BCF    03.6
024C:  MOVWF  35
....................             eeprom_washing_read_cost     = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+2) ); 
024D:  MOVLW  01
024E:  SUBWF  3B,W
024F:  MOVWF  77
0250:  RLF    77,F
0251:  RLF    77,F
0252:  MOVLW  FC
0253:  ANDWF  77,F
0254:  MOVF   77,W
0255:  ADDLW  02
0256:  ADDLW  82
0257:  MOVWF  3E
0258:  MOVF   3E,W
0259:  BSF    03.6
025A:  MOVWF  0D
025B:  BSF    03.5
025C:  BCF    0C.7
025D:  BSF    0C.0
025E:  BCF    03.5
025F:  MOVF   0C,W
0260:  BCF    03.6
0261:  MOVWF  36
....................             eeprom_ventilating_read_cost = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+3) ); 
0262:  MOVLW  01
0263:  SUBWF  3B,W
0264:  MOVWF  77
0265:  RLF    77,F
0266:  RLF    77,F
0267:  MOVLW  FC
0268:  ANDWF  77,F
0269:  MOVF   77,W
026A:  ADDLW  03
026B:  ADDLW  82
026C:  MOVWF  3E
026D:  MOVF   3E,W
026E:  BSF    03.6
026F:  MOVWF  0D
0270:  BSF    03.5
0271:  BCF    0C.7
0272:  BSF    0C.0
0273:  BCF    03.5
0274:  MOVF   0C,W
0275:  BCF    03.6
0276:  MOVWF  37
....................             eeprom_polishing_read_cost   = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+4) ); 
0277:  MOVLW  01
0278:  SUBWF  3B,W
0279:  MOVWF  77
027A:  RLF    77,F
027B:  RLF    77,F
027C:  MOVLW  FC
027D:  ANDWF  77,F
027E:  MOVF   77,W
027F:  ADDLW  04
0280:  ADDLW  82
0281:  MOVWF  3E
0282:  MOVF   3E,W
0283:  BSF    03.6
0284:  MOVWF  0D
0285:  BSF    03.5
0286:  BCF    0C.7
0287:  BSF    0C.0
0288:  BCF    03.5
0289:  MOVF   0C,W
028A:  BCF    03.6
028B:  MOVWF  38
....................          
....................         } 
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... //will be implemented 
.................... void loadCostValuesToEEPROMVariables(){ 
....................  
....................       //Cost values to be written 
....................       eeprom_foaming_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Foaming)/10)*2); 
....................       eeprom_washing_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Washing)/10)*2); 
....................       eeprom_ventilating_written_cost = (unsigned int8)(((MikroClient[ClientNumber].time_Ventilation)/10)*2); 
....................       eeprom_polishing_written_cost   = (unsigned int8)((MikroClient[ClientNumber].mililitre_Polishing)*15); 
....................       
....................       //Write data to the allocated space for the customer who is using it 
....................       write_EEPROMVariables_to_EEPROMregs(); 
.................... } 
....................  
....................  
.................... //will be implemented 
.................... void write_EEPROMVariables_to_EEPROMregs(){ 
....................  
.................... // Operations will be performed for the relevant customer 
.................... // A new operation will be defined each time the system is activated 
.................... // Example usage: 
.................... // Main Menu -> Registration Process ->NextButton -> Operation 1 -> LCD display view: 
.................... //                                                                [F=32TL    W=12TL] F: foaming     , W: Water 
.................... //                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing 
.................... //                                   ->NextButton -> Operation 2 -> LCD display view: 
.................... //                                                                [F=32TL    W=12TL] F: foaming     , W: Water 
.................... //                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing 
....................  
....................    //Selcuk Bey's ID 
....................    if(ClientNumber == 0){ 
....................        
....................       //Pull the last address to keep going on 
....................       //The last cursor position address will always be written to the zero address, to ensure that new data does not overwrite previously written data 
....................       Client0_last_address = read_eeprom(eeprom_Client0_systemStartAddress); 
....................        
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_foaming_written_cost)     ); Client0_last_address++; //Save foaming cost 
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_washing_written_cost)     ); Client0_last_address++; //Save washing cost 
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_ventilating_written_cost) ); Client0_last_address++; //Save Ventilating cost 
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_polishing_written_cost)   ); Client0_last_address++; //Save Polishing cost 
....................       write_eeprom( (eeprom_Client0_systemStartAddress                           ), ( Client0_last_address)           );                         //Save cursor location in the client0 start address 
....................    } 
....................     
....................    if(ClientNumber == 1){ 
....................        
....................       //Pull the last address to keep going on 
....................       //The last cursor position address will always be written to the zero address, to ensure that new data does not overwrite previously written data 
....................       Client1_last_address = read_eeprom(eeprom_Client1_systemStartAddress); 
....................        
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_foaming_written_cost)     ); Client1_last_address++; //Save foaming cost 
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_washing_written_cost)     ); Client1_last_address++; //Save washing cost 
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_ventilating_written_cost) ); Client1_last_address++; //Save Ventilating cost 
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_polishing_written_cost)   ); Client1_last_address++; //Save Polishing cost 
....................       write_eeprom( (eeprom_Client1_systemStartAddress                           ), ( Client1_last_address)           );                         //Save cursor location in the client0 start address 
....................     
....................    } 
....................     
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
