CCS PCM C Compiler, Version 5.049, 5967               29-Ara-24 20:59

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Proteus\Dahili Eeprom\CCS code\InternalEEPROM.lst

               ROM used:   1326 words (16%)
                           Largest free fragment is 2048
               RAM used:   36 (10%) at main() level
                           50 (14%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4C8
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 4F,38
0005:  DATA 65,39
0006:  DATA E1,39
0007:  DATA F9,37
0008:  DATA 6E,10
0009:  DATA D3,37
000A:  DATA EE,3A
000B:  DATA 00,00
000C:  DATA C9,39
000D:  DATA EC,32
000E:  DATA 6D,36
000F:  DATA 65,39
0010:  DATA 69,37
0011:  DATA 69,3D
0012:  DATA 00,01
0013:  DATA CB,30
0014:  DATA 79,32
0015:  DATA 65,32
0016:  DATA 69,36
0017:  DATA E9,3C
0018:  DATA 6F,39
0019:  DATA 00,01
001A:  DATA CB,30
001B:  DATA F9,34
001C:  DATA 74,36
001D:  DATA 61,39
001E:  DATA 00,01
001F:  DATA D4,30
0020:  DATA ED,30
0021:  DATA 6D,36
0022:  DATA 61,37
0023:  DATA E4,34
0024:  DATA 00,01
0025:  DATA 41,37
0026:  DATA 61,10
0027:  DATA CD,32
0028:  DATA EE,3A
0029:  DATA F9,32
002A:  DATA 00,01
002B:  DATA D9,37
002C:  DATA 6E,36
002D:  DATA 65,37
002E:  DATA E4,34
002F:  DATA F2,34
0030:  DATA EC,34
0031:  DATA F9,37
0032:  DATA 72,00
*
0116:  MOVF   0B,W
0117:  MOVWF  3D
0118:  BCF    0B.7
0119:  BSF    03.5
011A:  BSF    03.6
011B:  BSF    0C.7
011C:  BSF    0C.0
011D:  NOP
011E:  NOP
011F:  BCF    03.5
0120:  BCF    03.6
0121:  BTFSC  3D.7
0122:  BSF    0B.7
0123:  BSF    03.6
0124:  MOVF   0C,W
0125:  ANDLW  7F
0126:  BTFSC  03.2
0127:  GOTO   16A
0128:  BCF    03.6
0129:  MOVWF  3D
012A:  BSF    03.6
012B:  MOVF   0D,W
012C:  BCF    03.6
012D:  MOVWF  3E
012E:  BSF    03.6
012F:  MOVF   0F,W
0130:  BCF    03.6
0131:  MOVWF  3F
0132:  MOVF   3D,W
0133:  MOVWF  43
0134:  CALL   0EA
0135:  MOVF   3E,W
0136:  BSF    03.6
0137:  MOVWF  0D
0138:  BCF    03.6
0139:  MOVF   3F,W
013A:  BSF    03.6
013B:  MOVWF  0F
013C:  BCF    03.6
013D:  MOVF   0B,W
013E:  MOVWF  40
013F:  BCF    0B.7
0140:  BSF    03.5
0141:  BSF    03.6
0142:  BSF    0C.7
0143:  BSF    0C.0
0144:  NOP
0145:  NOP
0146:  BCF    03.5
0147:  BCF    03.6
0148:  BTFSC  40.7
0149:  BSF    0B.7
014A:  BSF    03.6
014B:  RLF    0C,W
014C:  RLF    0E,W
014D:  ANDLW  7F
014E:  BTFSC  03.2
014F:  GOTO   16A
0150:  BCF    03.6
0151:  MOVWF  3D
0152:  BSF    03.6
0153:  MOVF   0D,W
0154:  BCF    03.6
0155:  MOVWF  3E
0156:  BSF    03.6
0157:  MOVF   0F,W
0158:  BCF    03.6
0159:  MOVWF  3F
015A:  MOVF   3D,W
015B:  MOVWF  43
015C:  CALL   0EA
015D:  MOVF   3E,W
015E:  BSF    03.6
015F:  MOVWF  0D
0160:  BCF    03.6
0161:  MOVF   3F,W
0162:  BSF    03.6
0163:  MOVWF  0F
0164:  INCF   0D,F
0165:  BTFSC  03.2
0166:  INCF   0F,F
0167:  BCF    03.6
0168:  GOTO   116
0169:  BSF    03.6
016A:  BCF    03.6
016B:  RETURN
016C:  CLRF   78
016D:  CLRF   79
016E:  CLRF   77
016F:  CLRF   7A
0170:  MOVF   42,W
0171:  BTFSS  03.2
0172:  GOTO   176
0173:  MOVF   41,W
0174:  BTFSC  03.2
0175:  GOTO   190
0176:  MOVLW  10
0177:  MOVWF  43
0178:  BCF    03.0
0179:  RLF    3F,F
017A:  RLF    40,F
017B:  RLF    77,F
017C:  RLF    7A,F
017D:  MOVF   42,W
017E:  SUBWF  7A,W
017F:  BTFSS  03.2
0180:  GOTO   183
0181:  MOVF   41,W
0182:  SUBWF  77,W
0183:  BTFSS  03.0
0184:  GOTO   18C
0185:  MOVF   41,W
0186:  SUBWF  77,F
0187:  BTFSS  03.0
0188:  DECF   7A,F
0189:  MOVF   42,W
018A:  SUBWF  7A,F
018B:  BSF    03.0
018C:  RLF    78,F
018D:  RLF    79,F
018E:  DECFSZ 43,F
018F:  GOTO   178
0190:  RETURN
*
020E:  MOVLW  10
020F:  MOVWF  43
0210:  CLRF   77
0211:  CLRF   7A
0212:  RRF    40,F
0213:  RRF    3F,F
0214:  BTFSS  03.0
0215:  GOTO   21C
0216:  MOVF   41,W
0217:  ADDWF  77,F
0218:  BTFSC  03.0
0219:  INCF   7A,F
021A:  MOVF   42,W
021B:  ADDWF  7A,F
021C:  RRF    7A,F
021D:  RRF    77,F
021E:  RRF    79,F
021F:  RRF    78,F
0220:  DECFSZ 43,F
0221:  GOTO   212
*
03E8:  MOVF   44,W
03E9:  CLRF   78
03EA:  SUBWF  43,W
03EB:  BTFSC  03.0
03EC:  GOTO   3F0
03ED:  MOVF   43,W
03EE:  MOVWF  77
03EF:  GOTO   3FC
03F0:  CLRF   77
03F1:  MOVLW  08
03F2:  MOVWF  45
03F3:  RLF    43,F
03F4:  RLF    77,F
03F5:  MOVF   44,W
03F6:  SUBWF  77,W
03F7:  BTFSC  03.0
03F8:  MOVWF  77
03F9:  RLF    78,F
03FA:  DECFSZ 45,F
03FB:  GOTO   3F3
03FC:  RETURN
03FD:  MOVLW  20
03FE:  BTFSS  3E.4
03FF:  MOVLW  30
0400:  MOVWF  3F
0401:  MOVF   3D,W
0402:  MOVWF  77
0403:  BTFSS  3D.7
0404:  GOTO   40D
0405:  COMF   77,F
0406:  INCF   77,F
0407:  MOVF   77,W
0408:  MOVWF  3D
0409:  MOVLW  2D
040A:  MOVWF  3F
040B:  BSF    3E.7
040C:  BSF    3E.0
040D:  MOVF   3D,W
040E:  MOVWF  43
040F:  MOVLW  64
0410:  MOVWF  44
0411:  CALL   3E8
0412:  MOVF   77,W
0413:  MOVWF  3D
0414:  MOVLW  30
0415:  ADDWF  78,W
0416:  MOVWF  40
0417:  MOVF   3D,W
0418:  MOVWF  43
0419:  MOVLW  0A
041A:  MOVWF  44
041B:  CALL   3E8
041C:  MOVLW  30
041D:  ADDWF  77,W
041E:  MOVWF  42
041F:  MOVLW  30
0420:  ADDWF  78,W
0421:  MOVWF  41
0422:  MOVF   3F,W
0423:  MOVWF  77
0424:  MOVLW  30
0425:  SUBWF  40,W
0426:  BTFSC  03.2
0427:  GOTO   42C
0428:  BSF    3E.1
0429:  BTFSC  3E.7
042A:  BSF    3E.2
042B:  GOTO   440
042C:  MOVF   3F,W
042D:  MOVWF  40
042E:  MOVLW  20
042F:  MOVWF  3F
0430:  MOVLW  30
0431:  SUBWF  41,W
0432:  BTFSC  03.2
0433:  GOTO   438
0434:  BSF    3E.0
0435:  BTFSC  3E.7
0436:  BSF    3E.1
0437:  GOTO   440
0438:  BTFSS  03.2
0439:  BSF    3E.0
043A:  BTFSS  03.2
043B:  GOTO   440
043C:  MOVF   40,W
043D:  MOVWF  41
043E:  MOVLW  20
043F:  MOVWF  40
0440:  BTFSC  3E.2
0441:  GOTO   447
0442:  BTFSC  3E.1
0443:  GOTO   44A
0444:  BTFSC  3E.0
0445:  GOTO   44D
0446:  GOTO   450
0447:  MOVF   3F,W
0448:  MOVWF  43
0449:  CALL   0EA
044A:  MOVF   40,W
044B:  MOVWF  43
044C:  CALL   0EA
044D:  MOVF   41,W
044E:  MOVWF  43
044F:  CALL   0EA
0450:  MOVF   42,W
0451:  MOVWF  43
0452:  CALL   0EA
0453:  RETURN
....................  
.................... #list 
....................  
....................  
.................... //--> FUSES 
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... //--> USEs 
.................... #use delay(clock=4M) 
*
0033:  MOVLW  44
0034:  MOVWF  04
0035:  BCF    03.7
0036:  MOVF   00,W
0037:  BTFSC  03.2
0038:  GOTO   047
0039:  MOVLW  01
003A:  MOVWF  78
003B:  CLRF   77
003C:  DECFSZ 77,F
003D:  GOTO   03C
003E:  DECFSZ 78,F
003F:  GOTO   03B
0040:  MOVLW  4A
0041:  MOVWF  77
0042:  DECFSZ 77,F
0043:  GOTO   042
0044:  GOTO   045
0045:  DECFSZ 00,F
0046:  GOTO   039
0047:  RETURN
....................  
....................  
.................... //--> INCLUDES 
.................... #include <lcd.c>    
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0060:  MOVLW  0F
0061:  BSF    03.5
0062:  ANDWF  08,W
0063:  IORLW  F0
0064:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0065:  BCF    03.5
0066:  BSF    08.2
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_enable(1); 
0068:  BSF    08.0
....................    delay_cycles(1); 
0069:  NOP
....................    high = lcd_read_nibble(); 
006A:  CALL   054
006B:  MOVF   78,W
006C:  MOVWF  4B
....................        
....................    lcd_output_enable(0); 
006D:  BCF    08.0
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_enable(1); 
006F:  BSF    08.0
....................    delay_us(1); 
0070:  NOP
....................    low = lcd_read_nibble(); 
0071:  CALL   054
0072:  MOVF   78,W
0073:  MOVWF  4A
....................        
....................    lcd_output_enable(0); 
0074:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0075:  MOVLW  0F
0076:  BSF    03.5
0077:  ANDWF  08,W
0078:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0079:  BCF    03.5
007A:  SWAPF  4B,W
007B:  MOVWF  77
007C:  MOVLW  F0
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  IORWF  4A,W
0080:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0054:  MOVF   08,W
0055:  MOVWF  77
0056:  SWAPF  08,W
0057:  ANDLW  0F
0058:  MOVWF  78
....................   #endif 
0059:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0048:  SWAPF  4B,W
0049:  ANDLW  F0
004A:  MOVWF  77
004B:  MOVLW  0F
004C:  ANDWF  08,W
004D:  IORWF  77,W
004E:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    08.0
....................    delay_us(2); 
0051:  GOTO   052
....................    lcd_output_enable(0); 
0052:  BCF    08.0
0053:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
005A:  BSF    03.5
005B:  BCF    08.0
....................    lcd_rs_tris(); 
005C:  BCF    08.1
....................    lcd_rw_tris(); 
005D:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
005E:  BCF    03.5
005F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0081:  MOVF   78,W
0082:  MOVWF  4A
0083:  BTFSC  4A.7
0084:  GOTO   060
....................    lcd_output_rs(address); 
0085:  BTFSS  48.0
0086:  BCF    08.1
0087:  BTFSC  48.0
0088:  BSF    08.1
....................    delay_cycles(1); 
0089:  NOP
....................    lcd_output_rw(0); 
008A:  BCF    08.2
....................    delay_cycles(1); 
008B:  NOP
....................    lcd_output_enable(0); 
008C:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
008D:  SWAPF  49,W
008E:  MOVWF  4A
008F:  MOVLW  0F
0090:  ANDWF  4A,F
0091:  MOVF   4A,W
0092:  MOVWF  4B
0093:  CALL   048
....................    lcd_send_nibble(n & 0xf); 
0094:  MOVF   49,W
0095:  ANDLW  0F
0096:  MOVWF  4A
0097:  MOVWF  4B
0098:  CALL   048
0099:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
009A:  MOVLW  28
009B:  MOVWF  3E
009C:  MOVLW  0C
009D:  MOVWF  3F
009E:  MOVLW  01
009F:  MOVWF  40
00A0:  MOVLW  06
00A1:  MOVWF  41
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00A2:  BCF    08.0
....................    lcd_output_rs(0); 
00A3:  BCF    08.1
....................    lcd_output_rw(0); 
00A4:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A5:  MOVLW  0F
00A6:  BSF    03.5
00A7:  ANDWF  08,W
00A8:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00A9:  BCF    08.0
....................    lcd_rs_tris(); 
00AA:  BCF    08.1
....................    lcd_rw_tris(); 
00AB:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00AC:  MOVLW  0F
00AD:  BCF    03.5
00AE:  MOVWF  44
00AF:  CALL   033
....................    for(i=1;i<=3;++i) 
00B0:  MOVLW  01
00B1:  MOVWF  3D
00B2:  MOVF   3D,W
00B3:  SUBLW  03
00B4:  BTFSS  03.0
00B5:  GOTO   0BE
....................    { 
....................        lcd_send_nibble(3); 
00B6:  MOVLW  03
00B7:  MOVWF  4B
00B8:  CALL   048
....................        delay_ms(5); 
00B9:  MOVLW  05
00BA:  MOVWF  44
00BB:  CALL   033
00BC:  INCF   3D,F
00BD:  GOTO   0B2
....................    } 
....................     
....................    lcd_send_nibble(2); 
00BE:  MOVLW  02
00BF:  MOVWF  4B
00C0:  CALL   048
....................    delay_ms(5); 
00C1:  MOVLW  05
00C2:  MOVWF  44
00C3:  CALL   033
....................    for(i=0;i<=3;++i) 
00C4:  CLRF   3D
00C5:  MOVF   3D,W
00C6:  SUBLW  03
00C7:  BTFSS  03.0
00C8:  GOTO   0D5
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C9:  MOVLW  3E
00CA:  ADDWF  3D,W
00CB:  MOVWF  04
00CC:  BCF    03.7
00CD:  MOVF   00,W
00CE:  MOVWF  42
00CF:  CLRF   48
00D0:  MOVF   42,W
00D1:  MOVWF  49
00D2:  CALL   05A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D3:  INCF   3D,F
00D4:  GOTO   0C5
00D5:  BCF    0A.3
00D6:  BCF    0A.4
00D7:  GOTO   4E9 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00D8:  DECFSZ 45,W
00D9:  GOTO   0DB
00DA:  GOTO   0DE
....................       address=LCD_LINE_TWO; 
00DB:  MOVLW  40
00DC:  MOVWF  46
00DD:  GOTO   0DF
....................    else 
....................       address=0; 
00DE:  CLRF   46
....................       
....................    address+=x-1; 
00DF:  MOVLW  01
00E0:  SUBWF  44,W
00E1:  ADDWF  46,F
....................    lcd_send_byte(0,0x80|address); 
00E2:  MOVF   46,W
00E3:  IORLW  80
00E4:  MOVWF  47
00E5:  CLRF   48
00E6:  MOVF   47,W
00E7:  MOVWF  49
00E8:  CALL   05A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E9:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00EA:  MOVF   43,W
00EB:  XORLW  07
00EC:  BTFSC  03.2
00ED:  GOTO   0F8
00EE:  XORLW  0B
00EF:  BTFSC  03.2
00F0:  GOTO   0FD
00F1:  XORLW  06
00F2:  BTFSC  03.2
00F3:  GOTO   105
00F4:  XORLW  02
00F5:  BTFSC  03.2
00F6:  GOTO   10B
00F7:  GOTO   110
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F8:  MOVLW  01
00F9:  MOVWF  44
00FA:  MOVWF  45
00FB:  CALL   0D8
00FC:  GOTO   115
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00FD:  CLRF   48
00FE:  MOVLW  01
00FF:  MOVWF  49
0100:  CALL   05A
....................                      delay_ms(2); 
0101:  MOVLW  02
0102:  MOVWF  44
0103:  CALL   033
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0104:  GOTO   115
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0105:  MOVLW  01
0106:  MOVWF  44
0107:  MOVLW  02
0108:  MOVWF  45
0109:  CALL   0D8
010A:  GOTO   115
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
010B:  CLRF   48
010C:  MOVLW  10
010D:  MOVWF  49
010E:  CALL   05A
010F:  GOTO   115
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0110:  MOVLW  01
0111:  MOVWF  48
0112:  MOVF   43,W
0113:  MOVWF  49
0114:  CALL   05A
....................      #endif 
....................    } 
0115:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Will be Implemented 
.................... //DEFINATIONS 
.................... //They will share the EEPROM memory evenly 
.................... #define eeprom_Client0_systemStartAddress 0 
.................... #define eeprom_Client1_systemStartAddress 130 
....................  
....................  
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;       //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;                            // Will be used as given on the right --> MikroClient[ClientNumber]   
....................  
....................  
.................... //Will be implemented// 
....................  
.................... //------------ VAR --> INTERNAL EEPROM <-- VAR ------------// 
.................... //EEPROM variables to store the values selected by the user 
.................... // Variables for storing "written" values 
.................... unsigned int8 eeprom_foaming_written_cost     = 0; 
.................... unsigned int8 eeprom_washing_written_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_written_cost = 0; 
.................... unsigned int8 eeprom_polishing_written_cost   = 0; 
....................  
.................... // Variables for storing "read" values 
.................... unsigned int8 eeprom_foaming_read_cost     = 0; 
.................... unsigned int8 eeprom_washing_read_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_read_cost = 0; 
.................... unsigned int8 eeprom_polishing_read_cost   = 0; 
....................  
....................  
....................  
....................  
.................... //Keeps track of the last written address in EEPROM for each customer 
.................... unsigned int8 Client0_last_address=0; //For Selçuk Bey's account 
.................... unsigned int8 Client1_last_address=0; //For Emre Bey's account 
....................  
.................... //Will be implemented into // 
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void display_Status_EEPROM_OnLCD(void); 
.................... void display_SelectedOpsVal_EEPROM_OnLCD(void); 
....................  
.................... /* ======== EEPROM WRITE/READ FUNCTIONS PROTOTYPES  ======== */ 
.................... void loadCostValuesToEEPROMVariables(void); 
.................... void write_EEPROMVariables_to_EEPROMregs(void); 
.................... void Read_EEPROMVariables_from_EEPROMregs(void); 
....................  
....................  
.................... void main(void)  
*
04C8:  MOVF   03,W
04C9:  ANDLW  1F
04CA:  MOVWF  03
04CB:  CLRF   31
04CC:  CLRF   32
04CD:  CLRF   33
04CE:  CLRF   34
04CF:  CLRF   35
04D0:  CLRF   36
04D1:  CLRF   37
04D2:  CLRF   38
04D3:  CLRF   39
04D4:  CLRF   3A
04D5:  CLRF   3C
04D6:  CLRF   3B
04D7:  BSF    03.5
04D8:  BSF    03.6
04D9:  MOVF   09,W
04DA:  ANDLW  C0
04DB:  MOVWF  09
04DC:  BCF    03.6
04DD:  BCF    1F.4
04DE:  BCF    1F.5
04DF:  MOVLW  00
04E0:  BSF    03.6
04E1:  MOVWF  08
04E2:  BCF    03.5
04E3:  CLRF   07
04E4:  CLRF   08
04E5:  CLRF   09
04E6:  BCF    03.7
.................... { 
....................  
....................       lcd_init(); // LCD ekranýmýzý baþlatacak 
04E7:  BCF    03.6
04E8:  GOTO   09A
....................  
....................       //Baslangýç deðerlerini atalým 
....................       MikroClient[ClientNumber].time_Foaming        = 20; 
04E9:  RLF    30,W
04EA:  MOVWF  77
04EB:  RLF    77,F
04EC:  RLF    77,F
04ED:  MOVLW  F8
04EE:  ANDWF  77,F
04EF:  MOVF   77,W
04F0:  ADDLW  20
04F1:  MOVWF  04
04F2:  BCF    03.7
04F3:  INCF   04,F
04F4:  CLRF   00
04F5:  DECF   04,F
04F6:  MOVLW  14
04F7:  MOVWF  00
....................       MikroClient[ClientNumber].time_Washing        = 40; 
04F8:  RLF    30,W
04F9:  MOVWF  77
04FA:  RLF    77,F
04FB:  RLF    77,F
04FC:  MOVLW  F8
04FD:  ANDWF  77,F
04FE:  MOVF   77,W
04FF:  ADDLW  02
0500:  ADDLW  20
0501:  MOVWF  04
0502:  BCF    03.7
0503:  INCF   04,F
0504:  CLRF   00
0505:  DECF   04,F
0506:  MOVLW  28
0507:  MOVWF  00
....................       MikroClient[ClientNumber].time_Ventilation    = 60; 
0508:  RLF    30,W
0509:  MOVWF  77
050A:  RLF    77,F
050B:  RLF    77,F
050C:  MOVLW  F8
050D:  ANDWF  77,F
050E:  MOVF   77,W
050F:  ADDLW  04
0510:  ADDLW  20
0511:  MOVWF  04
0512:  BCF    03.7
0513:  INCF   04,F
0514:  CLRF   00
0515:  DECF   04,F
0516:  MOVLW  3C
0517:  MOVWF  00
....................       MikroClient[ClientNumber].mililitre_Polishing = 2; 
0518:  RLF    30,W
0519:  MOVWF  77
051A:  RLF    77,F
051B:  RLF    77,F
051C:  MOVLW  F8
051D:  ANDWF  77,F
051E:  MOVF   77,W
051F:  ADDLW  06
0520:  ADDLW  20
0521:  MOVWF  04
0522:  BCF    03.7
0523:  INCF   04,F
0524:  CLRF   00
0525:  DECF   04,F
0526:  MOVLW  02
0527:  MOVWF  00
....................           
....................       //Retrieve records and inform the customer 
....................       display_Status_EEPROM_OnLCD(); 
0528:  GOTO   35A
....................        
....................       //eeproma yazýlacak deðerleri eeprom deðiþkenlerine çek 
....................       loadCostValuesToEEPROMVariables(); 
0529:  CALL   191
....................        
....................       //Yazýlmýþ olan deðerleri eepromdan oku  
....................       Read_EEPROMVariables_from_EEPROMregs(); 
052A:  GOTO   3D9
....................        
....................       //okunan eeprom deðerlerini lcd de göster 
....................       display_SelectedOpsVal_EEPROM_OnLCD(); 
052B:  GOTO   454
....................        
....................        
....................  while(1) 
....................  { 
052C:  GOTO   52C
....................       
....................  } 
.................... } 
....................  
052D:  SLEEP
.................... //Will be implemented// 
.................... void display_Status_EEPROM_OnLCD(){ 
....................  
....................       lcd_gotoxy(2,1); 
*
035A:  MOVLW  02
035B:  MOVWF  44
035C:  MOVLW  01
035D:  MOVWF  45
035E:  CALL   0D8
....................       printf(lcd_putc, "Operasyon Sonu");    
035F:  MOVLW  04
0360:  BSF    03.6
0361:  MOVWF  0D
0362:  MOVLW  00
0363:  MOVWF  0F
0364:  BCF    03.6
0365:  CALL   116
....................       delay_ms(2000); 
0366:  MOVLW  08
0367:  MOVWF  3D
0368:  MOVLW  FA
0369:  MOVWF  44
036A:  CALL   033
036B:  DECFSZ 3D,F
036C:  GOTO   368
....................       printf(lcd_putc, "\f"); 
036D:  MOVLW  0C
036E:  MOVWF  43
036F:  CALL   0EA
....................       lcd_gotoxy(3,1); 
0370:  MOVLW  03
0371:  MOVWF  44
0372:  MOVLW  01
0373:  MOVWF  45
0374:  CALL   0D8
....................       printf(lcd_putc, "Islemleriniz");   
0375:  MOVLW  0C
0376:  BSF    03.6
0377:  MOVWF  0D
0378:  MOVLW  00
0379:  MOVWF  0F
037A:  BCF    03.6
037B:  CALL   116
....................       lcd_gotoxy(3,2); 
037C:  MOVLW  03
037D:  MOVWF  44
037E:  MOVLW  02
037F:  MOVWF  45
0380:  CALL   0D8
....................       printf(lcd_putc, "Kaydediliyor"); 
0381:  MOVLW  13
0382:  BSF    03.6
0383:  MOVWF  0D
0384:  MOVLW  00
0385:  MOVWF  0F
0386:  BCF    03.6
0387:  CALL   116
....................        
....................       loadCostValuesToEEPROMVariables(); 
0388:  CALL   191
....................           
....................       delay_ms(1000); 
0389:  MOVLW  04
038A:  MOVWF  3D
038B:  MOVLW  FA
038C:  MOVWF  44
038D:  CALL   033
038E:  DECFSZ 3D,F
038F:  GOTO   38B
....................        
....................       printf(lcd_putc, "\f"); 
0390:  MOVLW  0C
0391:  MOVWF  43
0392:  CALL   0EA
....................       lcd_gotoxy(5,1); 
0393:  MOVLW  05
0394:  MOVWF  44
0395:  MOVLW  01
0396:  MOVWF  45
0397:  CALL   0D8
....................       printf(lcd_putc, "Kayitlar");   
0398:  MOVLW  1A
0399:  BSF    03.6
039A:  MOVWF  0D
039B:  MOVLW  00
039C:  MOVWF  0F
039D:  BCF    03.6
039E:  CALL   116
....................       lcd_gotoxy(4,2); 
039F:  MOVLW  04
03A0:  MOVWF  44
03A1:  MOVLW  02
03A2:  MOVWF  45
03A3:  CALL   0D8
....................       printf(lcd_putc, "Tamamlandi"); 
03A4:  MOVLW  1F
03A5:  BSF    03.6
03A6:  MOVWF  0D
03A7:  MOVLW  00
03A8:  MOVWF  0F
03A9:  BCF    03.6
03AA:  CALL   116
....................        
....................       delay_ms(1000); 
03AB:  MOVLW  04
03AC:  MOVWF  3D
03AD:  MOVLW  FA
03AE:  MOVWF  44
03AF:  CALL   033
03B0:  DECFSZ 3D,F
03B1:  GOTO   3AD
....................        
....................       printf(lcd_putc, "\f"); 
03B2:  MOVLW  0C
03B3:  MOVWF  43
03B4:  CALL   0EA
....................       lcd_gotoxy(4,1); 
03B5:  MOVLW  04
03B6:  MOVWF  44
03B7:  MOVLW  01
03B8:  MOVWF  45
03B9:  CALL   0D8
....................       printf(lcd_putc, "Ana Menuye");   
03BA:  MOVLW  25
03BB:  BSF    03.6
03BC:  MOVWF  0D
03BD:  MOVLW  00
03BE:  MOVWF  0F
03BF:  BCF    03.6
03C0:  CALL   116
....................       lcd_gotoxy(2,2); 
03C1:  MOVLW  02
03C2:  MOVWF  44
03C3:  MOVWF  45
03C4:  CALL   0D8
....................       printf(lcd_putc, "Yonlendiriliyor"); 
03C5:  MOVLW  2B
03C6:  BSF    03.6
03C7:  MOVWF  0D
03C8:  MOVLW  00
03C9:  MOVWF  0F
03CA:  BCF    03.6
03CB:  CALL   116
....................        
....................       delay_ms(1000); 
03CC:  MOVLW  04
03CD:  MOVWF  3D
03CE:  MOVLW  FA
03CF:  MOVWF  44
03D0:  CALL   033
03D1:  DECFSZ 3D,F
03D2:  GOTO   3CE
....................       printf(lcd_putc, "\f"); 
03D3:  MOVLW  0C
03D4:  MOVWF  43
03D5:  CALL   0EA
03D6:  BCF    0A.3
03D7:  BCF    0A.4
03D8:  GOTO   529 (RETURN)
....................        
.................... } 
....................  
.................... //Secilen islemin eeprom kayýtlarýný görüntüle 
.................... void display_SelectedOpsVal_EEPROM_OnLCD(){ 
....................       
....................       printf(lcd_putc, "\f"); 
*
0454:  MOVLW  0C
0455:  MOVWF  43
0456:  CALL   0EA
....................        
....................       lcd_gotoxy(1,1); 
0457:  MOVLW  01
0458:  MOVWF  44
0459:  MOVWF  45
045A:  CALL   0D8
....................       printf(lcd_putc, "F: %d TL",eeprom_foaming_read_cost);  
045B:  MOVLW  46
045C:  MOVWF  43
045D:  CALL   0EA
045E:  MOVLW  3A
045F:  MOVWF  43
0460:  CALL   0EA
0461:  MOVLW  20
0462:  MOVWF  43
0463:  CALL   0EA
0464:  MOVF   35,W
0465:  MOVWF  3D
0466:  MOVLW  18
0467:  MOVWF  3E
0468:  CALL   3FD
0469:  MOVLW  20
046A:  MOVWF  43
046B:  CALL   0EA
046C:  MOVLW  54
046D:  MOVWF  43
046E:  CALL   0EA
046F:  MOVLW  4C
0470:  MOVWF  43
0471:  CALL   0EA
....................       lcd_gotoxy(8,1); 
0472:  MOVLW  08
0473:  MOVWF  44
0474:  MOVLW  01
0475:  MOVWF  45
0476:  CALL   0D8
....................       printf(lcd_putc, "W: %d TL",eeprom_washing_read_cost);  
0477:  MOVLW  57
0478:  MOVWF  43
0479:  CALL   0EA
047A:  MOVLW  3A
047B:  MOVWF  43
047C:  CALL   0EA
047D:  MOVLW  20
047E:  MOVWF  43
047F:  CALL   0EA
0480:  MOVF   36,W
0481:  MOVWF  3D
0482:  MOVLW  18
0483:  MOVWF  3E
0484:  CALL   3FD
0485:  MOVLW  20
0486:  MOVWF  43
0487:  CALL   0EA
0488:  MOVLW  54
0489:  MOVWF  43
048A:  CALL   0EA
048B:  MOVLW  4C
048C:  MOVWF  43
048D:  CALL   0EA
....................       lcd_gotoxy(1,2); 
048E:  MOVLW  01
048F:  MOVWF  44
0490:  MOVLW  02
0491:  MOVWF  45
0492:  CALL   0D8
....................       printf(lcd_putc, "V: %d TL",eeprom_ventilating_read_cost);  
0493:  MOVLW  56
0494:  MOVWF  43
0495:  CALL   0EA
0496:  MOVLW  3A
0497:  MOVWF  43
0498:  CALL   0EA
0499:  MOVLW  20
049A:  MOVWF  43
049B:  CALL   0EA
049C:  MOVF   37,W
049D:  MOVWF  3D
049E:  MOVLW  18
049F:  MOVWF  3E
04A0:  CALL   3FD
04A1:  MOVLW  20
04A2:  MOVWF  43
04A3:  CALL   0EA
04A4:  MOVLW  54
04A5:  MOVWF  43
04A6:  CALL   0EA
04A7:  MOVLW  4C
04A8:  MOVWF  43
04A9:  CALL   0EA
....................       lcd_gotoxy(8,8); 
04AA:  MOVLW  08
04AB:  MOVWF  44
04AC:  MOVWF  45
04AD:  CALL   0D8
....................       printf(lcd_putc, "P: %d TL",eeprom_polishing_read_cost);  
04AE:  MOVLW  50
04AF:  MOVWF  43
04B0:  CALL   0EA
04B1:  MOVLW  3A
04B2:  MOVWF  43
04B3:  CALL   0EA
04B4:  MOVLW  20
04B5:  MOVWF  43
04B6:  CALL   0EA
04B7:  MOVF   38,W
04B8:  MOVWF  3D
04B9:  MOVLW  18
04BA:  MOVWF  3E
04BB:  CALL   3FD
04BC:  MOVLW  20
04BD:  MOVWF  43
04BE:  CALL   0EA
04BF:  MOVLW  54
04C0:  MOVWF  43
04C1:  CALL   0EA
04C2:  MOVLW  4C
04C3:  MOVWF  43
04C4:  CALL   0EA
04C5:  BCF    0A.3
04C6:  BCF    0A.4
04C7:  GOTO   52C (RETURN)
....................         
.................... } 
....................  
....................  
.................... //will be implemented 
.................... void loadCostValuesToEEPROMVariables(){ 
....................  
....................       //Cost values to be written 
....................       eeprom_foaming_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Foaming)/10)*2); 
*
0191:  RLF    30,W
0192:  MOVWF  77
0193:  RLF    77,F
0194:  RLF    77,F
0195:  MOVLW  F8
0196:  ANDWF  77,F
0197:  MOVF   77,W
0198:  ADDLW  20
0199:  MOVWF  04
019A:  BCF    03.7
019B:  INCF   04,F
019C:  MOVF   00,W
019D:  MOVWF  3E
019E:  DECF   04,F
019F:  MOVF   00,W
01A0:  MOVWF  3D
01A1:  MOVF   3E,W
01A2:  MOVWF  40
01A3:  MOVF   3D,W
01A4:  MOVWF  3F
01A5:  CLRF   42
01A6:  MOVLW  0A
01A7:  MOVWF  41
01A8:  CALL   16C
01A9:  MOVF   79,W
01AA:  MOVWF  3E
01AB:  BCF    03.0
01AC:  RLF    78,W
01AD:  MOVWF  79
01AE:  RLF    3E,W
01AF:  MOVWF  7A
01B0:  MOVF   79,W
01B1:  MOVWF  31
....................       eeprom_washing_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Washing)/10)*2); 
01B2:  RLF    30,W
01B3:  MOVWF  77
01B4:  RLF    77,F
01B5:  RLF    77,F
01B6:  MOVLW  F8
01B7:  ANDWF  77,F
01B8:  MOVF   77,W
01B9:  ADDLW  02
01BA:  ADDLW  20
01BB:  MOVWF  04
01BC:  BCF    03.7
01BD:  INCF   04,F
01BE:  MOVF   00,W
01BF:  MOVWF  3E
01C0:  DECF   04,F
01C1:  MOVF   00,W
01C2:  MOVWF  3D
01C3:  MOVF   3E,W
01C4:  MOVWF  40
01C5:  MOVF   3D,W
01C6:  MOVWF  3F
01C7:  CLRF   42
01C8:  MOVLW  0A
01C9:  MOVWF  41
01CA:  CALL   16C
01CB:  MOVF   79,W
01CC:  MOVWF  3E
01CD:  BCF    03.0
01CE:  RLF    78,W
01CF:  MOVWF  79
01D0:  RLF    3E,W
01D1:  MOVWF  7A
01D2:  MOVF   79,W
01D3:  MOVWF  32
....................       eeprom_ventilating_written_cost = (unsigned int8)(((MikroClient[ClientNumber].time_Ventilation)/10)*2); 
01D4:  RLF    30,W
01D5:  MOVWF  77
01D6:  RLF    77,F
01D7:  RLF    77,F
01D8:  MOVLW  F8
01D9:  ANDWF  77,F
01DA:  MOVF   77,W
01DB:  ADDLW  04
01DC:  ADDLW  20
01DD:  MOVWF  04
01DE:  BCF    03.7
01DF:  INCF   04,F
01E0:  MOVF   00,W
01E1:  MOVWF  3E
01E2:  DECF   04,F
01E3:  MOVF   00,W
01E4:  MOVWF  3D
01E5:  MOVF   3E,W
01E6:  MOVWF  40
01E7:  MOVF   3D,W
01E8:  MOVWF  3F
01E9:  CLRF   42
01EA:  MOVLW  0A
01EB:  MOVWF  41
01EC:  CALL   16C
01ED:  MOVF   79,W
01EE:  MOVWF  3E
01EF:  BCF    03.0
01F0:  RLF    78,W
01F1:  MOVWF  79
01F2:  RLF    3E,W
01F3:  MOVWF  7A
01F4:  MOVF   79,W
01F5:  MOVWF  33
....................       eeprom_polishing_written_cost   = (unsigned int8)((MikroClient[ClientNumber].mililitre_Polishing)*15); 
01F6:  RLF    30,W
01F7:  MOVWF  77
01F8:  RLF    77,F
01F9:  RLF    77,F
01FA:  MOVLW  F8
01FB:  ANDWF  77,F
01FC:  MOVF   77,W
01FD:  ADDLW  06
01FE:  ADDLW  20
01FF:  MOVWF  04
0200:  BCF    03.7
0201:  INCF   04,F
0202:  MOVF   00,W
0203:  MOVWF  3E
0204:  DECF   04,F
0205:  MOVF   00,W
0206:  MOVWF  3D
0207:  MOVF   3E,W
0208:  MOVWF  40
0209:  MOVF   3D,W
020A:  MOVWF  3F
020B:  CLRF   42
020C:  MOVLW  0F
020D:  MOVWF  41
*
0222:  MOVF   78,W
0223:  MOVWF  34
....................       
....................       //Write data to the allocated space for the customer who is using it 
....................       write_EEPROMVariables_to_EEPROMregs(); 
*
0359:  RETURN
.................... } 
....................  
....................  
.................... //will be implemented 
.................... void write_EEPROMVariables_to_EEPROMregs(){ 
....................  
.................... // Operations will be performed for the relevant customer 
.................... // A new operation will be defined each time the system is activated 
.................... // Example usage: 
.................... // Main Menu -> Registration Process -> Operation 1 -> LCD display view: 
.................... //                                                                [F=32TL    W=12TL] F: foaming     , W: Water 
.................... //                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing 
.................... //                        -> Operation 2 -> LCD display view: 
.................... //                                                                [F=32TL    W=12TL] F: foaming     , W: Water 
.................... //                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing 
....................  
....................    //Selcuk Bey's ID 
....................    if(ClientNumber == 0){ 
*
0224:  MOVF   30,F
0225:  BTFSS  03.2
0226:  GOTO   2BC
....................        
....................       // The last cursor position address will always be written to the zero address 
....................        
....................       //Pull the last address to keep going on 
....................       Client0_last_address = read_eeprom(eeprom_Client0_systemStartAddress); 
0227:  BSF    03.6
0228:  CLRF   0D
0229:  BSF    03.5
022A:  BCF    0C.7
022B:  BSF    0C.0
022C:  BCF    03.5
022D:  MOVF   0C,W
022E:  BCF    03.6
022F:  MOVWF  39
....................        
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 1), (eeprom_foaming_written_cost)     ); Client0_last_address++; //Save foaming cost 
0230:  MOVLW  01
0231:  ADDWF  39,W
0232:  MOVWF  3D
0233:  MOVF   0B,W
0234:  MOVWF  77
0235:  BCF    0B.7
0236:  MOVF   3D,W
0237:  BSF    03.6
0238:  MOVWF  0D
0239:  BCF    03.6
023A:  MOVF   31,W
023B:  BSF    03.6
023C:  MOVWF  0C
023D:  BSF    03.5
023E:  BCF    0C.7
023F:  BSF    0C.2
0240:  MOVLW  55
0241:  MOVWF  0D
0242:  MOVLW  AA
0243:  MOVWF  0D
0244:  BSF    0C.1
0245:  BTFSC  0C.1
0246:  GOTO   245
0247:  BCF    0C.2
0248:  MOVF   77,W
0249:  BCF    03.5
024A:  BCF    03.6
024B:  IORWF  0B,F
024C:  INCF   39,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 1), (eeprom_washing_written_cost)     ); Client0_last_address++; //Save washing cost 
024D:  MOVLW  01
024E:  ADDWF  39,W
024F:  MOVWF  3D
0250:  MOVF   0B,W
0251:  MOVWF  77
0252:  BCF    0B.7
0253:  MOVF   3D,W
0254:  BSF    03.6
0255:  MOVWF  0D
0256:  BCF    03.6
0257:  MOVF   32,W
0258:  BSF    03.6
0259:  MOVWF  0C
025A:  BSF    03.5
025B:  BCF    0C.7
025C:  BSF    0C.2
025D:  MOVLW  55
025E:  MOVWF  0D
025F:  MOVLW  AA
0260:  MOVWF  0D
0261:  BSF    0C.1
0262:  BTFSC  0C.1
0263:  GOTO   262
0264:  BCF    0C.2
0265:  MOVF   77,W
0266:  BCF    03.5
0267:  BCF    03.6
0268:  IORWF  0B,F
0269:  INCF   39,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 1), (eeprom_ventilating_written_cost) ); Client0_last_address++; //Save Ventilating cost 
026A:  MOVLW  01
026B:  ADDWF  39,W
026C:  MOVWF  3D
026D:  MOVF   0B,W
026E:  MOVWF  77
026F:  BCF    0B.7
0270:  MOVF   3D,W
0271:  BSF    03.6
0272:  MOVWF  0D
0273:  BCF    03.6
0274:  MOVF   33,W
0275:  BSF    03.6
0276:  MOVWF  0C
0277:  BSF    03.5
0278:  BCF    0C.7
0279:  BSF    0C.2
027A:  MOVLW  55
027B:  MOVWF  0D
027C:  MOVLW  AA
027D:  MOVWF  0D
027E:  BSF    0C.1
027F:  BTFSC  0C.1
0280:  GOTO   27F
0281:  BCF    0C.2
0282:  MOVF   77,W
0283:  BCF    03.5
0284:  BCF    03.6
0285:  IORWF  0B,F
0286:  INCF   39,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 1), (eeprom_polishing_written_cost)   ); Client0_last_address++; //Save Polishing cost 
0287:  MOVLW  01
0288:  ADDWF  39,W
0289:  MOVWF  3D
028A:  MOVF   0B,W
028B:  MOVWF  77
028C:  BCF    0B.7
028D:  MOVF   3D,W
028E:  BSF    03.6
028F:  MOVWF  0D
0290:  BCF    03.6
0291:  MOVF   34,W
0292:  BSF    03.6
0293:  MOVWF  0C
0294:  BSF    03.5
0295:  BCF    0C.7
0296:  BSF    0C.2
0297:  MOVLW  55
0298:  MOVWF  0D
0299:  MOVLW  AA
029A:  MOVWF  0D
029B:  BSF    0C.1
029C:  BTFSC  0C.1
029D:  GOTO   29C
029E:  BCF    0C.2
029F:  MOVF   77,W
02A0:  BCF    03.5
02A1:  BCF    03.6
02A2:  IORWF  0B,F
02A3:  INCF   39,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress                           ), ( Client0_last_address)           );                         //Save cursor location in the client0 start address 
02A4:  MOVF   0B,W
02A5:  MOVWF  77
02A6:  BCF    0B.7
02A7:  BSF    03.6
02A8:  CLRF   0D
02A9:  BCF    03.6
02AA:  MOVF   39,W
02AB:  BSF    03.6
02AC:  MOVWF  0C
02AD:  BSF    03.5
02AE:  BCF    0C.7
02AF:  BSF    0C.2
02B0:  MOVLW  55
02B1:  MOVWF  0D
02B2:  MOVLW  AA
02B3:  MOVWF  0D
02B4:  BSF    0C.1
02B5:  BTFSC  0C.1
02B6:  GOTO   2B5
02B7:  BCF    0C.2
02B8:  MOVF   77,W
02B9:  BCF    03.5
02BA:  BCF    03.6
02BB:  IORWF  0B,F
....................    } 
....................     
....................    if(ClientNumber == 1){ 
02BC:  DECFSZ 30,W
02BD:  GOTO   359
....................        
....................       // The last cursor position address will always be written to the zero address 
....................      
....................       //Pull the last address to keep going on 
....................       Client1_last_address = read_eeprom(eeprom_Client1_systemStartAddress); 
02BE:  MOVLW  82
02BF:  BSF    03.6
02C0:  MOVWF  0D
02C1:  BSF    03.5
02C2:  BCF    0C.7
02C3:  BSF    0C.0
02C4:  BCF    03.5
02C5:  MOVF   0C,W
02C6:  BCF    03.6
02C7:  MOVWF  3A
....................        
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_foaming_written_cost)     ); Client1_last_address++; //Save foaming cost 
02C8:  MOVLW  82
02C9:  ADDWF  3A,W
02CA:  ADDLW  01
02CB:  MOVWF  3D
02CC:  MOVF   0B,W
02CD:  MOVWF  77
02CE:  BCF    0B.7
02CF:  MOVF   3D,W
02D0:  BSF    03.6
02D1:  MOVWF  0D
02D2:  BCF    03.6
02D3:  MOVF   31,W
02D4:  BSF    03.6
02D5:  MOVWF  0C
02D6:  BSF    03.5
02D7:  BCF    0C.7
02D8:  BSF    0C.2
02D9:  MOVLW  55
02DA:  MOVWF  0D
02DB:  MOVLW  AA
02DC:  MOVWF  0D
02DD:  BSF    0C.1
02DE:  BTFSC  0C.1
02DF:  GOTO   2DE
02E0:  BCF    0C.2
02E1:  MOVF   77,W
02E2:  BCF    03.5
02E3:  BCF    03.6
02E4:  IORWF  0B,F
02E5:  INCF   3A,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_washing_written_cost)     ); Client1_last_address++; //Save washing cost 
02E6:  MOVLW  82
02E7:  ADDWF  3A,W
02E8:  ADDLW  01
02E9:  MOVWF  3D
02EA:  MOVF   0B,W
02EB:  MOVWF  77
02EC:  BCF    0B.7
02ED:  MOVF   3D,W
02EE:  BSF    03.6
02EF:  MOVWF  0D
02F0:  BCF    03.6
02F1:  MOVF   32,W
02F2:  BSF    03.6
02F3:  MOVWF  0C
02F4:  BSF    03.5
02F5:  BCF    0C.7
02F6:  BSF    0C.2
02F7:  MOVLW  55
02F8:  MOVWF  0D
02F9:  MOVLW  AA
02FA:  MOVWF  0D
02FB:  BSF    0C.1
02FC:  BTFSC  0C.1
02FD:  GOTO   2FC
02FE:  BCF    0C.2
02FF:  MOVF   77,W
0300:  BCF    03.5
0301:  BCF    03.6
0302:  IORWF  0B,F
0303:  INCF   3A,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_ventilating_written_cost) ); Client1_last_address++; //Save Ventilating cost 
0304:  MOVLW  82
0305:  ADDWF  3A,W
0306:  ADDLW  01
0307:  MOVWF  3D
0308:  MOVF   0B,W
0309:  MOVWF  77
030A:  BCF    0B.7
030B:  MOVF   3D,W
030C:  BSF    03.6
030D:  MOVWF  0D
030E:  BCF    03.6
030F:  MOVF   33,W
0310:  BSF    03.6
0311:  MOVWF  0C
0312:  BSF    03.5
0313:  BCF    0C.7
0314:  BSF    0C.2
0315:  MOVLW  55
0316:  MOVWF  0D
0317:  MOVLW  AA
0318:  MOVWF  0D
0319:  BSF    0C.1
031A:  BTFSC  0C.1
031B:  GOTO   31A
031C:  BCF    0C.2
031D:  MOVF   77,W
031E:  BCF    03.5
031F:  BCF    03.6
0320:  IORWF  0B,F
0321:  INCF   3A,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_polishing_written_cost)   ); Client1_last_address++; //Save Polishing cost 
0322:  MOVLW  82
0323:  ADDWF  3A,W
0324:  ADDLW  01
0325:  MOVWF  3D
0326:  MOVF   0B,W
0327:  MOVWF  77
0328:  BCF    0B.7
0329:  MOVF   3D,W
032A:  BSF    03.6
032B:  MOVWF  0D
032C:  BCF    03.6
032D:  MOVF   34,W
032E:  BSF    03.6
032F:  MOVWF  0C
0330:  BSF    03.5
0331:  BCF    0C.7
0332:  BSF    0C.2
0333:  MOVLW  55
0334:  MOVWF  0D
0335:  MOVLW  AA
0336:  MOVWF  0D
0337:  BSF    0C.1
0338:  BTFSC  0C.1
0339:  GOTO   338
033A:  BCF    0C.2
033B:  MOVF   77,W
033C:  BCF    03.5
033D:  BCF    03.6
033E:  IORWF  0B,F
033F:  INCF   3A,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress                           ), ( Client1_last_address)           );                         //Save cursor location in the client0 start address 
0340:  MOVF   0B,W
0341:  MOVWF  77
0342:  BCF    0B.7
0343:  MOVLW  82
0344:  BSF    03.6
0345:  MOVWF  0D
0346:  BCF    03.6
0347:  MOVF   3A,W
0348:  BSF    03.6
0349:  MOVWF  0C
034A:  BSF    03.5
034B:  BCF    0C.7
034C:  BSF    0C.2
034D:  MOVLW  55
034E:  MOVWF  0D
034F:  MOVLW  AA
0350:  MOVWF  0D
0351:  BSF    0C.1
0352:  BTFSC  0C.1
0353:  GOTO   352
0354:  BCF    0C.2
0355:  MOVF   77,W
0356:  BCF    03.5
0357:  BCF    03.6
0358:  IORWF  0B,F
....................     
....................    } 
....................     
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... //!//will be implemented 
.................... void Read_EEPROMVariables_from_EEPROMregs(){ 
....................      
....................         if(ClientNumber == 0) 
*
03D9:  MOVF   30,F
03DA:  BTFSS  03.2
03DB:  GOTO   3E5
....................         { 
....................  
....................  
....................            //Pull the last address to keep going on 
....................            Client0_last_address = read_eeprom(eeprom_Client0_systemStartAddress); 
03DC:  BSF    03.6
03DD:  CLRF   0D
03DE:  BSF    03.5
03DF:  BCF    0C.7
03E0:  BSF    0C.0
03E1:  BCF    03.5
03E2:  MOVF   0C,W
03E3:  BCF    03.6
03E4:  MOVWF  39
....................             
....................             
....................             
....................              
....................         } 
03E5:  BCF    0A.3
03E6:  BCF    0A.4
03E7:  GOTO   52B (RETURN)
....................  
....................  
....................  
.................... } 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
