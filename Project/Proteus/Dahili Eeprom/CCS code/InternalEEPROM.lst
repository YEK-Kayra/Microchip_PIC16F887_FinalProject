CCS PCM C Compiler, Version 5.049, 5967               30-Ara-24 19:22

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Proteus\Dahili Eeprom\CCS code\InternalEEPROM.lst

               ROM used:   1578 words (19%)
                           Largest free fragment is 2048
               RAM used:   37 (10%) at main() level
                           51 (14%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5C3
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA A0,2B
0005:  DATA 3A,10
0006:  DATA 25,32
0007:  DATA 20,2A
0008:  DATA 4C,00
0009:  DATA 20,28
000A:  DATA 3A,10
000B:  DATA 25,32
000C:  DATA 20,2A
000D:  DATA 4C,00
000E:  DATA 4F,38
000F:  DATA 65,39
0010:  DATA E1,39
0011:  DATA F9,37
0012:  DATA 6E,10
0013:  DATA D3,37
0014:  DATA EE,3A
0015:  DATA 00,00
0016:  DATA C9,39
0017:  DATA EC,32
0018:  DATA 6D,36
0019:  DATA 65,39
001A:  DATA 69,37
001B:  DATA 69,3D
001C:  DATA 00,01
001D:  DATA CB,30
001E:  DATA 79,32
001F:  DATA 65,32
0020:  DATA 69,36
0021:  DATA E9,3C
0022:  DATA 6F,39
0023:  DATA 00,01
0024:  DATA CB,30
0025:  DATA F9,34
0026:  DATA 74,36
0027:  DATA 61,39
0028:  DATA 00,01
0029:  DATA D4,30
002A:  DATA ED,30
002B:  DATA 6D,36
002C:  DATA 61,37
002D:  DATA E4,34
002E:  DATA 00,01
002F:  DATA 41,37
0030:  DATA 61,10
0031:  DATA CD,32
0032:  DATA EE,3A
0033:  DATA F9,32
0034:  DATA 00,01
0035:  DATA D9,37
0036:  DATA 6E,36
0037:  DATA 65,37
0038:  DATA E4,34
0039:  DATA F2,34
003A:  DATA EC,34
003B:  DATA F9,37
003C:  DATA 72,00
*
0120:  MOVF   0B,W
0121:  MOVWF  3E
0122:  BCF    0B.7
0123:  BSF    03.5
0124:  BSF    03.6
0125:  BSF    0C.7
0126:  BSF    0C.0
0127:  NOP
0128:  NOP
0129:  BCF    03.5
012A:  BCF    03.6
012B:  BTFSC  3E.7
012C:  BSF    0B.7
012D:  BSF    03.6
012E:  MOVF   0C,W
012F:  ANDLW  7F
0130:  BTFSC  03.2
0131:  GOTO   174
0132:  BCF    03.6
0133:  MOVWF  3E
0134:  BSF    03.6
0135:  MOVF   0D,W
0136:  BCF    03.6
0137:  MOVWF  3F
0138:  BSF    03.6
0139:  MOVF   0F,W
013A:  BCF    03.6
013B:  MOVWF  40
013C:  MOVF   3E,W
013D:  MOVWF  44
013E:  CALL   0F4
013F:  MOVF   3F,W
0140:  BSF    03.6
0141:  MOVWF  0D
0142:  BCF    03.6
0143:  MOVF   40,W
0144:  BSF    03.6
0145:  MOVWF  0F
0146:  BCF    03.6
0147:  MOVF   0B,W
0148:  MOVWF  41
0149:  BCF    0B.7
014A:  BSF    03.5
014B:  BSF    03.6
014C:  BSF    0C.7
014D:  BSF    0C.0
014E:  NOP
014F:  NOP
0150:  BCF    03.5
0151:  BCF    03.6
0152:  BTFSC  41.7
0153:  BSF    0B.7
0154:  BSF    03.6
0155:  RLF    0C,W
0156:  RLF    0E,W
0157:  ANDLW  7F
0158:  BTFSC  03.2
0159:  GOTO   174
015A:  BCF    03.6
015B:  MOVWF  3E
015C:  BSF    03.6
015D:  MOVF   0D,W
015E:  BCF    03.6
015F:  MOVWF  3F
0160:  BSF    03.6
0161:  MOVF   0F,W
0162:  BCF    03.6
0163:  MOVWF  40
0164:  MOVF   3E,W
0165:  MOVWF  44
0166:  CALL   0F4
0167:  MOVF   3F,W
0168:  BSF    03.6
0169:  MOVWF  0D
016A:  BCF    03.6
016B:  MOVF   40,W
016C:  BSF    03.6
016D:  MOVWF  0F
016E:  INCF   0D,F
016F:  BTFSC  03.2
0170:  INCF   0F,F
0171:  BCF    03.6
0172:  GOTO   120
0173:  BSF    03.6
0174:  BCF    03.6
0175:  RETURN
0176:  CLRF   78
0177:  CLRF   79
0178:  CLRF   77
0179:  CLRF   7A
017A:  MOVF   43,W
017B:  BTFSS  03.2
017C:  GOTO   180
017D:  MOVF   42,W
017E:  BTFSC  03.2
017F:  GOTO   19A
0180:  MOVLW  10
0181:  MOVWF  44
0182:  BCF    03.0
0183:  RLF    40,F
0184:  RLF    41,F
0185:  RLF    77,F
0186:  RLF    7A,F
0187:  MOVF   43,W
0188:  SUBWF  7A,W
0189:  BTFSS  03.2
018A:  GOTO   18D
018B:  MOVF   42,W
018C:  SUBWF  77,W
018D:  BTFSS  03.0
018E:  GOTO   196
018F:  MOVF   42,W
0190:  SUBWF  77,F
0191:  BTFSS  03.0
0192:  DECF   7A,F
0193:  MOVF   43,W
0194:  SUBWF  7A,F
0195:  BSF    03.0
0196:  RLF    78,F
0197:  RLF    79,F
0198:  DECFSZ 44,F
0199:  GOTO   182
019A:  RETURN
*
0246:  MOVLW  10
0247:  MOVWF  44
0248:  CLRF   77
0249:  CLRF   7A
024A:  RRF    41,F
024B:  RRF    40,F
024C:  BTFSS  03.0
024D:  GOTO   254
024E:  MOVF   42,W
024F:  ADDWF  77,F
0250:  BTFSC  03.0
0251:  INCF   7A,F
0252:  MOVF   43,W
0253:  ADDWF  7A,F
0254:  RRF    7A,F
0255:  RRF    77,F
0256:  RRF    79,F
0257:  RRF    78,F
0258:  DECFSZ 44,F
0259:  GOTO   24A
*
03E1:  MOVF   45,W
03E2:  CLRF   78
03E3:  SUBWF  44,W
03E4:  BTFSC  03.0
03E5:  GOTO   3E9
03E6:  MOVF   44,W
03E7:  MOVWF  77
03E8:  GOTO   3F5
03E9:  CLRF   77
03EA:  MOVLW  08
03EB:  MOVWF  46
03EC:  RLF    44,F
03ED:  RLF    77,F
03EE:  MOVF   45,W
03EF:  SUBWF  77,W
03F0:  BTFSC  03.0
03F1:  MOVWF  77
03F2:  RLF    78,F
03F3:  DECFSZ 46,F
03F4:  GOTO   3EC
03F5:  RETURN
03F6:  MOVLW  20
03F7:  BTFSS  3F.4
03F8:  MOVLW  30
03F9:  MOVWF  40
03FA:  MOVF   3E,W
03FB:  MOVWF  77
03FC:  BTFSS  3E.7
03FD:  GOTO   406
03FE:  COMF   77,F
03FF:  INCF   77,F
0400:  MOVF   77,W
0401:  MOVWF  3E
0402:  MOVLW  2D
0403:  MOVWF  40
0404:  BSF    3F.7
0405:  BSF    3F.0
0406:  MOVF   3E,W
0407:  MOVWF  44
0408:  MOVLW  64
0409:  MOVWF  45
040A:  CALL   3E1
040B:  MOVF   77,W
040C:  MOVWF  3E
040D:  MOVLW  30
040E:  ADDWF  78,W
040F:  MOVWF  41
0410:  MOVF   3E,W
0411:  MOVWF  44
0412:  MOVLW  0A
0413:  MOVWF  45
0414:  CALL   3E1
0415:  MOVLW  30
0416:  ADDWF  77,W
0417:  MOVWF  43
0418:  MOVLW  30
0419:  ADDWF  78,W
041A:  MOVWF  42
041B:  MOVF   40,W
041C:  MOVWF  77
041D:  MOVLW  30
041E:  SUBWF  41,W
041F:  BTFSC  03.2
0420:  GOTO   425
0421:  BSF    3F.1
0422:  BTFSC  3F.7
0423:  BSF    3F.2
0424:  GOTO   439
0425:  MOVF   40,W
0426:  MOVWF  41
0427:  MOVLW  20
0428:  MOVWF  40
0429:  MOVLW  30
042A:  SUBWF  42,W
042B:  BTFSC  03.2
042C:  GOTO   431
042D:  BSF    3F.0
042E:  BTFSC  3F.7
042F:  BSF    3F.1
0430:  GOTO   439
0431:  BTFSS  03.2
0432:  BSF    3F.0
0433:  BTFSS  03.2
0434:  GOTO   439
0435:  MOVF   41,W
0436:  MOVWF  42
0437:  MOVLW  20
0438:  MOVWF  41
0439:  BTFSC  3F.2
043A:  GOTO   440
043B:  BTFSC  3F.1
043C:  GOTO   443
043D:  BTFSC  3F.0
043E:  GOTO   446
043F:  GOTO   449
0440:  MOVF   40,W
0441:  MOVWF  44
0442:  CALL   0F4
0443:  MOVF   41,W
0444:  MOVWF  44
0445:  CALL   0F4
0446:  MOVF   42,W
0447:  MOVWF  44
0448:  CALL   0F4
0449:  MOVF   43,W
044A:  MOVWF  44
044B:  CALL   0F4
044C:  RETURN
044D:  MOVF   0B,W
044E:  MOVWF  3F
044F:  BCF    0B.7
0450:  BSF    03.5
0451:  BSF    03.6
0452:  BSF    0C.7
0453:  BSF    0C.0
0454:  NOP
0455:  NOP
0456:  BCF    03.5
0457:  BCF    03.6
0458:  BTFSC  3F.7
0459:  BSF    0B.7
045A:  BTFSC  03.0
045B:  GOTO   484
045C:  BSF    03.6
045D:  MOVF   0C,W
045E:  ANDLW  7F
045F:  BCF    03.6
0460:  MOVWF  3F
0461:  BSF    03.6
0462:  MOVF   0D,W
0463:  BCF    03.6
0464:  MOVWF  40
0465:  BSF    03.6
0466:  MOVF   0F,W
0467:  BCF    03.6
0468:  MOVWF  41
0469:  MOVF   3F,W
046A:  MOVWF  44
046B:  CALL   0F4
046C:  MOVF   40,W
046D:  BSF    03.6
046E:  MOVWF  0D
046F:  BCF    03.6
0470:  MOVF   41,W
0471:  BSF    03.6
0472:  MOVWF  0F
0473:  BCF    03.6
0474:  MOVF   0B,W
0475:  MOVWF  42
0476:  BCF    0B.7
0477:  BSF    03.5
0478:  BSF    03.6
0479:  BSF    0C.7
047A:  BSF    0C.0
047B:  NOP
047C:  NOP
047D:  BCF    03.5
047E:  BCF    03.6
047F:  BTFSC  42.7
0480:  BSF    0B.7
0481:  DECFSZ 3E,F
0482:  GOTO   484
0483:  GOTO   4A3
0484:  BSF    03.6
0485:  RLF    0C,W
0486:  RLF    0E,W
0487:  ANDLW  7F
0488:  BCF    03.6
0489:  MOVWF  3F
048A:  BSF    03.6
048B:  MOVF   0D,W
048C:  BCF    03.6
048D:  MOVWF  40
048E:  BSF    03.6
048F:  MOVF   0F,W
0490:  BCF    03.6
0491:  MOVWF  41
0492:  MOVF   3F,W
0493:  MOVWF  44
0494:  CALL   0F4
0495:  MOVF   40,W
0496:  BSF    03.6
0497:  MOVWF  0D
0498:  BCF    03.6
0499:  MOVF   41,W
049A:  BSF    03.6
049B:  MOVWF  0F
049C:  INCF   0D,F
049D:  BTFSC  03.2
049E:  INCF   0F,F
049F:  BCF    03.0
04A0:  BCF    03.6
04A1:  DECFSZ 3E,F
04A2:  GOTO   44D
04A3:  RETURN
....................  
.................... #list 
....................  
....................  
.................... //--> FUSES 
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... //--> USEs 
.................... #use delay(clock=4M) 
*
003D:  MOVLW  45
003E:  MOVWF  04
003F:  BCF    03.7
0040:  MOVF   00,W
0041:  BTFSC  03.2
0042:  GOTO   051
0043:  MOVLW  01
0044:  MOVWF  78
0045:  CLRF   77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  DECFSZ 78,F
0049:  GOTO   045
004A:  MOVLW  4A
004B:  MOVWF  77
004C:  DECFSZ 77,F
004D:  GOTO   04C
004E:  GOTO   04F
004F:  DECFSZ 00,F
0050:  GOTO   043
0051:  RETURN
....................  
....................  
.................... //--> INCLUDES 
.................... #include <lcd.c>    
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
006A:  MOVLW  0F
006B:  BSF    03.5
006C:  ANDWF  08,W
006D:  IORLW  F0
006E:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
006F:  BCF    03.5
0070:  BSF    08.2
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_enable(1); 
0072:  BSF    08.0
....................    delay_cycles(1); 
0073:  NOP
....................    high = lcd_read_nibble(); 
0074:  CALL   05E
0075:  MOVF   78,W
0076:  MOVWF  4C
....................        
....................    lcd_output_enable(0); 
0077:  BCF    08.0
....................    delay_cycles(1); 
0078:  NOP
....................    lcd_output_enable(1); 
0079:  BSF    08.0
....................    delay_us(1); 
007A:  NOP
....................    low = lcd_read_nibble(); 
007B:  CALL   05E
007C:  MOVF   78,W
007D:  MOVWF  4B
....................        
....................    lcd_output_enable(0); 
007E:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  08,W
0082:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0083:  BCF    03.5
0084:  SWAPF  4C,W
0085:  MOVWF  77
0086:  MOVLW  F0
0087:  ANDWF  77,F
0088:  MOVF   77,W
0089:  IORWF  4B,W
008A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
005E:  MOVF   08,W
005F:  MOVWF  77
0060:  SWAPF  08,W
0061:  ANDLW  0F
0062:  MOVWF  78
....................   #endif 
0063:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0052:  SWAPF  4C,W
0053:  ANDLW  F0
0054:  MOVWF  77
0055:  MOVLW  0F
0056:  ANDWF  08,W
0057:  IORWF  77,W
0058:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0059:  NOP
....................    lcd_output_enable(1); 
005A:  BSF    08.0
....................    delay_us(2); 
005B:  GOTO   05C
....................    lcd_output_enable(0); 
005C:  BCF    08.0
005D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0064:  BSF    03.5
0065:  BCF    08.0
....................    lcd_rs_tris(); 
0066:  BCF    08.1
....................    lcd_rw_tris(); 
0067:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0068:  BCF    03.5
0069:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
008B:  MOVF   78,W
008C:  MOVWF  4B
008D:  BTFSC  4B.7
008E:  GOTO   06A
....................    lcd_output_rs(address); 
008F:  BTFSS  49.0
0090:  BCF    08.1
0091:  BTFSC  49.0
0092:  BSF    08.1
....................    delay_cycles(1); 
0093:  NOP
....................    lcd_output_rw(0); 
0094:  BCF    08.2
....................    delay_cycles(1); 
0095:  NOP
....................    lcd_output_enable(0); 
0096:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0097:  SWAPF  4A,W
0098:  MOVWF  4B
0099:  MOVLW  0F
009A:  ANDWF  4B,F
009B:  MOVF   4B,W
009C:  MOVWF  4C
009D:  CALL   052
....................    lcd_send_nibble(n & 0xf); 
009E:  MOVF   4A,W
009F:  ANDLW  0F
00A0:  MOVWF  4B
00A1:  MOVWF  4C
00A2:  CALL   052
00A3:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00A4:  MOVLW  28
00A5:  MOVWF  3F
00A6:  MOVLW  0C
00A7:  MOVWF  40
00A8:  MOVLW  01
00A9:  MOVWF  41
00AA:  MOVLW  06
00AB:  MOVWF  42
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00AC:  BCF    08.0
....................    lcd_output_rs(0); 
00AD:  BCF    08.1
....................    lcd_output_rw(0); 
00AE:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00AF:  MOVLW  0F
00B0:  BSF    03.5
00B1:  ANDWF  08,W
00B2:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00B3:  BCF    08.0
....................    lcd_rs_tris(); 
00B4:  BCF    08.1
....................    lcd_rw_tris(); 
00B5:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00B6:  MOVLW  0F
00B7:  BCF    03.5
00B8:  MOVWF  45
00B9:  CALL   03D
....................    for(i=1;i<=3;++i) 
00BA:  MOVLW  01
00BB:  MOVWF  3E
00BC:  MOVF   3E,W
00BD:  SUBLW  03
00BE:  BTFSS  03.0
00BF:  GOTO   0C8
....................    { 
....................        lcd_send_nibble(3); 
00C0:  MOVLW  03
00C1:  MOVWF  4C
00C2:  CALL   052
....................        delay_ms(5); 
00C3:  MOVLW  05
00C4:  MOVWF  45
00C5:  CALL   03D
00C6:  INCF   3E,F
00C7:  GOTO   0BC
....................    } 
....................     
....................    lcd_send_nibble(2); 
00C8:  MOVLW  02
00C9:  MOVWF  4C
00CA:  CALL   052
....................    delay_ms(5); 
00CB:  MOVLW  05
00CC:  MOVWF  45
00CD:  CALL   03D
....................    for(i=0;i<=3;++i) 
00CE:  CLRF   3E
00CF:  MOVF   3E,W
00D0:  SUBLW  03
00D1:  BTFSS  03.0
00D2:  GOTO   0DF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D3:  MOVLW  3F
00D4:  ADDWF  3E,W
00D5:  MOVWF  04
00D6:  BCF    03.7
00D7:  MOVF   00,W
00D8:  MOVWF  43
00D9:  CLRF   49
00DA:  MOVF   43,W
00DB:  MOVWF  4A
00DC:  CALL   064
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DD:  INCF   3E,F
00DE:  GOTO   0CF
00DF:  BCF    0A.3
00E0:  BCF    0A.4
00E1:  GOTO   5E7 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00E2:  DECFSZ 46,W
00E3:  GOTO   0E5
00E4:  GOTO   0E8
....................       address=LCD_LINE_TWO; 
00E5:  MOVLW  40
00E6:  MOVWF  47
00E7:  GOTO   0E9
....................    else 
....................       address=0; 
00E8:  CLRF   47
....................       
....................    address+=x-1; 
00E9:  MOVLW  01
00EA:  SUBWF  45,W
00EB:  ADDWF  47,F
....................    lcd_send_byte(0,0x80|address); 
00EC:  MOVF   47,W
00ED:  IORLW  80
00EE:  MOVWF  48
00EF:  CLRF   49
00F0:  MOVF   48,W
00F1:  MOVWF  4A
00F2:  CALL   064
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00F3:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00F4:  MOVF   44,W
00F5:  XORLW  07
00F6:  BTFSC  03.2
00F7:  GOTO   102
00F8:  XORLW  0B
00F9:  BTFSC  03.2
00FA:  GOTO   107
00FB:  XORLW  06
00FC:  BTFSC  03.2
00FD:  GOTO   10F
00FE:  XORLW  02
00FF:  BTFSC  03.2
0100:  GOTO   115
0101:  GOTO   11A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0102:  MOVLW  01
0103:  MOVWF  45
0104:  MOVWF  46
0105:  CALL   0E2
0106:  GOTO   11F
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0107:  CLRF   49
0108:  MOVLW  01
0109:  MOVWF  4A
010A:  CALL   064
....................                      delay_ms(2); 
010B:  MOVLW  02
010C:  MOVWF  45
010D:  CALL   03D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
010E:  GOTO   11F
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
010F:  MOVLW  01
0110:  MOVWF  45
0111:  MOVLW  02
0112:  MOVWF  46
0113:  CALL   0E2
0114:  GOTO   11F
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0115:  CLRF   49
0116:  MOVLW  10
0117:  MOVWF  4A
0118:  CALL   064
0119:  GOTO   11F
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
011A:  MOVLW  01
011B:  MOVWF  49
011C:  MOVF   44,W
011D:  MOVWF  4A
011E:  CALL   064
....................      #endif 
....................    } 
011F:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Will be Implemented 
.................... //DEFINATIONS 
.................... //They will share the EEPROM memory evenly 
.................... #define eeprom_Client0_systemStartAddress 0 
.................... #define eeprom_Client1_systemStartAddress 130 
....................  
....................  
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;       //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber=0;                            // Will be used as given on the right --> MikroClient[ClientNumber]   
....................  
....................  
.................... //Will be implemented// 
....................  
.................... //------------ VAR --> INTERNAL EEPROM <-- VAR ------------// 
.................... //EEPROM variables to store the values selected by the user 
.................... // Variables for storing "written" values 
.................... unsigned int8 eeprom_foaming_written_cost     = 0; 
.................... unsigned int8 eeprom_washing_written_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_written_cost = 0; 
.................... unsigned int8 eeprom_polishing_written_cost   = 0; 
....................  
.................... // Variables for storing "read" values 
.................... unsigned int8 eeprom_foaming_read_cost     = 0; 
.................... unsigned int8 eeprom_washing_read_cost     = 0; 
.................... unsigned int8 eeprom_ventilating_read_cost = 0; 
.................... unsigned int8 eeprom_polishing_read_cost   = 0; 
....................  
.................... //Keeps track of the last written address in EEPROM for each customer 
.................... unsigned int8 Client0_last_address=0; //For Selçuk Bey's account 
.................... unsigned int8 Client1_last_address=0; //For Emre Bey's account 
....................  
.................... //hangi iþlem üzerinde duruyorsak onun numarasý iþlem-1, iþlem-2 ==> 1 ve 2 bunlarýn numarasý oluyor,  
.................... unsigned int8 IndexOfReadMemory=2;  //en az 1 olabilir 
....................  
.................... //Will be implemented into // 
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void displayProcessCompletionStatus(void); 
.................... void display_SelectedOpsVal_EEPROM_OnLCD(void); 
....................  
.................... /* ======== EEPROM WRITE/READ FUNCTIONS PROTOTYPES  ======== */ 
.................... void loadCostValuesToEEPROMVariables(void); 
.................... void write_EEPROMVariables_to_EEPROMregs(void); 
.................... void Read_EEPROMVariables_from_EEPROMregs(void); 
....................  
....................  
.................... void main(void)  
*
05C3:  MOVF   03,W
05C4:  ANDLW  1F
05C5:  MOVWF  03
05C6:  CLRF   30
05C7:  CLRF   31
05C8:  CLRF   32
05C9:  CLRF   33
05CA:  CLRF   34
05CB:  CLRF   35
05CC:  CLRF   36
05CD:  CLRF   37
05CE:  CLRF   38
05CF:  CLRF   39
05D0:  CLRF   3A
05D1:  MOVLW  02
05D2:  MOVWF  3B
05D3:  CLRF   3D
05D4:  CLRF   3C
05D5:  BSF    03.5
05D6:  BSF    03.6
05D7:  MOVF   09,W
05D8:  ANDLW  C0
05D9:  MOVWF  09
05DA:  BCF    03.6
05DB:  BCF    1F.4
05DC:  BCF    1F.5
05DD:  MOVLW  00
05DE:  BSF    03.6
05DF:  MOVWF  08
05E0:  BCF    03.5
05E1:  CLRF   07
05E2:  CLRF   08
05E3:  CLRF   09
05E4:  BCF    03.7
.................... { 
....................  
....................       lcd_init(); // LCD ekranýmýzý baþlatacak 
05E5:  BCF    03.6
05E6:  GOTO   0A4
....................  
....................       //Baslangýç deðerlerini atalým 
....................       MikroClient[ClientNumber].time_Foaming        = 60;      //4tl(20)   |    12tl(60) 
05E7:  RLF    30,W
05E8:  MOVWF  77
05E9:  RLF    77,F
05EA:  RLF    77,F
05EB:  MOVLW  F8
05EC:  ANDWF  77,F
05ED:  MOVF   77,W
05EE:  ADDLW  20
05EF:  MOVWF  04
05F0:  BCF    03.7
05F1:  INCF   04,F
05F2:  CLRF   00
05F3:  DECF   04,F
05F4:  MOVLW  3C
05F5:  MOVWF  00
....................       MikroClient[ClientNumber].time_Washing        = 70;      //8tl(40)   |    14tl(70) 
05F6:  RLF    30,W
05F7:  MOVWF  77
05F8:  RLF    77,F
05F9:  RLF    77,F
05FA:  MOVLW  F8
05FB:  ANDWF  77,F
05FC:  MOVF   77,W
05FD:  ADDLW  02
05FE:  ADDLW  20
05FF:  MOVWF  04
0600:  BCF    03.7
0601:  INCF   04,F
0602:  CLRF   00
0603:  DECF   04,F
0604:  MOVLW  46
0605:  MOVWF  00
....................       MikroClient[ClientNumber].time_Ventilation    = 80;      //12tl(60)  |    16tl(80) 
0606:  RLF    30,W
0607:  MOVWF  77
0608:  RLF    77,F
0609:  RLF    77,F
060A:  MOVLW  F8
060B:  ANDWF  77,F
060C:  MOVF   77,W
060D:  ADDLW  04
060E:  ADDLW  20
060F:  MOVWF  04
0610:  BCF    03.7
0611:  INCF   04,F
0612:  CLRF   00
0613:  DECF   04,F
0614:  MOVLW  50
0615:  MOVWF  00
....................       MikroClient[ClientNumber].mililitre_Polishing = 1;       //30tl(2)   |    15tl(1) 
0616:  RLF    30,W
0617:  MOVWF  77
0618:  RLF    77,F
0619:  RLF    77,F
061A:  MOVLW  F8
061B:  ANDWF  77,F
061C:  MOVF   77,W
061D:  ADDLW  06
061E:  ADDLW  20
061F:  MOVWF  04
0620:  BCF    03.7
0621:  INCF   04,F
0622:  CLRF   00
0623:  DECF   04,F
0624:  MOVLW  01
0625:  MOVWF  00
....................          
....................       displayProcessCompletionStatus();   
0626:  GOTO   19B
....................        
....................       display_SelectedOpsVal_EEPROM_OnLCD(); 
0627:  GOTO   4A4
....................  
....................        
....................        
....................  while(1) 
....................  { 
0628:  GOTO   628
....................       
....................  } 
.................... } 
....................  
0629:  SLEEP
.................... //Will be implemented// 
....................  
....................  
....................  
....................  
.................... //Secilen islemin eeprom kayýtlarýný görüntüle 
.................... void display_SelectedOpsVal_EEPROM_OnLCD(){ 
....................       
....................      Read_EEPROMVariables_from_EEPROMregs(); 
....................       
....................       printf(lcd_putc, "\f"); 
*
054D:  MOVLW  0C
054E:  MOVWF  44
054F:  CALL   0F4
....................        
....................       lcd_gotoxy(1,1); 
0550:  MOVLW  01
0551:  MOVWF  45
0552:  MOVWF  46
0553:  CALL   0E2
....................       printf(lcd_putc, "F: %d TL",eeprom_foaming_read_cost);  
0554:  MOVLW  46
0555:  MOVWF  44
0556:  CALL   0F4
0557:  MOVLW  3A
0558:  MOVWF  44
0559:  CALL   0F4
055A:  MOVLW  20
055B:  MOVWF  44
055C:  CALL   0F4
055D:  MOVF   35,W
055E:  MOVWF  3E
055F:  MOVLW  18
0560:  MOVWF  3F
0561:  CALL   3F6
0562:  MOVLW  20
0563:  MOVWF  44
0564:  CALL   0F4
0565:  MOVLW  54
0566:  MOVWF  44
0567:  CALL   0F4
0568:  MOVLW  4C
0569:  MOVWF  44
056A:  CALL   0F4
....................       lcd_gotoxy(8,1); 
056B:  MOVLW  08
056C:  MOVWF  45
056D:  MOVLW  01
056E:  MOVWF  46
056F:  CALL   0E2
....................       printf(lcd_putc, " W: %d TL",eeprom_washing_read_cost);  
0570:  MOVLW  04
0571:  BSF    03.6
0572:  MOVWF  0D
0573:  MOVLW  00
0574:  MOVWF  0F
0575:  BCF    03.0
0576:  MOVLW  04
0577:  BCF    03.6
0578:  MOVWF  3E
0579:  CALL   44D
057A:  MOVF   36,W
057B:  MOVWF  3E
057C:  MOVLW  18
057D:  MOVWF  3F
057E:  CALL   3F6
057F:  MOVLW  20
0580:  MOVWF  44
0581:  CALL   0F4
0582:  MOVLW  54
0583:  MOVWF  44
0584:  CALL   0F4
0585:  MOVLW  4C
0586:  MOVWF  44
0587:  CALL   0F4
....................       lcd_gotoxy(1,2); 
0588:  MOVLW  01
0589:  MOVWF  45
058A:  MOVLW  02
058B:  MOVWF  46
058C:  CALL   0E2
....................       printf(lcd_putc, "V: %d TL",eeprom_ventilating_read_cost);  
058D:  MOVLW  56
058E:  MOVWF  44
058F:  CALL   0F4
0590:  MOVLW  3A
0591:  MOVWF  44
0592:  CALL   0F4
0593:  MOVLW  20
0594:  MOVWF  44
0595:  CALL   0F4
0596:  MOVF   37,W
0597:  MOVWF  3E
0598:  MOVLW  18
0599:  MOVWF  3F
059A:  CALL   3F6
059B:  MOVLW  20
059C:  MOVWF  44
059D:  CALL   0F4
059E:  MOVLW  54
059F:  MOVWF  44
05A0:  CALL   0F4
05A1:  MOVLW  4C
05A2:  MOVWF  44
05A3:  CALL   0F4
....................       lcd_gotoxy(8,8); 
05A4:  MOVLW  08
05A5:  MOVWF  45
05A6:  MOVWF  46
05A7:  CALL   0E2
....................       printf(lcd_putc, " P: %d TL",eeprom_polishing_read_cost);  
05A8:  MOVLW  09
05A9:  BSF    03.6
05AA:  MOVWF  0D
05AB:  MOVLW  00
05AC:  MOVWF  0F
05AD:  BCF    03.0
05AE:  MOVLW  04
05AF:  BCF    03.6
05B0:  MOVWF  3E
05B1:  CALL   44D
05B2:  MOVF   38,W
05B3:  MOVWF  3E
05B4:  MOVLW  18
05B5:  MOVWF  3F
05B6:  CALL   3F6
05B7:  MOVLW  20
05B8:  MOVWF  44
05B9:  CALL   0F4
05BA:  MOVLW  54
05BB:  MOVWF  44
05BC:  CALL   0F4
05BD:  MOVLW  4C
05BE:  MOVWF  44
05BF:  CALL   0F4
05C0:  BCF    0A.3
05C1:  BCF    0A.4
05C2:  GOTO   628 (RETURN)
....................         
.................... } 
....................  
.................... //!//will be implemented 
.................... void Read_EEPROMVariables_from_EEPROMregs(){ 
....................      
....................     // NE ZAMAN NEXT BUTONUNA BASILIR O ZAMAN SEÇÝM YAPILIR 
....................     // IndexOfReadMemory butonun üzerinde bulunduðu yer(next demeden önce) 
....................      
....................         if(ClientNumber == 0) 
*
04A4:  MOVF   30,F
04A5:  BTFSS  03.2
04A6:  GOTO   4F7
....................         { 
....................                    
....................             eeprom_foaming_read_cost     = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+4) );   
04A7:  MOVLW  01
04A8:  SUBWF  3B,W
04A9:  MOVWF  77
04AA:  RLF    77,F
04AB:  RLF    77,F
04AC:  MOVLW  FC
04AD:  ANDWF  77,F
04AE:  MOVF   77,W
04AF:  ADDLW  04
04B0:  MOVWF  3E
04B1:  MOVF   3E,W
04B2:  BSF    03.6
04B3:  MOVWF  0D
04B4:  BSF    03.5
04B5:  BCF    0C.7
04B6:  BSF    0C.0
04B7:  BCF    03.5
04B8:  MOVF   0C,W
04B9:  BCF    03.6
04BA:  MOVWF  35
....................             eeprom_washing_read_cost     = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+5) ); 
04BB:  MOVLW  01
04BC:  SUBWF  3B,W
04BD:  MOVWF  77
04BE:  RLF    77,F
04BF:  RLF    77,F
04C0:  MOVLW  FC
04C1:  ANDWF  77,F
04C2:  MOVF   77,W
04C3:  ADDLW  05
04C4:  MOVWF  3E
04C5:  MOVF   3E,W
04C6:  BSF    03.6
04C7:  MOVWF  0D
04C8:  BSF    03.5
04C9:  BCF    0C.7
04CA:  BSF    0C.0
04CB:  BCF    03.5
04CC:  MOVF   0C,W
04CD:  BCF    03.6
04CE:  MOVWF  36
....................             eeprom_ventilating_read_cost = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+6) ); 
04CF:  MOVLW  01
04D0:  SUBWF  3B,W
04D1:  MOVWF  77
04D2:  RLF    77,F
04D3:  RLF    77,F
04D4:  MOVLW  FC
04D5:  ANDWF  77,F
04D6:  MOVF   77,W
04D7:  ADDLW  06
04D8:  MOVWF  3E
04D9:  MOVF   3E,W
04DA:  BSF    03.6
04DB:  MOVWF  0D
04DC:  BSF    03.5
04DD:  BCF    0C.7
04DE:  BSF    0C.0
04DF:  BCF    03.5
04E0:  MOVF   0C,W
04E1:  BCF    03.6
04E2:  MOVWF  37
....................             eeprom_polishing_read_cost   = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+7) ); 
04E3:  MOVLW  01
04E4:  SUBWF  3B,W
04E5:  MOVWF  77
04E6:  RLF    77,F
04E7:  RLF    77,F
04E8:  MOVLW  FC
04E9:  ANDWF  77,F
04EA:  MOVF   77,W
04EB:  ADDLW  07
04EC:  MOVWF  3E
04ED:  MOVF   3E,W
04EE:  BSF    03.6
04EF:  MOVWF  0D
04F0:  BSF    03.5
04F1:  BCF    0C.7
04F2:  BSF    0C.0
04F3:  BCF    03.5
04F4:  MOVF   0C,W
04F5:  BCF    03.6
04F6:  MOVWF  38
....................       
....................         } 
....................          
....................         if(ClientNumber == 1){ 
04F7:  DECFSZ 30,W
04F8:  GOTO   54D
....................          
....................             eeprom_foaming_read_cost     = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+1) );   
04F9:  MOVLW  01
04FA:  SUBWF  3B,W
04FB:  MOVWF  77
04FC:  RLF    77,F
04FD:  RLF    77,F
04FE:  MOVLW  FC
04FF:  ANDWF  77,F
0500:  MOVF   77,W
0501:  ADDLW  01
0502:  ADDLW  82
0503:  MOVWF  3E
0504:  MOVF   3E,W
0505:  BSF    03.6
0506:  MOVWF  0D
0507:  BSF    03.5
0508:  BCF    0C.7
0509:  BSF    0C.0
050A:  BCF    03.5
050B:  MOVF   0C,W
050C:  BCF    03.6
050D:  MOVWF  35
....................             eeprom_washing_read_cost     = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+2) ); 
050E:  MOVLW  01
050F:  SUBWF  3B,W
0510:  MOVWF  77
0511:  RLF    77,F
0512:  RLF    77,F
0513:  MOVLW  FC
0514:  ANDWF  77,F
0515:  MOVF   77,W
0516:  ADDLW  02
0517:  ADDLW  82
0518:  MOVWF  3E
0519:  MOVF   3E,W
051A:  BSF    03.6
051B:  MOVWF  0D
051C:  BSF    03.5
051D:  BCF    0C.7
051E:  BSF    0C.0
051F:  BCF    03.5
0520:  MOVF   0C,W
0521:  BCF    03.6
0522:  MOVWF  36
....................             eeprom_ventilating_read_cost = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+3) ); 
0523:  MOVLW  01
0524:  SUBWF  3B,W
0525:  MOVWF  77
0526:  RLF    77,F
0527:  RLF    77,F
0528:  MOVLW  FC
0529:  ANDWF  77,F
052A:  MOVF   77,W
052B:  ADDLW  03
052C:  ADDLW  82
052D:  MOVWF  3E
052E:  MOVF   3E,W
052F:  BSF    03.6
0530:  MOVWF  0D
0531:  BSF    03.5
0532:  BCF    0C.7
0533:  BSF    0C.0
0534:  BCF    03.5
0535:  MOVF   0C,W
0536:  BCF    03.6
0537:  MOVWF  37
....................             eeprom_polishing_read_cost   = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+4) ); 
0538:  MOVLW  01
0539:  SUBWF  3B,W
053A:  MOVWF  77
053B:  RLF    77,F
053C:  RLF    77,F
053D:  MOVLW  FC
053E:  ANDWF  77,F
053F:  MOVF   77,W
0540:  ADDLW  04
0541:  ADDLW  82
0542:  MOVWF  3E
0543:  MOVF   3E,W
0544:  BSF    03.6
0545:  MOVWF  0D
0546:  BSF    03.5
0547:  BCF    0C.7
0548:  BSF    0C.0
0549:  BCF    03.5
054A:  MOVF   0C,W
054B:  BCF    03.6
054C:  MOVWF  38
....................          
....................         } 
....................  
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... void displayProcessCompletionStatus(){ 
....................  
....................       lcd_gotoxy(2,1); 
*
019B:  MOVLW  02
019C:  MOVWF  45
019D:  MOVLW  01
019E:  MOVWF  46
019F:  CALL   0E2
....................       printf(lcd_putc, "Operasyon Sonu");    
01A0:  MOVLW  0E
01A1:  BSF    03.6
01A2:  MOVWF  0D
01A3:  MOVLW  00
01A4:  MOVWF  0F
01A5:  BCF    03.6
01A6:  CALL   120
....................       delay_ms(2000); 
01A7:  MOVLW  08
01A8:  MOVWF  3E
01A9:  MOVLW  FA
01AA:  MOVWF  45
01AB:  CALL   03D
01AC:  DECFSZ 3E,F
01AD:  GOTO   1A9
....................       printf(lcd_putc, "\f"); 
01AE:  MOVLW  0C
01AF:  MOVWF  44
01B0:  CALL   0F4
....................       lcd_gotoxy(3,1); 
01B1:  MOVLW  03
01B2:  MOVWF  45
01B3:  MOVLW  01
01B4:  MOVWF  46
01B5:  CALL   0E2
....................       printf(lcd_putc, "Islemleriniz");   
01B6:  MOVLW  16
01B7:  BSF    03.6
01B8:  MOVWF  0D
01B9:  MOVLW  00
01BA:  MOVWF  0F
01BB:  BCF    03.6
01BC:  CALL   120
....................       lcd_gotoxy(3,2); 
01BD:  MOVLW  03
01BE:  MOVWF  45
01BF:  MOVLW  02
01C0:  MOVWF  46
01C1:  CALL   0E2
....................       printf(lcd_putc, "Kaydediliyor"); 
01C2:  MOVLW  1D
01C3:  BSF    03.6
01C4:  MOVWF  0D
01C5:  MOVLW  00
01C6:  MOVWF  0F
01C7:  BCF    03.6
01C8:  CALL   120
....................        
....................       loadCostValuesToEEPROMVariables(); 
....................           
....................       delay_ms(1000); 
*
0391:  MOVLW  04
0392:  MOVWF  3E
0393:  MOVLW  FA
0394:  MOVWF  45
0395:  CALL   03D
0396:  DECFSZ 3E,F
0397:  GOTO   393
....................        
....................       printf(lcd_putc, "\f"); 
0398:  MOVLW  0C
0399:  MOVWF  44
039A:  CALL   0F4
....................       lcd_gotoxy(5,1); 
039B:  MOVLW  05
039C:  MOVWF  45
039D:  MOVLW  01
039E:  MOVWF  46
039F:  CALL   0E2
....................       printf(lcd_putc, "Kayitlar");   
03A0:  MOVLW  24
03A1:  BSF    03.6
03A2:  MOVWF  0D
03A3:  MOVLW  00
03A4:  MOVWF  0F
03A5:  BCF    03.6
03A6:  CALL   120
....................       lcd_gotoxy(4,2); 
03A7:  MOVLW  04
03A8:  MOVWF  45
03A9:  MOVLW  02
03AA:  MOVWF  46
03AB:  CALL   0E2
....................       printf(lcd_putc, "Tamamlandi"); 
03AC:  MOVLW  29
03AD:  BSF    03.6
03AE:  MOVWF  0D
03AF:  MOVLW  00
03B0:  MOVWF  0F
03B1:  BCF    03.6
03B2:  CALL   120
....................        
....................       delay_ms(1000); 
03B3:  MOVLW  04
03B4:  MOVWF  3E
03B5:  MOVLW  FA
03B6:  MOVWF  45
03B7:  CALL   03D
03B8:  DECFSZ 3E,F
03B9:  GOTO   3B5
....................        
....................       printf(lcd_putc, "\f"); 
03BA:  MOVLW  0C
03BB:  MOVWF  44
03BC:  CALL   0F4
....................       lcd_gotoxy(4,1); 
03BD:  MOVLW  04
03BE:  MOVWF  45
03BF:  MOVLW  01
03C0:  MOVWF  46
03C1:  CALL   0E2
....................       printf(lcd_putc, "Ana Menuye");   
03C2:  MOVLW  2F
03C3:  BSF    03.6
03C4:  MOVWF  0D
03C5:  MOVLW  00
03C6:  MOVWF  0F
03C7:  BCF    03.6
03C8:  CALL   120
....................       lcd_gotoxy(2,2); 
03C9:  MOVLW  02
03CA:  MOVWF  45
03CB:  MOVWF  46
03CC:  CALL   0E2
....................       printf(lcd_putc, "Yonlendiriliyor"); 
03CD:  MOVLW  35
03CE:  BSF    03.6
03CF:  MOVWF  0D
03D0:  MOVLW  00
03D1:  MOVWF  0F
03D2:  BCF    03.6
03D3:  CALL   120
....................        
....................       delay_ms(1000); 
03D4:  MOVLW  04
03D5:  MOVWF  3E
03D6:  MOVLW  FA
03D7:  MOVWF  45
03D8:  CALL   03D
03D9:  DECFSZ 3E,F
03DA:  GOTO   3D6
....................       printf(lcd_putc, "\f"); 
03DB:  MOVLW  0C
03DC:  MOVWF  44
03DD:  CALL   0F4
03DE:  BCF    0A.3
03DF:  BCF    0A.4
03E0:  GOTO   627 (RETURN)
....................        
.................... } 
....................  
....................  
....................  
.................... //will be implemented 
.................... void loadCostValuesToEEPROMVariables(){ 
....................  
....................       //Cost values to be written 
....................       eeprom_foaming_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Foaming)/10)*2); 
*
01C9:  RLF    30,W
01CA:  MOVWF  77
01CB:  RLF    77,F
01CC:  RLF    77,F
01CD:  MOVLW  F8
01CE:  ANDWF  77,F
01CF:  MOVF   77,W
01D0:  ADDLW  20
01D1:  MOVWF  04
01D2:  BCF    03.7
01D3:  INCF   04,F
01D4:  MOVF   00,W
01D5:  MOVWF  3F
01D6:  DECF   04,F
01D7:  MOVF   00,W
01D8:  MOVWF  3E
01D9:  MOVF   3F,W
01DA:  MOVWF  41
01DB:  MOVF   3E,W
01DC:  MOVWF  40
01DD:  CLRF   43
01DE:  MOVLW  0A
01DF:  MOVWF  42
01E0:  CALL   176
01E1:  MOVF   79,W
01E2:  MOVWF  3F
01E3:  BCF    03.0
01E4:  RLF    78,W
01E5:  MOVWF  79
01E6:  RLF    3F,W
01E7:  MOVWF  7A
01E8:  MOVF   79,W
01E9:  MOVWF  31
....................       eeprom_washing_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Washing)/10)*2); 
01EA:  RLF    30,W
01EB:  MOVWF  77
01EC:  RLF    77,F
01ED:  RLF    77,F
01EE:  MOVLW  F8
01EF:  ANDWF  77,F
01F0:  MOVF   77,W
01F1:  ADDLW  02
01F2:  ADDLW  20
01F3:  MOVWF  04
01F4:  BCF    03.7
01F5:  INCF   04,F
01F6:  MOVF   00,W
01F7:  MOVWF  3F
01F8:  DECF   04,F
01F9:  MOVF   00,W
01FA:  MOVWF  3E
01FB:  MOVF   3F,W
01FC:  MOVWF  41
01FD:  MOVF   3E,W
01FE:  MOVWF  40
01FF:  CLRF   43
0200:  MOVLW  0A
0201:  MOVWF  42
0202:  CALL   176
0203:  MOVF   79,W
0204:  MOVWF  3F
0205:  BCF    03.0
0206:  RLF    78,W
0207:  MOVWF  79
0208:  RLF    3F,W
0209:  MOVWF  7A
020A:  MOVF   79,W
020B:  MOVWF  32
....................       eeprom_ventilating_written_cost = (unsigned int8)(((MikroClient[ClientNumber].time_Ventilation)/10)*2); 
020C:  RLF    30,W
020D:  MOVWF  77
020E:  RLF    77,F
020F:  RLF    77,F
0210:  MOVLW  F8
0211:  ANDWF  77,F
0212:  MOVF   77,W
0213:  ADDLW  04
0214:  ADDLW  20
0215:  MOVWF  04
0216:  BCF    03.7
0217:  INCF   04,F
0218:  MOVF   00,W
0219:  MOVWF  3F
021A:  DECF   04,F
021B:  MOVF   00,W
021C:  MOVWF  3E
021D:  MOVF   3F,W
021E:  MOVWF  41
021F:  MOVF   3E,W
0220:  MOVWF  40
0221:  CLRF   43
0222:  MOVLW  0A
0223:  MOVWF  42
0224:  CALL   176
0225:  MOVF   79,W
0226:  MOVWF  3F
0227:  BCF    03.0
0228:  RLF    78,W
0229:  MOVWF  79
022A:  RLF    3F,W
022B:  MOVWF  7A
022C:  MOVF   79,W
022D:  MOVWF  33
....................       eeprom_polishing_written_cost   = (unsigned int8)((MikroClient[ClientNumber].mililitre_Polishing)*15); 
022E:  RLF    30,W
022F:  MOVWF  77
0230:  RLF    77,F
0231:  RLF    77,F
0232:  MOVLW  F8
0233:  ANDWF  77,F
0234:  MOVF   77,W
0235:  ADDLW  06
0236:  ADDLW  20
0237:  MOVWF  04
0238:  BCF    03.7
0239:  INCF   04,F
023A:  MOVF   00,W
023B:  MOVWF  3F
023C:  DECF   04,F
023D:  MOVF   00,W
023E:  MOVWF  3E
023F:  MOVF   3F,W
0240:  MOVWF  41
0241:  MOVF   3E,W
0242:  MOVWF  40
0243:  CLRF   43
0244:  MOVLW  0F
0245:  MOVWF  42
*
025A:  MOVF   78,W
025B:  MOVWF  34
....................       
....................       //Write data to the allocated space for the customer who is using it 
....................       write_EEPROMVariables_to_EEPROMregs(); 
.................... } 
....................  
....................  
.................... //will be implemented 
.................... void write_EEPROMVariables_to_EEPROMregs(){ 
....................  
.................... // Operations will be performed for the relevant customer 
.................... // A new operation will be defined each time the system is activated 
.................... // Example usage: 
.................... // Main Menu -> Registration Process ->NextButton -> Operation 1 -> LCD display view: 
.................... //                                                                [F=32TL    W=12TL] F: foaming     , W: Water 
.................... //                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing 
.................... //                                   ->NextButton -> Operation 2 -> LCD display view: 
.................... //                                                                [F=32TL    W=12TL] F: foaming     , W: Water 
.................... //                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing 
....................  
....................    //Selcuk Bey's ID 
....................    if(ClientNumber == 0){ 
025C:  MOVF   30,F
025D:  BTFSS  03.2
025E:  GOTO   2F4
....................        
....................       //Pull the last address to keep going on 
....................       //The last cursor position address will always be written to the zero address, to ensure that new data does not overwrite previously written data 
....................       Client0_last_address = read_eeprom(eeprom_Client0_systemStartAddress); 
025F:  BSF    03.6
0260:  CLRF   0D
0261:  BSF    03.5
0262:  BCF    0C.7
0263:  BSF    0C.0
0264:  BCF    03.5
0265:  MOVF   0C,W
0266:  BCF    03.6
0267:  MOVWF  39
....................        
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_foaming_written_cost)     ); Client0_last_address++; //Save foaming cost 
0268:  MOVLW  05
0269:  ADDWF  39,W
026A:  MOVWF  3E
026B:  MOVF   0B,W
026C:  MOVWF  77
026D:  BCF    0B.7
026E:  MOVF   3E,W
026F:  BSF    03.6
0270:  MOVWF  0D
0271:  BCF    03.6
0272:  MOVF   31,W
0273:  BSF    03.6
0274:  MOVWF  0C
0275:  BSF    03.5
0276:  BCF    0C.7
0277:  BSF    0C.2
0278:  MOVLW  55
0279:  MOVWF  0D
027A:  MOVLW  AA
027B:  MOVWF  0D
027C:  BSF    0C.1
027D:  BTFSC  0C.1
027E:  GOTO   27D
027F:  BCF    0C.2
0280:  MOVF   77,W
0281:  BCF    03.5
0282:  BCF    03.6
0283:  IORWF  0B,F
0284:  INCF   39,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_washing_written_cost)     ); Client0_last_address++; //Save washing cost 
0285:  MOVLW  05
0286:  ADDWF  39,W
0287:  MOVWF  3E
0288:  MOVF   0B,W
0289:  MOVWF  77
028A:  BCF    0B.7
028B:  MOVF   3E,W
028C:  BSF    03.6
028D:  MOVWF  0D
028E:  BCF    03.6
028F:  MOVF   32,W
0290:  BSF    03.6
0291:  MOVWF  0C
0292:  BSF    03.5
0293:  BCF    0C.7
0294:  BSF    0C.2
0295:  MOVLW  55
0296:  MOVWF  0D
0297:  MOVLW  AA
0298:  MOVWF  0D
0299:  BSF    0C.1
029A:  BTFSC  0C.1
029B:  GOTO   29A
029C:  BCF    0C.2
029D:  MOVF   77,W
029E:  BCF    03.5
029F:  BCF    03.6
02A0:  IORWF  0B,F
02A1:  INCF   39,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_ventilating_written_cost) ); Client0_last_address++; //Save Ventilating cost 
02A2:  MOVLW  05
02A3:  ADDWF  39,W
02A4:  MOVWF  3E
02A5:  MOVF   0B,W
02A6:  MOVWF  77
02A7:  BCF    0B.7
02A8:  MOVF   3E,W
02A9:  BSF    03.6
02AA:  MOVWF  0D
02AB:  BCF    03.6
02AC:  MOVF   33,W
02AD:  BSF    03.6
02AE:  MOVWF  0C
02AF:  BSF    03.5
02B0:  BCF    0C.7
02B1:  BSF    0C.2
02B2:  MOVLW  55
02B3:  MOVWF  0D
02B4:  MOVLW  AA
02B5:  MOVWF  0D
02B6:  BSF    0C.1
02B7:  BTFSC  0C.1
02B8:  GOTO   2B7
02B9:  BCF    0C.2
02BA:  MOVF   77,W
02BB:  BCF    03.5
02BC:  BCF    03.6
02BD:  IORWF  0B,F
02BE:  INCF   39,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_polishing_written_cost)   ); Client0_last_address++; //Save Polishing cost 
02BF:  MOVLW  05
02C0:  ADDWF  39,W
02C1:  MOVWF  3E
02C2:  MOVF   0B,W
02C3:  MOVWF  77
02C4:  BCF    0B.7
02C5:  MOVF   3E,W
02C6:  BSF    03.6
02C7:  MOVWF  0D
02C8:  BCF    03.6
02C9:  MOVF   34,W
02CA:  BSF    03.6
02CB:  MOVWF  0C
02CC:  BSF    03.5
02CD:  BCF    0C.7
02CE:  BSF    0C.2
02CF:  MOVLW  55
02D0:  MOVWF  0D
02D1:  MOVLW  AA
02D2:  MOVWF  0D
02D3:  BSF    0C.1
02D4:  BTFSC  0C.1
02D5:  GOTO   2D4
02D6:  BCF    0C.2
02D7:  MOVF   77,W
02D8:  BCF    03.5
02D9:  BCF    03.6
02DA:  IORWF  0B,F
02DB:  INCF   39,F
....................       write_eeprom( (eeprom_Client0_systemStartAddress                           ), ( Client0_last_address)           );                         //Save cursor location in the client0 start address 
02DC:  MOVF   0B,W
02DD:  MOVWF  77
02DE:  BCF    0B.7
02DF:  BSF    03.6
02E0:  CLRF   0D
02E1:  BCF    03.6
02E2:  MOVF   39,W
02E3:  BSF    03.6
02E4:  MOVWF  0C
02E5:  BSF    03.5
02E6:  BCF    0C.7
02E7:  BSF    0C.2
02E8:  MOVLW  55
02E9:  MOVWF  0D
02EA:  MOVLW  AA
02EB:  MOVWF  0D
02EC:  BSF    0C.1
02ED:  BTFSC  0C.1
02EE:  GOTO   2ED
02EF:  BCF    0C.2
02F0:  MOVF   77,W
02F1:  BCF    03.5
02F2:  BCF    03.6
02F3:  IORWF  0B,F
....................    } 
....................     
....................    if(ClientNumber == 1){ 
02F4:  DECFSZ 30,W
02F5:  GOTO   391
....................        
....................       //Pull the last address to keep going on 
....................       //The last cursor position address will always be written to the zero address, to ensure that new data does not overwrite previously written data 
....................       Client1_last_address = read_eeprom(eeprom_Client1_systemStartAddress); 
02F6:  MOVLW  82
02F7:  BSF    03.6
02F8:  MOVWF  0D
02F9:  BSF    03.5
02FA:  BCF    0C.7
02FB:  BSF    0C.0
02FC:  BCF    03.5
02FD:  MOVF   0C,W
02FE:  BCF    03.6
02FF:  MOVWF  3A
....................        
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_foaming_written_cost)     ); Client1_last_address++; //Save foaming cost 
0300:  MOVLW  82
0301:  ADDWF  3A,W
0302:  ADDLW  01
0303:  MOVWF  3E
0304:  MOVF   0B,W
0305:  MOVWF  77
0306:  BCF    0B.7
0307:  MOVF   3E,W
0308:  BSF    03.6
0309:  MOVWF  0D
030A:  BCF    03.6
030B:  MOVF   31,W
030C:  BSF    03.6
030D:  MOVWF  0C
030E:  BSF    03.5
030F:  BCF    0C.7
0310:  BSF    0C.2
0311:  MOVLW  55
0312:  MOVWF  0D
0313:  MOVLW  AA
0314:  MOVWF  0D
0315:  BSF    0C.1
0316:  BTFSC  0C.1
0317:  GOTO   316
0318:  BCF    0C.2
0319:  MOVF   77,W
031A:  BCF    03.5
031B:  BCF    03.6
031C:  IORWF  0B,F
031D:  INCF   3A,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_washing_written_cost)     ); Client1_last_address++; //Save washing cost 
031E:  MOVLW  82
031F:  ADDWF  3A,W
0320:  ADDLW  01
0321:  MOVWF  3E
0322:  MOVF   0B,W
0323:  MOVWF  77
0324:  BCF    0B.7
0325:  MOVF   3E,W
0326:  BSF    03.6
0327:  MOVWF  0D
0328:  BCF    03.6
0329:  MOVF   32,W
032A:  BSF    03.6
032B:  MOVWF  0C
032C:  BSF    03.5
032D:  BCF    0C.7
032E:  BSF    0C.2
032F:  MOVLW  55
0330:  MOVWF  0D
0331:  MOVLW  AA
0332:  MOVWF  0D
0333:  BSF    0C.1
0334:  BTFSC  0C.1
0335:  GOTO   334
0336:  BCF    0C.2
0337:  MOVF   77,W
0338:  BCF    03.5
0339:  BCF    03.6
033A:  IORWF  0B,F
033B:  INCF   3A,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_ventilating_written_cost) ); Client1_last_address++; //Save Ventilating cost 
033C:  MOVLW  82
033D:  ADDWF  3A,W
033E:  ADDLW  01
033F:  MOVWF  3E
0340:  MOVF   0B,W
0341:  MOVWF  77
0342:  BCF    0B.7
0343:  MOVF   3E,W
0344:  BSF    03.6
0345:  MOVWF  0D
0346:  BCF    03.6
0347:  MOVF   33,W
0348:  BSF    03.6
0349:  MOVWF  0C
034A:  BSF    03.5
034B:  BCF    0C.7
034C:  BSF    0C.2
034D:  MOVLW  55
034E:  MOVWF  0D
034F:  MOVLW  AA
0350:  MOVWF  0D
0351:  BSF    0C.1
0352:  BTFSC  0C.1
0353:  GOTO   352
0354:  BCF    0C.2
0355:  MOVF   77,W
0356:  BCF    03.5
0357:  BCF    03.6
0358:  IORWF  0B,F
0359:  INCF   3A,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_polishing_written_cost)   ); Client1_last_address++; //Save Polishing cost 
035A:  MOVLW  82
035B:  ADDWF  3A,W
035C:  ADDLW  01
035D:  MOVWF  3E
035E:  MOVF   0B,W
035F:  MOVWF  77
0360:  BCF    0B.7
0361:  MOVF   3E,W
0362:  BSF    03.6
0363:  MOVWF  0D
0364:  BCF    03.6
0365:  MOVF   34,W
0366:  BSF    03.6
0367:  MOVWF  0C
0368:  BSF    03.5
0369:  BCF    0C.7
036A:  BSF    0C.2
036B:  MOVLW  55
036C:  MOVWF  0D
036D:  MOVLW  AA
036E:  MOVWF  0D
036F:  BSF    0C.1
0370:  BTFSC  0C.1
0371:  GOTO   370
0372:  BCF    0C.2
0373:  MOVF   77,W
0374:  BCF    03.5
0375:  BCF    03.6
0376:  IORWF  0B,F
0377:  INCF   3A,F
....................       write_eeprom( (eeprom_Client1_systemStartAddress                           ), ( Client1_last_address)           );                         //Save cursor location in the client0 start address 
0378:  MOVF   0B,W
0379:  MOVWF  77
037A:  BCF    0B.7
037B:  MOVLW  82
037C:  BSF    03.6
037D:  MOVWF  0D
037E:  BCF    03.6
037F:  MOVF   3A,W
0380:  BSF    03.6
0381:  MOVWF  0C
0382:  BSF    03.5
0383:  BCF    0C.7
0384:  BSF    0C.2
0385:  MOVLW  55
0386:  MOVWF  0D
0387:  MOVLW  AA
0388:  MOVWF  0D
0389:  BSF    0C.1
038A:  BTFSC  0C.1
038B:  GOTO   38A
038C:  BCF    0C.2
038D:  MOVF   77,W
038E:  BCF    03.5
038F:  BCF    03.6
0390:  IORWF  0B,F
....................     
....................    } 
....................     
.................... } 

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
