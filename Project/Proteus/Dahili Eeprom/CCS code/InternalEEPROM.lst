CCS PCM C Compiler, Version 5.049, 5967               29-Ara-24 18:34

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Proteus\Dahili Eeprom\CCS code\InternalEEPROM.lst

               ROM used:   571 words (7%)
                           Largest free fragment is 2048
               RAM used:   30 (8%) at main() level
                           43 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   21D
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 4F,38
0005:  DATA 65,39
0006:  DATA E1,39
0007:  DATA F9,37
0008:  DATA 6E,10
0009:  DATA D3,37
000A:  DATA EE,3A
000B:  DATA 00,00
000C:  DATA C9,39
000D:  DATA EC,32
000E:  DATA 6D,36
000F:  DATA 65,39
0010:  DATA 69,37
0011:  DATA 69,3D
0012:  DATA 00,01
0013:  DATA CB,30
0014:  DATA 79,32
0015:  DATA 65,32
0016:  DATA 69,36
0017:  DATA E9,3C
0018:  DATA 6F,39
0019:  DATA 00,01
001A:  DATA CB,30
001B:  DATA F9,34
001C:  DATA 74,36
001D:  DATA 61,39
001E:  DATA 00,01
001F:  DATA D4,30
0020:  DATA ED,30
0021:  DATA 6D,36
0022:  DATA 61,37
0023:  DATA E4,34
0024:  DATA 00,01
0025:  DATA 41,37
0026:  DATA 61,10
0027:  DATA CD,32
0028:  DATA EE,3A
0029:  DATA F9,32
002A:  DATA 00,01
002B:  DATA D9,37
002C:  DATA 6E,36
002D:  DATA 65,37
002E:  DATA E4,34
002F:  DATA F2,34
0030:  DATA EC,34
0031:  DATA F9,37
0032:  DATA 72,00
*
0116:  MOVF   0B,W
0117:  MOVWF  39
0118:  BCF    0B.7
0119:  BSF    03.5
011A:  BSF    03.6
011B:  BSF    0C.7
011C:  BSF    0C.0
011D:  NOP
011E:  NOP
011F:  BCF    03.5
0120:  BCF    03.6
0121:  BTFSC  39.7
0122:  BSF    0B.7
0123:  BSF    03.6
0124:  MOVF   0C,W
0125:  ANDLW  7F
0126:  BTFSC  03.2
0127:  GOTO   16A
0128:  BCF    03.6
0129:  MOVWF  39
012A:  BSF    03.6
012B:  MOVF   0D,W
012C:  BCF    03.6
012D:  MOVWF  3A
012E:  BSF    03.6
012F:  MOVF   0F,W
0130:  BCF    03.6
0131:  MOVWF  3B
0132:  MOVF   39,W
0133:  MOVWF  3C
0134:  CALL   0EA
0135:  MOVF   3A,W
0136:  BSF    03.6
0137:  MOVWF  0D
0138:  BCF    03.6
0139:  MOVF   3B,W
013A:  BSF    03.6
013B:  MOVWF  0F
013C:  BCF    03.6
013D:  MOVF   0B,W
013E:  MOVWF  3C
013F:  BCF    0B.7
0140:  BSF    03.5
0141:  BSF    03.6
0142:  BSF    0C.7
0143:  BSF    0C.0
0144:  NOP
0145:  NOP
0146:  BCF    03.5
0147:  BCF    03.6
0148:  BTFSC  3C.7
0149:  BSF    0B.7
014A:  BSF    03.6
014B:  RLF    0C,W
014C:  RLF    0E,W
014D:  ANDLW  7F
014E:  BTFSC  03.2
014F:  GOTO   16A
0150:  BCF    03.6
0151:  MOVWF  39
0152:  BSF    03.6
0153:  MOVF   0D,W
0154:  BCF    03.6
0155:  MOVWF  3A
0156:  BSF    03.6
0157:  MOVF   0F,W
0158:  BCF    03.6
0159:  MOVWF  3B
015A:  MOVF   39,W
015B:  MOVWF  3C
015C:  CALL   0EA
015D:  MOVF   3A,W
015E:  BSF    03.6
015F:  MOVWF  0D
0160:  BCF    03.6
0161:  MOVF   3B,W
0162:  BSF    03.6
0163:  MOVWF  0F
0164:  INCF   0D,F
0165:  BTFSC  03.2
0166:  INCF   0F,F
0167:  BCF    03.6
0168:  GOTO   116
0169:  BSF    03.6
016A:  BCF    03.6
016B:  RETURN
....................  
.................... #list 
....................  
....................  
.................... //--> FUSES 
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... //--> USEs 
.................... #use delay(clock=4M) 
*
0033:  MOVLW  3E
0034:  MOVWF  04
0035:  BCF    03.7
0036:  MOVF   00,W
0037:  BTFSC  03.2
0038:  GOTO   047
0039:  MOVLW  01
003A:  MOVWF  78
003B:  CLRF   77
003C:  DECFSZ 77,F
003D:  GOTO   03C
003E:  DECFSZ 78,F
003F:  GOTO   03B
0040:  MOVLW  4A
0041:  MOVWF  77
0042:  DECFSZ 77,F
0043:  GOTO   042
0044:  GOTO   045
0045:  DECFSZ 00,F
0046:  GOTO   039
0047:  RETURN
....................  
....................  
.................... //--> INCLUDES 
.................... #include <lcd.c>    
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0060:  MOVLW  0F
0061:  BSF    03.5
0062:  ANDWF  08,W
0063:  IORLW  F0
0064:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0065:  BCF    03.5
0066:  BSF    08.2
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_enable(1); 
0068:  BSF    08.0
....................    delay_cycles(1); 
0069:  NOP
....................    high = lcd_read_nibble(); 
006A:  CALL   054
006B:  MOVF   78,W
006C:  MOVWF  44
....................        
....................    lcd_output_enable(0); 
006D:  BCF    08.0
....................    delay_cycles(1); 
006E:  NOP
....................    lcd_output_enable(1); 
006F:  BSF    08.0
....................    delay_us(1); 
0070:  NOP
....................    low = lcd_read_nibble(); 
0071:  CALL   054
0072:  MOVF   78,W
0073:  MOVWF  43
....................        
....................    lcd_output_enable(0); 
0074:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0075:  MOVLW  0F
0076:  BSF    03.5
0077:  ANDWF  08,W
0078:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0079:  BCF    03.5
007A:  SWAPF  44,W
007B:  MOVWF  77
007C:  MOVLW  F0
007D:  ANDWF  77,F
007E:  MOVF   77,W
007F:  IORWF  43,W
0080:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0054:  MOVF   08,W
0055:  MOVWF  77
0056:  SWAPF  08,W
0057:  ANDLW  0F
0058:  MOVWF  78
....................   #endif 
0059:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0048:  SWAPF  44,W
0049:  ANDLW  F0
004A:  MOVWF  77
004B:  MOVLW  0F
004C:  ANDWF  08,W
004D:  IORWF  77,W
004E:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
004F:  NOP
....................    lcd_output_enable(1); 
0050:  BSF    08.0
....................    delay_us(2); 
0051:  GOTO   052
....................    lcd_output_enable(0); 
0052:  BCF    08.0
0053:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
005A:  BSF    03.5
005B:  BCF    08.0
....................    lcd_rs_tris(); 
005C:  BCF    08.1
....................    lcd_rw_tris(); 
005D:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
005E:  BCF    03.5
005F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0081:  MOVF   78,W
0082:  MOVWF  43
0083:  BTFSC  43.7
0084:  GOTO   060
....................    lcd_output_rs(address); 
0085:  BTFSS  41.0
0086:  BCF    08.1
0087:  BTFSC  41.0
0088:  BSF    08.1
....................    delay_cycles(1); 
0089:  NOP
....................    lcd_output_rw(0); 
008A:  BCF    08.2
....................    delay_cycles(1); 
008B:  NOP
....................    lcd_output_enable(0); 
008C:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
008D:  SWAPF  42,W
008E:  MOVWF  43
008F:  MOVLW  0F
0090:  ANDWF  43,F
0091:  MOVF   43,W
0092:  MOVWF  44
0093:  CALL   048
....................    lcd_send_nibble(n & 0xf); 
0094:  MOVF   42,W
0095:  ANDLW  0F
0096:  MOVWF  43
0097:  MOVWF  44
0098:  CALL   048
0099:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
009A:  MOVLW  28
009B:  MOVWF  3A
009C:  MOVLW  0C
009D:  MOVWF  3B
009E:  MOVLW  01
009F:  MOVWF  3C
00A0:  MOVLW  06
00A1:  MOVWF  3D
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00A2:  BCF    08.0
....................    lcd_output_rs(0); 
00A3:  BCF    08.1
....................    lcd_output_rw(0); 
00A4:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00A5:  MOVLW  0F
00A6:  BSF    03.5
00A7:  ANDWF  08,W
00A8:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00A9:  BCF    08.0
....................    lcd_rs_tris(); 
00AA:  BCF    08.1
....................    lcd_rw_tris(); 
00AB:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00AC:  MOVLW  0F
00AD:  BCF    03.5
00AE:  MOVWF  3E
00AF:  CALL   033
....................    for(i=1;i<=3;++i) 
00B0:  MOVLW  01
00B1:  MOVWF  39
00B2:  MOVF   39,W
00B3:  SUBLW  03
00B4:  BTFSS  03.0
00B5:  GOTO   0BE
....................    { 
....................        lcd_send_nibble(3); 
00B6:  MOVLW  03
00B7:  MOVWF  44
00B8:  CALL   048
....................        delay_ms(5); 
00B9:  MOVLW  05
00BA:  MOVWF  3E
00BB:  CALL   033
00BC:  INCF   39,F
00BD:  GOTO   0B2
....................    } 
....................     
....................    lcd_send_nibble(2); 
00BE:  MOVLW  02
00BF:  MOVWF  44
00C0:  CALL   048
....................    delay_ms(5); 
00C1:  MOVLW  05
00C2:  MOVWF  3E
00C3:  CALL   033
....................    for(i=0;i<=3;++i) 
00C4:  CLRF   39
00C5:  MOVF   39,W
00C6:  SUBLW  03
00C7:  BTFSS  03.0
00C8:  GOTO   0D5
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C9:  MOVLW  3A
00CA:  ADDWF  39,W
00CB:  MOVWF  04
00CC:  BCF    03.7
00CD:  MOVF   00,W
00CE:  MOVWF  3E
00CF:  CLRF   41
00D0:  MOVF   3E,W
00D1:  MOVWF  42
00D2:  CALL   05A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00D3:  INCF   39,F
00D4:  GOTO   0C5
00D5:  BCF    0A.3
00D6:  BCF    0A.4
00D7:  GOTO   238 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00D8:  DECFSZ 3E,W
00D9:  GOTO   0DB
00DA:  GOTO   0DE
....................       address=LCD_LINE_TWO; 
00DB:  MOVLW  40
00DC:  MOVWF  3F
00DD:  GOTO   0DF
....................    else 
....................       address=0; 
00DE:  CLRF   3F
....................       
....................    address+=x-1; 
00DF:  MOVLW  01
00E0:  SUBWF  3D,W
00E1:  ADDWF  3F,F
....................    lcd_send_byte(0,0x80|address); 
00E2:  MOVF   3F,W
00E3:  IORLW  80
00E4:  MOVWF  40
00E5:  CLRF   41
00E6:  MOVF   40,W
00E7:  MOVWF  42
00E8:  CALL   05A
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E9:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00EA:  MOVF   3C,W
00EB:  XORLW  07
00EC:  BTFSC  03.2
00ED:  GOTO   0F8
00EE:  XORLW  0B
00EF:  BTFSC  03.2
00F0:  GOTO   0FD
00F1:  XORLW  06
00F2:  BTFSC  03.2
00F3:  GOTO   105
00F4:  XORLW  02
00F5:  BTFSC  03.2
00F6:  GOTO   10B
00F7:  GOTO   110
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F8:  MOVLW  01
00F9:  MOVWF  3D
00FA:  MOVWF  3E
00FB:  CALL   0D8
00FC:  GOTO   115
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00FD:  CLRF   41
00FE:  MOVLW  01
00FF:  MOVWF  42
0100:  CALL   05A
....................                      delay_ms(2); 
0101:  MOVLW  02
0102:  MOVWF  3E
0103:  CALL   033
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0104:  GOTO   115
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0105:  MOVLW  01
0106:  MOVWF  3D
0107:  MOVLW  02
0108:  MOVWF  3E
0109:  CALL   0D8
010A:  GOTO   115
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
010B:  CLRF   41
010C:  MOVLW  10
010D:  MOVWF  42
010E:  CALL   05A
010F:  GOTO   115
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0110:  MOVLW  01
0111:  MOVWF  41
0112:  MOVF   3C,W
0113:  MOVWF  42
0114:  CALL   05A
....................      #endif 
....................    } 
0115:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... typedef struct{ 
....................  
.................... unsigned long int time_Foaming;         //Process number-1 
.................... unsigned long int time_Washing;         //Process number-2 
.................... unsigned long int time_Ventilation;     //Process number-3 
.................... unsigned long int mililitre_Polishing;       //Process number-4  
....................  
.................... }MikroleumClient_HandleTypeDef; 
....................  
....................  
.................... MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records 
....................                                               //MikroClient[0] Mr. Selcuk //ClientNumber=0 
....................                                               //MikroClient[1] Mr. Emre   //ClientNumber=1 
.................... int8 ClientNumber;                            // Will be used as given on the right --> MikroClient[ClientNumber]   
....................  
....................  
.................... //Will be implemented// 
....................  
.................... //------------ VAR --> INTERNAL EEPROM <-- VAR ------------// 
.................... //EEPROM variables to store the values selected by the user 
.................... unsigned int8 eeprom_foaming     = 0; 
.................... unsigned int8 eeprom_washing     = 0; 
.................... unsigned int8 eeprom_ventilating = 0; 
.................... unsigned int8 eeprom_Polishing   = 0; 
....................  
.................... //Keeps track of the last written address in EEPROM for each customer 
.................... unsigned int8 eeprom_Client0_last_written_address; //For Selçuk Bey's account 
.................... unsigned int8 eeprom_Client1_last_written_address; //For Emre Bey's account 
....................  
.................... //Will be implemented into // 
.................... /* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */ 
.................... void displayEEPROMDataOnLCD(void); 
....................  
.................... void main(void)  
*
021D:  MOVF   03,W
021E:  ANDLW  1F
021F:  MOVWF  03
0220:  CLRF   31
0221:  CLRF   32
0222:  CLRF   33
0223:  CLRF   34
0224:  CLRF   38
0225:  CLRF   37
0226:  BSF    03.5
0227:  BSF    03.6
0228:  MOVF   09,W
0229:  ANDLW  C0
022A:  MOVWF  09
022B:  BCF    03.6
022C:  BCF    1F.4
022D:  BCF    1F.5
022E:  MOVLW  00
022F:  BSF    03.6
0230:  MOVWF  08
0231:  BCF    03.5
0232:  CLRF   07
0233:  CLRF   08
0234:  CLRF   09
0235:  BCF    03.7
.................... { 
....................  
....................       lcd_init(); // LCD ekranýmýzý baþlatacak 
0236:  BCF    03.6
0237:  GOTO   09A
....................  
....................       //Retrieve records and inform the customer 
....................       displayEEPROMDataOnLCD(); 
0238:  GOTO   16C
....................        
....................        
....................        
....................        
....................              
....................  while(1) 
....................  { 
0239:  GOTO   239
....................       
....................  } 
.................... } 
....................  
023A:  SLEEP
.................... //Will be implemented// 
.................... void displayEEPROMDataOnLCD(){ 
....................  
....................       lcd_gotoxy(2,1); 
*
016C:  MOVLW  02
016D:  MOVWF  3D
016E:  MOVLW  01
016F:  MOVWF  3E
0170:  CALL   0D8
....................       printf(lcd_putc, "Operasyon Sonu");    
0171:  MOVLW  04
0172:  BSF    03.6
0173:  MOVWF  0D
0174:  MOVLW  00
0175:  MOVWF  0F
0176:  BCF    03.6
0177:  CALL   116
....................       delay_ms(2000); 
0178:  MOVLW  08
0179:  MOVWF  39
017A:  MOVLW  FA
017B:  MOVWF  3E
017C:  CALL   033
017D:  DECFSZ 39,F
017E:  GOTO   17A
....................       printf(lcd_putc, "\f"); 
017F:  MOVLW  0C
0180:  MOVWF  3C
0181:  CALL   0EA
....................       lcd_gotoxy(3,1); 
0182:  MOVLW  03
0183:  MOVWF  3D
0184:  MOVLW  01
0185:  MOVWF  3E
0186:  CALL   0D8
....................       printf(lcd_putc, "Islemleriniz");   
0187:  MOVLW  0C
0188:  BSF    03.6
0189:  MOVWF  0D
018A:  MOVLW  00
018B:  MOVWF  0F
018C:  BCF    03.6
018D:  CALL   116
....................       lcd_gotoxy(3,2); 
018E:  MOVLW  03
018F:  MOVWF  3D
0190:  MOVLW  02
0191:  MOVWF  3E
0192:  CALL   0D8
....................       printf(lcd_putc, "Kaydediliyor"); 
0193:  MOVLW  13
0194:  BSF    03.6
0195:  MOVWF  0D
0196:  MOVLW  00
0197:  MOVWF  0F
0198:  BCF    03.6
0199:  CALL   116
....................        
....................       eeprom_foaming     = MikroClient[ClientNumber].time_Foaming; 
019A:  RLF    30,W
019B:  MOVWF  77
019C:  RLF    77,F
019D:  RLF    77,F
019E:  MOVLW  F8
019F:  ANDWF  77,F
01A0:  MOVF   77,W
01A1:  ADDLW  20
01A2:  MOVWF  04
01A3:  BCF    03.7
01A4:  MOVF   00,W
01A5:  MOVWF  31
....................       eeprom_washing     = MikroClient[ClientNumber].time_Washing; 
01A6:  RLF    30,W
01A7:  MOVWF  77
01A8:  RLF    77,F
01A9:  RLF    77,F
01AA:  MOVLW  F8
01AB:  ANDWF  77,F
01AC:  MOVF   77,W
01AD:  ADDLW  02
01AE:  ADDLW  20
01AF:  MOVWF  04
01B0:  BCF    03.7
01B1:  MOVF   00,W
01B2:  MOVWF  32
....................       eeprom_ventilating = MikroClient[ClientNumber].time_Ventilation; 
01B3:  RLF    30,W
01B4:  MOVWF  77
01B5:  RLF    77,F
01B6:  RLF    77,F
01B7:  MOVLW  F8
01B8:  ANDWF  77,F
01B9:  MOVF   77,W
01BA:  ADDLW  04
01BB:  ADDLW  20
01BC:  MOVWF  04
01BD:  BCF    03.7
01BE:  MOVF   00,W
01BF:  MOVWF  33
....................       eeprom_Polishing   = MikroClient[ClientNumber].mililitre_Polishing; 
01C0:  RLF    30,W
01C1:  MOVWF  77
01C2:  RLF    77,F
01C3:  RLF    77,F
01C4:  MOVLW  F8
01C5:  ANDWF  77,F
01C6:  MOVF   77,W
01C7:  ADDLW  06
01C8:  ADDLW  20
01C9:  MOVWF  04
01CA:  BCF    03.7
01CB:  MOVF   00,W
01CC:  MOVWF  34
....................        
....................       delay_ms(1000); 
01CD:  MOVLW  04
01CE:  MOVWF  39
01CF:  MOVLW  FA
01D0:  MOVWF  3E
01D1:  CALL   033
01D2:  DECFSZ 39,F
01D3:  GOTO   1CF
....................        
....................       printf(lcd_putc, "\f"); 
01D4:  MOVLW  0C
01D5:  MOVWF  3C
01D6:  CALL   0EA
....................       lcd_gotoxy(5,1); 
01D7:  MOVLW  05
01D8:  MOVWF  3D
01D9:  MOVLW  01
01DA:  MOVWF  3E
01DB:  CALL   0D8
....................       printf(lcd_putc, "Kayitlar");   
01DC:  MOVLW  1A
01DD:  BSF    03.6
01DE:  MOVWF  0D
01DF:  MOVLW  00
01E0:  MOVWF  0F
01E1:  BCF    03.6
01E2:  CALL   116
....................       lcd_gotoxy(4,2); 
01E3:  MOVLW  04
01E4:  MOVWF  3D
01E5:  MOVLW  02
01E6:  MOVWF  3E
01E7:  CALL   0D8
....................       printf(lcd_putc, "Tamamlandi"); 
01E8:  MOVLW  1F
01E9:  BSF    03.6
01EA:  MOVWF  0D
01EB:  MOVLW  00
01EC:  MOVWF  0F
01ED:  BCF    03.6
01EE:  CALL   116
....................        
....................       delay_ms(1000); 
01EF:  MOVLW  04
01F0:  MOVWF  39
01F1:  MOVLW  FA
01F2:  MOVWF  3E
01F3:  CALL   033
01F4:  DECFSZ 39,F
01F5:  GOTO   1F1
....................        
....................       printf(lcd_putc, "\f"); 
01F6:  MOVLW  0C
01F7:  MOVWF  3C
01F8:  CALL   0EA
....................       lcd_gotoxy(4,1); 
01F9:  MOVLW  04
01FA:  MOVWF  3D
01FB:  MOVLW  01
01FC:  MOVWF  3E
01FD:  CALL   0D8
....................       printf(lcd_putc, "Ana Menuye");   
01FE:  MOVLW  25
01FF:  BSF    03.6
0200:  MOVWF  0D
0201:  MOVLW  00
0202:  MOVWF  0F
0203:  BCF    03.6
0204:  CALL   116
....................       lcd_gotoxy(2,2); 
0205:  MOVLW  02
0206:  MOVWF  3D
0207:  MOVWF  3E
0208:  CALL   0D8
....................       printf(lcd_putc, "Yonlendiriliyor"); 
0209:  MOVLW  2B
020A:  BSF    03.6
020B:  MOVWF  0D
020C:  MOVLW  00
020D:  MOVWF  0F
020E:  BCF    03.6
020F:  CALL   116
....................        
....................       delay_ms(1000); 
0210:  MOVLW  04
0211:  MOVWF  39
0212:  MOVLW  FA
0213:  MOVWF  3E
0214:  CALL   033
0215:  DECFSZ 39,F
0216:  GOTO   212
....................       printf(lcd_putc, "\f"); 
0217:  MOVLW  0C
0218:  MOVWF  3C
0219:  CALL   0EA
021A:  BCF    0A.3
021B:  BCF    0A.4
021C:  GOTO   239 (RETURN)
....................        
.................... } 
....................  

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
