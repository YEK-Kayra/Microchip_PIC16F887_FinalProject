#include <16f887.h>

//--> FUSES
#fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT

//--> USEs
#use delay(clock=4M)


//--> INCLUDES
#include <lcd.c>   

//Will be Implemented
//DEFINATIONS
//They will share the EEPROM memory evenly
#define eeprom_Client0_systemStartAddress 0
#define eeprom_Client1_systemStartAddress 130


typedef struct{

unsigned long int time_Foaming;         //Process number-1
unsigned long int time_Washing;         //Process number-2
unsigned long int time_Ventilation;     //Process number-3
unsigned long int mililitre_Polishing;       //Process number-4 

}MikroleumClient_HandleTypeDef;


MikroleumClient_HandleTypeDef MikroClient[2]; //Each customer keeps their own records
                                              //MikroClient[0] Mr. Selcuk //ClientNumber=0
                                              //MikroClient[1] Mr. Emre   //ClientNumber=1
int8 ClientNumber=0;                            // Will be used as given on the right --> MikroClient[ClientNumber]  


//Will be implemented//

//------------ VAR --> INTERNAL EEPROM <-- VAR ------------//
//EEPROM variables to store the values selected by the user
// Variables for storing "written" values
unsigned int8 eeprom_foaming_written_cost     = 0;
unsigned int8 eeprom_washing_written_cost     = 0;
unsigned int8 eeprom_ventilating_written_cost = 0;
unsigned int8 eeprom_polishing_written_cost   = 0;

// Variables for storing "read" values
unsigned int8 eeprom_foaming_read_cost     = 0;
unsigned int8 eeprom_washing_read_cost     = 0;
unsigned int8 eeprom_ventilating_read_cost = 0;
unsigned int8 eeprom_polishing_read_cost   = 0;

//Keeps track of the last written address in EEPROM for each customer
unsigned int8 Client0_last_address=0; //For Selçuk Bey's account
unsigned int8 Client1_last_address=0; //For Emre Bey's account

//hangi iþlem üzerinde duruyorsak onun numarasý iþlem-1, iþlem-2 ==> 1 ve 2 bunlarýn numarasý oluyor, 
unsigned int8 IndexOfReadMemory=2;  //en az 1 olabilir

//Will be implemented into //
/* ======== LCD SCREEN FUNCTIONS PROTOTYPES  ======== */
void displayProcessCompletionStatus(void);
void display_SelectedOpsVal_EEPROM_OnLCD(void);

/* ======== EEPROM WRITE/READ FUNCTIONS PROTOTYPES  ======== */
void loadCostValuesToEEPROMVariables(void);
void write_EEPROMVariables_to_EEPROMregs(void);
void Read_EEPROMVariables_from_EEPROMregs(void);


void main(void) 
{

      lcd_init(); // LCD ekranýmýzý baþlatacak

      //Baslangýç deðerlerini atalým
      MikroClient[ClientNumber].time_Foaming        = 20;      //4tl(20)   |    12tl(60)
      MikroClient[ClientNumber].time_Washing        = 40;      //8tl(40)   |    14tl(70)
      MikroClient[ClientNumber].time_Ventilation    = 60;      //12tl(60)  |    16tl(80)
      MikroClient[ClientNumber].mililitre_Polishing = 2;       //30tl(2)   |    15tl(1)
         

      
      
 while(1)
 {
     
 }
}

//Will be implemented//




//Secilen islemin eeprom kayýtlarýný görüntüle
void display_SelectedOpsVal_EEPROM_OnLCD(){
     
     Read_EEPROMVariables_from_EEPROMregs();
     
      printf(lcd_putc, "\f");
      
      lcd_gotoxy(1,1);
      printf(lcd_putc, "F: %d TL",eeprom_foaming_read_cost); 
      lcd_gotoxy(8,1);
      printf(lcd_putc, " W: %d TL",eeprom_washing_read_cost); 
      lcd_gotoxy(1,2);
      printf(lcd_putc, "V: %d TL",eeprom_ventilating_read_cost); 
      lcd_gotoxy(8,8);
      printf(lcd_putc, " P: %d TL",eeprom_polishing_read_cost); 
       
}

//!//will be implemented
void Read_EEPROMVariables_from_EEPROMregs(){
    
    // NE ZAMAN NEXT BUTONUNA BASILIR O ZAMAN SEÇÝM YAPILIR
    // IndexOfReadMemory butonun üzerinde bulunduðu yer(next demeden önce)
    
        if(ClientNumber == 0)
        {
                  
            eeprom_foaming_read_cost     = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+4) );  
            eeprom_washing_read_cost     = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+5) );
            eeprom_ventilating_read_cost = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+6) );
            eeprom_polishing_read_cost   = read_eeprom( eeprom_Client0_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+7) );
     
        }
        
        if(ClientNumber == 1){
        
            eeprom_foaming_read_cost     = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+1) );  
            eeprom_washing_read_cost     = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+2) );
            eeprom_ventilating_read_cost = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+3) );
            eeprom_polishing_read_cost   = read_eeprom( eeprom_Client1_systemStartAddress + (((IndexOfReadMemory - 1)*4 )+4) );
        
        }

}






void displayProcessCompletionStatus(){

      lcd_gotoxy(2,1);
      printf(lcd_putc, "Operasyon Sonu");   
      delay_ms(2000);
      printf(lcd_putc, "\f");
      lcd_gotoxy(3,1);
      printf(lcd_putc, "Islemleriniz");  
      lcd_gotoxy(3,2);
      printf(lcd_putc, "Kaydediliyor");
      
      loadCostValuesToEEPROMVariables();
         
      delay_ms(1000);
      
      printf(lcd_putc, "\f");
      lcd_gotoxy(5,1);
      printf(lcd_putc, "Kayitlar");  
      lcd_gotoxy(4,2);
      printf(lcd_putc, "Tamamlandi");
      
      delay_ms(1000);
      
      printf(lcd_putc, "\f");
      lcd_gotoxy(4,1);
      printf(lcd_putc, "Ana Menuye");  
      lcd_gotoxy(2,2);
      printf(lcd_putc, "Yonlendiriliyor");
      
      delay_ms(1000);
      printf(lcd_putc, "\f");
      
}



//will be implemented
void loadCostValuesToEEPROMVariables(){

      //Cost values to be written
      eeprom_foaming_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Foaming)/10)*2);
      eeprom_washing_written_cost     = (unsigned int8)(((MikroClient[ClientNumber].time_Washing)/10)*2);
      eeprom_ventilating_written_cost = (unsigned int8)(((MikroClient[ClientNumber].time_Ventilation)/10)*2);
      eeprom_polishing_written_cost   = (unsigned int8)((MikroClient[ClientNumber].mililitre_Polishing)*15);
     
      //Write data to the allocated space for the customer who is using it
      write_EEPROMVariables_to_EEPROMregs();
}


//will be implemented
void write_EEPROMVariables_to_EEPROMregs(){

// Operations will be performed for the relevant customer
// A new operation will be defined each time the system is activated
// Example usage:
// Main Menu -> Registration Process ->NextButton -> Operation 1 -> LCD display view:
//                                                                [F=32TL    W=12TL] F: foaming     , W: Water
//                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing
//                                   ->NextButton -> Operation 2 -> LCD display view:
//                                                                [F=32TL    W=12TL] F: foaming     , W: Water
//                                                                [V=24TL    P=85TL] V: Ventilating , P: Polishing

   //Selcuk Bey's ID
   if(ClientNumber == 0){
      
      //Pull the last address to keep going on
      //The last cursor position address will always be written to the zero address, to ensure that new data does not overwrite previously written data
      Client0_last_address = read_eeprom(eeprom_Client0_systemStartAddress);
      
      write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_foaming_written_cost)     ); Client0_last_address++; //Save foaming cost
      write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_washing_written_cost)     ); Client0_last_address++; //Save washing cost
      write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_ventilating_written_cost) ); Client0_last_address++; //Save Ventilating cost
      write_eeprom( (eeprom_Client0_systemStartAddress + Client0_last_address + 5), (eeprom_polishing_written_cost)   ); Client0_last_address++; //Save Polishing cost
      write_eeprom( (eeprom_Client0_systemStartAddress                           ), ( Client0_last_address)           );                         //Save cursor location in the client0 start address
   }
   
   if(ClientNumber == 1){
      
      //Pull the last address to keep going on
      //The last cursor position address will always be written to the zero address, to ensure that new data does not overwrite previously written data
      Client1_last_address = read_eeprom(eeprom_Client1_systemStartAddress);
      
      write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_foaming_written_cost)     ); Client1_last_address++; //Save foaming cost
      write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_washing_written_cost)     ); Client1_last_address++; //Save washing cost
      write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_ventilating_written_cost) ); Client1_last_address++; //Save Ventilating cost
      write_eeprom( (eeprom_Client1_systemStartAddress + Client1_last_address + 1), (eeprom_polishing_written_cost)   ); Client1_last_address++; //Save Polishing cost
      write_eeprom( (eeprom_Client1_systemStartAddress                           ), ( Client1_last_address)           );                         //Save cursor location in the client0 start address
   
   }
   
}
