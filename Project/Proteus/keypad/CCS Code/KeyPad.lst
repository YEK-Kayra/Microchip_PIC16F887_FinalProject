CCS PCM C Compiler, Version 5.049, 5967               29-Ara-24 16:34

               Filename:   C:\Users\yunus\OneDrive\Masaüstü\Microchip_PIC16F887_FinalProject\Project\Proteus\keypad\CCS Code\KeyPad.lst

               ROM used:   413 words (5%)
                           Largest free fragment is 2048
               RAM used:   41 (11%) at main() level
                           43 (12%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0BB
0003:  NOP
.................... #include <16f887.h>   
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  MOVF   42,W
0005:  ANDLW  07
0006:  MOVWF  77
0007:  RRF    42,W
0008:  MOVWF  78
0009:  RRF    78,F
000A:  RRF    78,F
000B:  MOVLW  1F
000C:  ANDWF  78,F
000D:  MOVF   78,W
000E:  ADDWF  44,W
000F:  MOVWF  04
0010:  BCF    03.7
0011:  BTFSC  45.0
0012:  BSF    03.7
0013:  CLRF   78
0014:  INCF   78,F
0015:  INCF   77,F
0016:  GOTO   018
0017:  RLF    78,F
0018:  DECFSZ 77,F
0019:  GOTO   017
001A:  MOVF   43,F
001B:  BTFSC  03.2
001C:  GOTO   020
001D:  MOVF   78,W
001E:  IORWF  00,F
001F:  GOTO   023
0020:  COMF   78,F
0021:  MOVF   78,W
0022:  ANDWF  00,F
0023:  RETURN
*
0039:  MOVF   42,W
003A:  ANDLW  07
003B:  MOVWF  77
003C:  RRF    42,W
003D:  MOVWF  78
003E:  RRF    78,F
003F:  RRF    78,F
0040:  MOVLW  1F
0041:  ANDWF  78,F
0042:  MOVF   78,W
0043:  ADDWF  43,W
0044:  MOVWF  04
0045:  BCF    03.7
0046:  BTFSC  44.0
0047:  BSF    03.7
0048:  MOVF   00,W
0049:  MOVWF  78
004A:  INCF   77,F
004B:  GOTO   04D
004C:  RRF    78,F
004D:  DECFSZ 77,F
004E:  GOTO   04C
004F:  RETURN
0050:  CLRF   77
0051:  CLRF   78
0052:  MOVF   43,W
0053:  BCF    03.0
0054:  BTFSC  44.0
0055:  ADDWF  77,F
0056:  RRF    77,F
0057:  RRF    78,F
0058:  BTFSC  44.1
0059:  ADDWF  77,F
005A:  RRF    77,F
005B:  RRF    78,F
005C:  BTFSC  44.2
005D:  ADDWF  77,F
005E:  RRF    77,F
005F:  RRF    78,F
0060:  BTFSC  44.3
0061:  ADDWF  77,F
0062:  RRF    77,F
0063:  RRF    78,F
0064:  BTFSC  44.4
0065:  ADDWF  77,F
0066:  RRF    77,F
0067:  RRF    78,F
0068:  BTFSC  44.5
0069:  ADDWF  77,F
006A:  RRF    77,F
006B:  RRF    78,F
006C:  BTFSC  44.6
006D:  ADDWF  77,F
006E:  RRF    77,F
006F:  RRF    78,F
0070:  BTFSC  44.7
0071:  ADDWF  77,F
0072:  RRF    77,F
0073:  RRF    78,F
0074:  BCF    0A.3
0075:  BCF    0A.4
0076:  GOTO   158 (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) || defined(__PCM__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *memmove(void *s1,void *s2,size_t n) 
.................... { 
....................    unsigned char *sc1; 
....................    unsigned char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... unsigned char *strncpy(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................   unsigned char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... unsigned char *strcat(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... unsigned char *strncat(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,void *s2,size_t n) 
.................... { 
.................... unsigned char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
0077:  MOVF   42,W
0078:  MOVWF  7A
0079:  MOVF   41,W
007A:  MOVWF  04
007B:  BCF    03.7
007C:  BTFSC  7A.0
007D:  BSF    03.7
007E:  MOVF   00,W
007F:  MOVWF  45
0080:  MOVF   44,W
0081:  MOVWF  7A
0082:  MOVF   43,W
0083:  MOVWF  04
0084:  BCF    03.7
0085:  BTFSC  7A.0
0086:  BSF    03.7
0087:  MOVF   00,W
0088:  SUBWF  45,W
0089:  BTFSS  03.2
008A:  GOTO   0A2
....................       if (*s1 == '\0') 
008B:  MOVF   42,W
008C:  MOVWF  7A
008D:  MOVF   41,W
008E:  MOVWF  04
008F:  BCF    03.7
0090:  BTFSC  7A.0
0091:  BSF    03.7
0092:  MOVF   00,F
0093:  BTFSS  03.2
0094:  GOTO   098
....................          return(0); 
0095:  MOVLW  00
0096:  MOVWF  78
0097:  GOTO   0BA
0098:  MOVF   42,W
0099:  MOVWF  7A
009A:  MOVF   41,W
009B:  INCF   41,F
009C:  BTFSC  03.2
009D:  INCF   42,F
009E:  INCF   43,F
009F:  BTFSC  03.2
00A0:  INCF   44,F
00A1:  GOTO   077
....................    return((*s1 < *s2) ? -1: 1); 
00A2:  MOVF   42,W
00A3:  MOVWF  7A
00A4:  MOVF   41,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  BTFSC  42.0
00A8:  BSF    03.7
00A9:  MOVF   00,W
00AA:  MOVWF  45
00AB:  MOVF   44,W
00AC:  MOVWF  7A
00AD:  MOVF   43,W
00AE:  MOVWF  04
00AF:  BCF    03.7
00B0:  BTFSC  44.0
00B1:  BSF    03.7
00B2:  MOVF   00,W
00B3:  SUBWF  45,W
00B4:  BTFSC  03.0
00B5:  GOTO   0B8
00B6:  MOVLW  FF
00B7:  GOTO   0B9
00B8:  MOVLW  01
00B9:  MOVWF  78
00BA:  RETURN
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1. 
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/ 
.................... size_t strxfrm(unsigned char *s1, unsigned char *s2, size_t n) 
.................... { 
....................    unsigned char c; 
....................    unsigned int8 n1; 
....................     
....................    if (!s1 && !n) 
....................       n = -1; //find length 
....................  
....................    n1 = 0; 
....................     
....................    for (; n1 < n; n1++) 
....................    { 
....................       c = *s2++; 
....................       if (!c) 
....................          break; 
....................       if (s1) 
....................          *s1++ = c; 
....................    } 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... unsigned char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    unsigned char uc; 
....................    unsigned char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... unsigned char *strchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... unsigned char *strpbrk(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... unsigned char *strrchr(unsigned char *s, unsigned int8 c) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... unsigned char *strstr(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... size_t strlen(unsigned char *s) 
.................... { 
....................    unsigned char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... unsigned char *strtok(unsigned char *s1, unsigned char *s2) 
.................... { 
....................    unsigned char *beg, *end; 
....................    static char *save; 
*
00DA:  BCF    03.6
00DB:  CLRF   20
00DC:  CLRF   21
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................       return(0); 
....................        
....................    end = strpbrk(beg, s2); 
....................    if (end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................       save = end; 
....................    } 
....................    else 
....................       save = beg + strlen(beg); 
....................     
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... unsigned char * strerror(unsigned int8 errnum) 
.................... { 
.................... static unsigned char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(unsigned char *s1, unsigned char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strlwr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... unsigned char *strupr(unsigned char *s) 
.................... { 
....................    unsigned char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #use delay(clock=4M) 
*
0024:  MOVLW  41
0025:  MOVWF  04
0026:  BCF    03.7
0027:  MOVF   00,W
0028:  BTFSC  03.2
0029:  GOTO   038
002A:  MOVLW  01
002B:  MOVWF  78
002C:  CLRF   77
002D:  DECFSZ 77,F
002E:  GOTO   02D
002F:  DECFSZ 78,F
0030:  GOTO   02C
0031:  MOVLW  4A
0032:  MOVWF  77
0033:  DECFSZ 77,F
0034:  GOTO   033
0035:  GOTO   036
0036:  DECFSZ 00,F
0037:  GOTO   02A
0038:  RETURN
.................... #use fast_io(d)   
.................... #use rs232(baud=9600, parity=N, uart1, bits=8)  
....................  
....................  
.................... #fuses HS,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
....................  
.................... char related_ID;              // Stores the character to be sent via UART 
.................... char password[5];             // Collects the entered number characters, 5 characters including the null terminator '\0' 
.................... char selcukID[5] = "1234";    // Selcuk's password 
*
00DD:  MOVLW  31
00DE:  MOVWF  28
00DF:  MOVLW  32
00E0:  MOVWF  29
00E1:  MOVLW  33
00E2:  MOVWF  2A
00E3:  MOVLW  34
00E4:  MOVWF  2B
00E5:  CLRF   2C
.................... char emreID[5]   = "4321";    // Emre's password 
00E6:  MOVWF  2D
00E7:  MOVLW  33
00E8:  MOVWF  2E
00E9:  MOVLW  32
00EA:  MOVWF  2F
00EB:  MOVLW  31
00EC:  MOVWF  30
00ED:  CLRF   31
.................... int8 password_counter = 0;    // Counter for entered characters, query statements are triggered when it reaches 4 
....................  
....................  
....................  
.................... // 4 rows and 3 columns representing the keypad layout 
.................... char keypad[4][3] = { 
....................     {'1', '2', '3'}, 
....................     {'4', '5', '6'}, 
....................     {'7', '8', '9'}, 
....................     {'*', '0', '#'} 
.................... }; 
00EE:  MOVWF  33
00EF:  MOVLW  32
00F0:  MOVWF  34
00F1:  MOVLW  33
00F2:  MOVWF  35
00F3:  MOVLW  34
00F4:  MOVWF  36
00F5:  MOVLW  35
00F6:  MOVWF  37
00F7:  MOVLW  36
00F8:  MOVWF  38
00F9:  MOVLW  37
00FA:  MOVWF  39
00FB:  MOVLW  38
00FC:  MOVWF  3A
00FD:  MOVLW  39
00FE:  MOVWF  3B
00FF:  MOVLW  2A
0100:  MOVWF  3C
0101:  MOVLW  30
0102:  MOVWF  3D
0103:  MOVLW  23
0104:  MOVWF  3E
....................  
.................... void main(void)  
*
00BB:  MOVF   03,W
00BC:  ANDLW  1F
00BD:  MOVWF  03
00BE:  BSF    03.5
00BF:  BSF    03.6
00C0:  BCF    07.3
00C1:  MOVLW  19
00C2:  BCF    03.6
00C3:  MOVWF  19
00C4:  MOVLW  A6
00C5:  MOVWF  18
00C6:  MOVLW  90
00C7:  BCF    03.5
00C8:  MOVWF  18
00C9:  CLRF   32
00CA:  BSF    03.5
00CB:  BSF    03.6
00CC:  MOVF   09,W
00CD:  ANDLW  C0
00CE:  MOVWF  09
00CF:  BCF    03.6
00D0:  BCF    1F.4
00D1:  BCF    1F.5
00D2:  MOVLW  00
00D3:  BSF    03.6
00D4:  MOVWF  08
00D5:  BCF    03.5
00D6:  CLRF   07
00D7:  CLRF   08
00D8:  CLRF   09
00D9:  BCF    03.7
.................... { 
....................    set_tris_d(0xF0);  
*
0105:  MOVLW  F0
0106:  BSF    03.5
0107:  MOVWF  08
....................     
....................     while(1) 
....................     { 
....................        
....................          //Scan all rows(lines) sequentially 
....................          for(int8 row = 0; row < 4; row++) 
0108:  BCF    03.5
0109:  CLRF   3F
010A:  MOVF   3F,W
010B:  SUBLW  03
010C:  BTFSS  03.0
010D:  GOTO   16B
....................          { 
....................             
....................                output_d(0x00);                            //Clear all D port pins      
010E:  CLRF   08
....................                output_bit(PIN_D0 + row, 1);               //Set the current line to "HIGH"       
010F:  MOVLW  40
0110:  ADDWF  3F,W
0111:  MOVWF  41
0112:  MOVWF  42
0113:  MOVLW  01
0114:  MOVWF  43
0115:  CLRF   45
0116:  CLRF   44
0117:  CALL   004
0118:  MOVF   41,W
0119:  MOVWF  42
011A:  CLRF   43
011B:  CLRF   45
011C:  MOVLW  80
011D:  MOVWF  44
011E:  CALL   004
....................                delay_ms(10);                              //Short delay for debounce to stabilize the button press               
011F:  MOVLW  0A
0120:  MOVWF  41
0121:  CALL   024
....................        
....................                //Scan all columns sequentially 
....................                for(int8 col = 0; col < 3; col++) 
0122:  CLRF   40
0123:  MOVF   40,W
0124:  SUBLW  02
0125:  BTFSS  03.0
0126:  GOTO   169
....................                { 
....................                      //If found, try to find the column that is HIGH 
....................                      if(input(PIN_D4 + col))  
0127:  MOVLW  44
0128:  ADDWF  40,W
0129:  MOVWF  41
012A:  MOVWF  42
012B:  MOVLW  01
012C:  MOVWF  43
012D:  CLRF   45
012E:  MOVLW  80
012F:  MOVWF  44
0130:  CALL   004
0131:  MOVF   41,W
0132:  MOVWF  42
0133:  CLRF   44
0134:  CLRF   43
0135:  CALL   039
0136:  BTFSS  78.0
0137:  GOTO   167
....................                      {     
....................                         //Wait until the button is released 
....................                         while(input(PIN_D4 + col));    
0138:  MOVLW  44
0139:  ADDWF  40,W
013A:  MOVWF  41
013B:  MOVWF  42
013C:  MOVLW  01
013D:  MOVWF  43
013E:  CLRF   45
013F:  MOVLW  80
0140:  MOVWF  44
0141:  CALL   004
0142:  MOVF   41,W
0143:  MOVWF  42
0144:  CLRF   44
0145:  CLRF   43
0146:  CALL   039
0147:  BTFSC  78.0
0148:  GOTO   138
....................                          
....................                         password[password_counter]=keypad[row][col];       //Save the selected row and column value to the array 
0149:  MOVLW  23
014A:  ADDWF  32,W
014B:  MOVWF  78
014C:  CLRF   7A
014D:  BTFSC  03.0
014E:  INCF   7A,F
014F:  MOVF   78,W
0150:  MOVWF  41
0151:  MOVF   7A,W
0152:  MOVWF  42
0153:  MOVF   3F,W
0154:  MOVWF  43
0155:  MOVLW  03
0156:  MOVWF  44
0157:  GOTO   050
0158:  MOVF   40,W
0159:  ADDWF  78,W
015A:  ADDLW  33
015B:  MOVWF  04
015C:  BCF    03.7
015D:  MOVF   00,W
015E:  MOVWF  43
015F:  MOVF   41,W
0160:  MOVWF  04
0161:  BCF    03.7
0162:  BTFSC  42.0
0163:  BSF    03.7
0164:  MOVF   43,W
0165:  MOVWF  00
....................                         password_counter++; 
0166:  INCF   32,F
....................                          
....................                      } 
0167:  INCF   40,F
0168:  GOTO   123
....................                
....................                } 
0169:  INCF   3F,F
016A:  GOTO   10A
....................        
....................          } 
....................           
....................           
....................          if(password_counter==4) 
016B:  MOVF   32,W
016C:  SUBLW  04
016D:  BTFSS  03.2
016E:  GOTO   198
....................          { 
....................           
....................                if(strcmp(password, selcukID) == 0){ 
016F:  CLRF   42
0170:  MOVLW  23
0171:  MOVWF  41
0172:  CLRF   44
0173:  MOVLW  28
0174:  MOVWF  43
0175:  CALL   077
0176:  MOVF   78,F
0177:  BTFSS  03.2
0178:  GOTO   180
....................                   related_ID = '+';  
0179:  MOVLW  2B
017A:  MOVWF  22
....................                   putc(related_ID); 
017B:  MOVF   22,W
017C:  BTFSS  0C.4
017D:  GOTO   17C
017E:  MOVWF  19
....................                } 
017F:  GOTO   197
....................                 
....................                else if(strcmp(password, emreID) == 0){ 
0180:  CLRF   42
0181:  MOVLW  23
0182:  MOVWF  41
0183:  CLRF   44
0184:  MOVLW  2D
0185:  MOVWF  43
0186:  CALL   077
0187:  MOVF   78,F
0188:  BTFSS  03.2
0189:  GOTO   191
....................                   related_ID = '*';  
018A:  MOVLW  2A
018B:  MOVWF  22
....................                   putc(related_ID); 
018C:  MOVF   22,W
018D:  BTFSS  0C.4
018E:  GOTO   18D
018F:  MOVWF  19
....................                } 
0190:  GOTO   197
....................                 
....................                else{ 
....................                   related_ID = '.';  
0191:  MOVLW  2E
0192:  MOVWF  22
....................                   putc(related_ID); 
0193:  MOVF   22,W
0194:  BTFSS  0C.4
0195:  GOTO   194
0196:  MOVWF  19
....................                } 
....................                 
....................                password_counter=0; 
0197:  CLRF   32
....................          } 
....................  
....................       delay_ms(50); //50ms bekle. 
0198:  MOVLW  32
0199:  MOVWF  41
019A:  CALL   024
019B:  GOTO   109
....................    } 
.................... } 
019C:  SLEEP

Configuration Fuses:
   Word  1: 2CF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 0700   BORV40 NOWRT
